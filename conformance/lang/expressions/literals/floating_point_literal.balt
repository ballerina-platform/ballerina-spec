Test-Case: output
Description: Test decimal floating point number with float type descriptor.
Labels: float

function init() {
    float a = 0;
    io:println(a); // @output 0.0

    a = 9;
    io:println(a); // @output 9.0

    a = 5676345;
    io:println(a); // @output 5676345.0

    a = 56763457;
    io:println(a); // @output 5.6763457E7

    a = 0.0;
    io:println(a); // @output 0.0

    a = 0.00;
    io:println(a); // @output 0.0

    a = 0.234;
    io:println(a); // @output 0.234

    a = 9.0;
    io:println(a); // @output 9.0

    a = 9.5;
    io:println(a); // @output 9.5

    a = 7.406;
    io:println(a); // @output 7.406

    a = 23676734.8;
    io:println(a); // @output 2.36767348E7

    a = 763756557571627.87467676867368;
    io:println(a); // @output 7.637565575716279E14

    a = 0.0000000087467676867368;
    io:println(a); // @output 8.7467676867368E-9

    a = .0;
    io:println(a); // @output 0.0

    a = .0000;
    io:println(a); // @output 0.0

    a = .267848989;
    io:println(a); // @output 0.267848989

    a = .267848989787698567544322445678990;
    io:println(a); // @output 0.26784898978769855

    a = .0000000087467676867368;
    io:println(a); // @output 8.7467676867368E-9

    a = .0000000087467676867368787675750039;
    io:println(a); // @output 8.74676768673688E-9

    a = 7.406e+0;
    io:println(a); // @output 7.406

    a = 23676734.8E-0;
    io:println(a); // @output 2.36767348E7

    a = .3564E+0;
    io:println(a); // @output 0.3564

    a = .267848989e-0;
    io:println(a); // @output 0.267848989

    a = .0000E+12;
    io:println(a); // @output 0.0

    a = 7.406e+201;
    io:println(a); // @output 7.406E201

    a = 23676734.8E-21;
    io:println(a); // @output 2.36767348E-14

    a = .3564E+12;
    io:println(a); // @output 3.564E11

    a = .267848989e-124;
    io:println(a); // @output 2.67848989E-125

    a = 0E+0;
    io:println(a); // @output 0.0

    a = 0e-0;
    io:println(a); // @output 0.0

    a = 7e+56;
    io:println(a); // @output 7.0E56

    a = 7e-56;
    io:println(a); // @output 7.0E-56

    a = 785E+207;
    io:println(a); // @output 7.85E209

    a = 785E-207;
    io:println(a); // @output 7.85E-205

    a = 25e174;
    io:println(a); // @output 2.5E175

    a = 25E174;
    io:println(a); // @output 2.5E175

    a = 25.0;
    io:println(a); // @output 25.0

    a = 25.0e174;
    io:println(a); // @output 2.5E175

    a = 25.0E174;
    io:println(a); // @output 2.5E175

    a = 25.0e+174;
    io:println(a); // @output 2.5E175

    a = 25.0E-174;
    io:println(a); // @output 2.5E-173
}

Test-Case: output
Description: Test decimal floating point number with float type descriptor with floating point suffix.
Labels: float, FloatingPointTypeSuffix

function init() {
    float a = 25.0f;
    io:println(a); // @output 25.0

    a = 25.0F;
    io:println(a); // @output 25.0

    a = 25.0e174f;
    io:println(a); // @output 2.5E175

    a = 25.0e174F;
    io:println(a); // @output 2.5E175

    a = 25.0E174f;
    io:println(a); // @output 2.5E175

    a = 25.0E174F;
    io:println(a); // @output 2.5E175

    a = 25.0e+174f;
    io:println(a); // @output 2.5E175

    a = 25.0e-174F;
    io:println(a); // @output 2.5E-173

    a = 25.0E+174f;
    io:println(a); // @output 2.5E175

    a = 25.0E-174F;
    io:println(a); // @output 2.5E-173

    a = 25e174f;
    io:println(a); // @output 2.5E175

    a = 25e174F;
    io:println(a); // @output 2.5E175

    a = 25E174f;
    io:println(a); // @output 2.5E175

    a = 25E174F;
    io:println(a); // @output 2.5E175

    a = 7e+56f;
    io:println(a); // @output 7.0E56

    a = 7e-56F;
    io:println(a); // @output 7.0E-56

    a = 785E+207F;
    io:println(a); // @output 7.85E209

    a = 785E-207f;
    io:println(a); // @output 7.85E-205

    a = 7.406e+0f;
    io:println(a); // @output 7.406

    a = 23676734.8E-0F;
    io:println(a); // @output 2.36767348E7

    a = .00001E+123f;
    io:println(a); // @output 1.0E118

    a = .267848989e-14F;
    io:println(a); // @output 2.67848989E-15

    a = 7.4067877356452635432f;
    io:println(a); // @output 7.406787735645263

    a = 23676734.8F;
    io:println(a); // @output 2.36767348E7

    a = .0000f;
    io:println(a); // @output 0.0

    a = .00267848989F;
    io:println(a); // @output 0.00267848989

    a = .000267848989F;
    io:println(a); // @output 2.67848989E-4

    a = 0f;
    io:println(a); // @output 0.0

    a = 5676345f;
    io:println(a); // @output 5676345.0

    a = 9F;
    io:println(a); // @output 9.0

    a = 56763457F;
    io:println(a); // @output 5.6763457E7
}

Test-Case: output
Description: Test decimal floating point number with decimal type descriptor.
Labels: decimal, FloatingPointTypeSuffix

function init() {
    decimal g = 0;
    io:println(g); // @output 0

    g = 9;
    io:println(g); // @output 9

    g = 5676345;
    io:println(g); // @output 5676345

    g = 56763457;
    io:println(g); // @output 56763457

    g = 0d;
    io:println(g); // @output 0

    g = 5676345d;
    io:println(g); // @output 5676345

    g = 9D;
    io:println(g); // @output 9

    g = 56763457D;
    io:println(g); // @output 56763457

    g = 0.0;
    io:println(g); // @output 0

    g = 0.00;
    io:println(g); // @output 0

    g = 0.234;
    io:println(g); // @output 0.234

    g = 9.0;
    io:println(g); // @output 9.0

    g = 9.5;
    io:println(g); // @output 9.5

    g = 7.406;
    io:println(g); // @output 7.406

    g = 23676734.8;
    io:println(g); // @output 23676734.8

    g = 763756557571627.87467676867368;
    io:println(g); // @output 763756557571627.87467676867368

    g = 0.0000000087467676867368;
    io:println(g); // @output 8.7467676867368E-9

    g = .0;
    io:println(g); // @output 0

    g = .0000;
    io:println(g); // @output 0

    g = .267848989;
    io:println(g); // @output 0.267848989

    g = .267848989787698567544322445678990;
    io:println(g); // @output 0.267848989787698567544322445678990

    g = .0000000087467676867368;
    io:println(g); // @output 8.7467676867368E-9

    g = .0000000087467676867368787675750039;
    io:println(g); // @output 8.7467676867368787675750039E-9

    g = 7.4067877356452635432d;
    io:println(g); // @output 7.4067877356452635432

    g = 23676734.8D;
    io:println(g); // @output 23676734.8

    g = .0000d;
    io:println(g); // @output 0

    g = .00267848989D;
    io:println(g); // @output 0.00267848989

    g = .000267848989D;
    io:println(g); // @output 0.000267848989

    g = 7.406e+0;
    io:println(g); // @output 7.406

    g = 23676734.8E-0;
    io:println(g); // @output 23676734.8

    g = .3564E+0;
    io:println(g); // @output 0.3564

    g = .267848989e-0;
    io:println(g); // @output 0.267848989

    g = .0000E+12;
    io:println(g); // @output 0

    g = 7.406e+201;
    io:println(g); // @output 7.406E+201

    g = 23676734.8E-21;
    io:println(g); // @output 2.36767348E-14

    g = .3564E+12;
    io:println(g); // @output 3.564E+11

    g = .267848989e-124;
    io:println(g); // @output 2.67848989E-125

    g = 7.406e+0d;
    io:println(g); // @output 7.406

    g = 23676734.8E-0D;
    io:println(g); // @output 23676734.8

    g = .00001E+123d;
    io:println(g); // @output 1E+118

    g = .267848989e-14D;
    io:println(g); // @output 2.67848989E-15

    g = 0E+0;
    io:println(g); // @output 0

    g = 0e-0;
    io:println(g); // @output 0

    g = 7e+56;
    io:println(g); // @output 7E+56

    g = 7e-56;
    io:println(g); // @output 7E-56

    g = 785E+207;
    io:println(g); // @output 7.85E+209

    g = 785E-207;
    io:println(g); // @output 7.85E-205

    g = 7e+56d;
    io:println(g); // @output 7E+56

    g = 7e-56D;
    io:println(g); // @output 7E-56

    g = 785E+207D;
    io:println(g); // @output 7.85E+209

    g = 785E-207d;
    io:println(g); // @output 7.85E-205

    g = 25e1742d;
    io:println(g); // @output 2.5E+1743

    g = 25e1742D;
    io:println(g); // @output 2.5E+1743

    g = 25E1742d;
    io:println(g); // @output 2.5E+1743

    g = 25E1742D;
    io:println(g); // @output 2.5E+1743

    g = 25e174;
    io:println(g); // @output 2.5E+175

    g = 25E174;
    io:println(g); // @output 2.5E+175

    g = 25.0d;
    io:println(g); // @output 25.0

    g = 25.0D;
    io:println(g); // @output 25.0

    g = 25.0e174d;
    io:println(g); // @output 2.50E+175

    g = 25.0e174D;
    io:println(g); // @output 2.50E+175

    g = 25.0E174d;
    io:println(g); // @output 2.50E+175

    g = 25.0E174D;
    io:println(g); // @output 2.50E+175

    g = 25.0e+174d;
    io:println(g); // @output 2.50E+175

    g = 25.0e-174D;
    io:println(g); // @output 2.50E-173

    g = 25.0E+174d;
    io:println(g); // @output 2.50E+175

    g = 25.0E-174D;
    io:println(g); // @output 2.50E-173

    g = 25.0;
    io:println(g); // @output 25.0

    g = 25.0e174;
    io:println(g); // @output 2.50E+175

    g = 25.0E174;
    io:println(g); // @output 2.50E+175

    g = 25.0e+174;
    io:println(g); // @output 2.50E+175

    g = 25.0E-174;
    io:println(g); // @output 2.50E-173
}

Test-Case: output
Description: Test decimal floating point number with union of float and decimal.
Labels: decimal, float, union-type

function init() {
    decimal|float g = 1;
    io:println(g); // @output 1.0
    io:println(g is float); // @output true
    io:println(g is decimal); // @output false

    g = 9;
    io:println(g); // @output 9.0

    g = 4564347876560;
    io:println(g); // @output 4.56434787656E12
    io:println(g is float); // @output true
    io:println(g is decimal); // @output false

    g = 0.0;
    io:println(g); // @output 0.0

    g = 0.00;
    io:println(g); // @output 0.0

    g = 0.234;
    io:println(g); // @output 0.234

    g = 9.0;
    io:println(g); // @output 9.0

    g = 9.5;
    io:println(g); // @output 9.5

    g = 7.406;
    io:println(g); // @output 7.406

    g = 23676734.8;
    io:println(g); // @output 2.36767348E7

    g = 763756557571627.87467676867368;
    io:println(g); // @output 7.637565575716279E14

    g = 0.0000000087467676867368;
    io:println(g); // @output 8.7467676867368E-9

    g = .0;
    io:println(g); // @output 0.0

    g = .0000;
    io:println(g); // @output 0.0

    g = .267848989;
    io:println(g); // @output 0.267848989

    g = .267848989787698567544322445678990;
    io:println(g); // @output 0.26784898978769855

    g = .0000000087467676867368;
    io:println(g); // @output 8.7467676867368E-9

    g = .0000000087467676867368787675750039;
    io:println(g); // @output 8.74676768673688E-9

    g = 7.406e+0;
    io:println(g); // @output 7.406

    g = 23676734.8E-0;
    io:println(g); // @output 2.36767348E7

    g = .3564E+0;
    io:println(g); // @output 0.3564

    g = .267848989e-0;
    io:println(g); // @output 0.267848989

    g = .0000E+12;
    io:println(g); // @output 0.0

    g = 7.406e+201;
    io:println(g); // @output 7.406E201

    g = 23676734.8E-21;
    io:println(g); // @output 2.36767348E-14

    g = .3564E+12;
    io:println(g); // @output 3.564E11

    g = .267848989e-124;
    io:println(g); // @output 2.67848989E-125

    g = 7.406e+0d;
    io:println(g); // @output 7.406

    g = 0E+0;
    io:println(g); // @output 0.0

    g = 0e-0;
    io:println(g); // @output 0.0

    g = 7e+56;
    io:println(g); // @output 7.0E56

    g = 7e-56;
    io:println(g); // @output 7.0E-56

    g = 785E+207;
    io:println(g); // @output 7.85E209

    g = 785E-207;
    io:println(g); // @output 7.85E-205

    g = 7e+56d;
    io:println(g); // @output 7E+56

    g = 25e174;
    io:println(g); // @output 2.5E175

    g = 25E174;
    io:println(g); // @output 2.5E175

    g = 25.0;
    io:println(g); // @output 25.0

    g = 25.0e174;
    io:println(g); // @output 2.5E175

    g = 25.0E174;
    io:println(g); // @output 2.5E175

    g = 25.0e+174;
    io:println(g); // @output 2.5E175

    g = 25.0E-174;
    io:println(g); // @output 2.5E-173
}

Test-Case: output
Description: Test decimal floating point number that has a floating point suffix with union of float and decimal.
Labels: decimal, float, FloatingPointTypeSuffix, union-type

function init() {
    decimal|float g = 0f;
    io:println(g); // @output 0.0

    g = 5676345f;
    io:println(g); // @output 5676345.0

    g = 9F;
    io:println(g); // @output 9.0

    g = 56763457F;
    io:println(g); // @output 5.6763457E7

    g = 7.4067877356452635432f;
    io:println(g); // @output 7.406787735645263

    g = 23676734.8F;
    io:println(g); // @output 2.36767348E7

    g = .0000f;
    io:println(g); // @output 0.0

    g = .00267848989F;
    io:println(g); // @output 0.00267848989

    g = .000267848989F;
    io:println(g); // @output 2.67848989E-4

    g = 7.406e+0f;
    io:println(g); // @output 7.406

    g = 23676734.8E-0D;
    io:println(g); // @output 23676734.8

    g = 23676734.8E-0F;
    io:println(g); // @output 2.36767348E7

    g = .00001E+123d;
    io:println(g); // @output 1E+118

    g = .00001E+123f;
    io:println(g); // @output 1.0E118

    g = .267848989e-14D;
    io:println(g); // @output 2.67848989E-15

    g = .267848989e-14F;
    io:println(g); // @output 2.67848989E-15

    g = 7e+56f;
    io:println(g); // @output 7.0E56

    g = 7e-56D;
    io:println(g); // @output 7E-56

    g = 7e-56F;
    io:println(g); // @output 7.0E-56

    g = 785E+207D;
    io:println(g); // @output 7.85E+209

    g = 785E+207F;
    io:println(g); // @output 7.85E209

    g = 785E-207d;
    io:println(g); // @output 7.85E-205

    g = 785E-207f;
    io:println(g); // @output 7.85E-205

    g = 25e1742d;
    io:println(g); // @output 2.5E+1743

    g = 25e1742D;
    io:println(g); // @output 2.5E+1743

    g = 25E1742d;
    io:println(g); // @output 2.5E+1743

    g = 25E1742D;
    io:println(g); // @output 2.5E+1743

    g = 25e174f;
    io:println(g); // @output 2.5E175

    g = 25e174F;
    io:println(g); // @output 2.5E175

    g = 25E174f;
    io:println(g); // @output 2.5E175

    g = 25E174F;
    io:println(g); // @output 2.5E175

    g = 25.0d;
    io:println(g); // @output 25.0

    g = 25.0D;
    io:println(g); // @output 25.0

    g = 25.0e174d;
    io:println(g); // @output 2.50E+175

    g = 25.0e174D;
    io:println(g); // @output 2.50E+175

    g = 25.0E174d;
    io:println(g); // @output 2.50E+175

    g = 25.0E174D;
    io:println(g); // @output 2.50E+175

    g = 25.0e+174d;
    io:println(g); // @output 2.50E+175

    g = 25.0e-174D;
    io:println(g); // @output 2.50E-173

    g = 25.0E+174d;
    io:println(g); // @output 2.50E+175

    g = 25.0E-174D;
    io:println(g); // @output 2.50E-173

    g = 25.0f;
    io:println(g); // @output 25.0

    g = 25.0F;
    io:println(g); // @output 25.0

    g = 25.0e174f;
    io:println(g); // @output 2.5E175

    g = 25.0e174F;
    io:println(g); // @output 2.5E175

    g = 25.0E174f;
    io:println(g); // @output 2.5E175

    g = 25.0E174F;
    io:println(g); // @output 2.5E175

    g = 25.0e+174f;
    io:println(g); // @output 2.5E175

    g = 25.0e-174F;
    io:println(g); // @output 2.5E-173

    g = 25.0E+174f;
    io:println(g); // @output 2.5E175

    g = 25.0E-174F;
    io:println(g); // @output 2.5E-173

    g = 7.4067877356452635432d;
    io:println(g); // @output 7.4067877356452635432

    g = 23676734.8D;
    io:println(g); // @output 23676734.8

    g = .0000d;
    io:println(g); // @output 0

    g = .00267848989D;
    io:println(g); // @output 0.00267848989

    g = .000267848989D;
    io:println(g); // @output 0.000267848989

    g = 0d;
    io:println(g); // @output 0

    g = 5676345d;
    io:println(g); // @output 5676345

    g = 9D;
    io:println(g); // @output 9

    g = 56763457D;
    io:println(g); // @output 56763457
    io:println(g is float); // @output false
    io:println(g is decimal); // @output true
}

Test-Case: error
Description: Test out of range floating point literal with float type descriptor.
Labels: float, HexFloatingPointLiteral

function errorFunction() {
    float _ = 9.99E+6111; // @error '0x1.0fffffffffffffp+1024' is out of range for 'float'

    float _ = 1.00E-610; // @error '0x1p-1075' is out of range for 'float'

    float _ = 0x1.0fffffffffffffp+1024; // @error '9.99E+6111' is out of range for 'float'

    float _ = 0x1p-1075; // @error '1.00E-610' is out of range for 'float'
}

Test-Case: output
Description: Test out of range decimal floating point literal with decimal type descriptor.
Labels: decimal

function init() {
    decimal a = 9.99E+6111;
    io:println(a); // @output 9.99E+6111

    a = 1.00E-610;
    io:println(a); // @output 1.00E-610
}

Test-Case: error
Description: Test out of range floating point literal with floating point type descriptor.
Labels: decimal, float, HexFloatingPointLiteral, union-type

function errorFunction() {
    float|decimal _ = 9.99E+6111; // @error '9.99E+6111' is out of range for 'float'

    float|decimal _ = 1.00E-610; // @error '1.00E-610' is out of range for 'float'

    float|decimal _ = 0x1.0fffffffffffffp+1024; // @error '0x1.0fffffffffffffp+1024' is out of range for 'float'

    float|decimal _ = 0x1p-1075; // @error '0x1p-1075' is out of range for 'float'
}

Test-Case: output
Description: Test floating point literal max and min with decimal type descriptor.
Labels: decimal

function init() {
    decimal e = 1E-6176;
    io:println(e); // @output 0

    e = 9.99E+6111;
    io:println(e); // @output 9.99E+6111

    e = 9.999999999999999999999999999999999E6144;
    io:println(e); // @output 9.999999999999999999999999999999999E+6144

    e = -9.999999999999999999999999999999999E6144;
    io:println(e); // @output -9.999999999999999999999999999999999E+6144

    e = 1.000000000000000000000000000000000E-6143;
    io:println(e); // @output 1.000000000000000000000000000000000E-6143
}

Test-Case: output
Description: Test floating point literal max and min with floating point type descriptor.
Labels: decimal, float, FloatingPointTypeSuffix, HexFloatingPointLiteral, union-type

function init() {
    float|decimal f = 1.7976931348623157E+308;
    io:println(f); // @output 1.7976931348623157E308

    f = 1.7976931348623157E+308F;
    io:println(f); // @output 1.7976931348623157E308

    f = 4.94065645841246544E-324;
    io:println(f); // @output 4.9E-324

    f = 4.94065645841246544E-324F;
    io:println(f); // @output 4.9E-324

    f = 0x1.0fffffffffffffp+1023;
    io:println(f); // @output 9.550244778956053E307

    f = 0x1p-1074;
    io:println(f); // @output 4.9E-324

    f = 0x0p-1074;
    io:println(f); // @output 0.0

    f = 0x0p-1075;
    io:println(f); // @output 0.0

    f = 1E-6176d;
    io:println(f); // @output 0

    f = 9.99E+6111D;
    io:println(f); // @output 9.99E+6111
}

Test-Case: error
Description: Test decimal floating point numbers with leading zeros
Labels: decimal, float, FloatingPointTypeSuffix, union-type

function errorFunction() {
    float|decimal _ = 03f; // @error invalid floating point with leading '0'

    float|decimal _ = 03F; // @error invalid floating point with leading '0'

    float|decimal _ = 03d; // @error invalid floating point with leading '0'

    float|decimal _ = 03D; // @error invalid floating point with leading '0'

    float|decimal _ = 00E52f; // @error invalid floating point with leading '0'

    float|decimal _ = 00E52F; // @error invalid floating point with leading '0'

    float|decimal _ = 00E52D; // @error invalid floating point with leading '0'

    float|decimal _ = 00E52d; // @error invalid floating point with leading '0'

    float|decimal _ = 00e52f; // @error invalid floating point with leading '0'

    float|decimal _ = 00e52F; // @error invalid floating point with leading '0'

    float|decimal _ = 00e52D; // @error invalid floating point with leading '0'

    float|decimal _ = 00e52d; // @error invalid floating point with leading '0'

    float|decimal _ = 00e+4; // @error invalid floating point with leading '0'

    float|decimal _ = 00E-5f; // @error invalid floating point with leading '0'

    float|decimal _ = 00e+5D; // @error invalid floating point with leading '0'

    float|decimal _ = 00E+5F; // @error invalid floating point with leading '0'

    float|decimal _ = 00e-5d; // @error invalid floating point with leading '0'

    float|decimal _ = 00.4; // @error invalid floating point with leading '0'

    float|decimal _ = 00.005E-9; // @error invalid floating point with leading '0'

    float|decimal _ = 00.005e+9; // @error invalid floating point with leading '0'

    float|decimal _ = 00.005e+9F; // @error invalid floating point with leading '0'

    float|decimal _ = 00.005e+9f; // @error invalid floating point with leading '0'

    float|decimal _ = 00.005e-9F; // @error invalid floating point with leading '0'

    float|decimal _ = 00.005e-9f; // @error invalid floating point with leading '0'

    float|decimal _ = 00.005E-9d; // @error invalid floating point with leading '0'

    float|decimal _ = 00.005E-9D; // @error invalid floating point with leading '0'

    float|decimal _ = 00.005E+9d; // @error invalid floating point with leading '0'

    float|decimal _ = 00.005E+9D; // @error invalid floating point with leading '0'
}

Test-Case: parser-error
Description: Test invalid decimal floating point literals.
Labels: decimal, float, FloatingPointTypeSuffix, union-type

function errorFunction() {

    float|decimal a = 25h174; // @error invalid DecimalFloatingPointNumber due to incorrect ExponentIndicator

    a = 25e 174; // @error invalid DecimalFloatingPointNumber due to unnecessary space

    a = 25 e174; // @error invalid DecimalFloatingPointNumber due to unnecessary space

    a = 25E_174; // @error invalid DecimalFloatingPointNumber due to invalid sign after ExponentIndicator

    a = 25E++174; // @error invalid DecimalFloatingPointNumber due to invalid sign after ExponentIndicator

    a = 25E--174; // @error invalid DecimalFloatingPointNumber due to invalid sign after ExponentIndicator

    a = 25E+-174; // @error invalid DecimalFloatingPointNumber due to invalid sign after ExponentIndicator

    a = 25E+ABC; // @error invalid DecimalFloatingPointNumber due to missing digits after the sign in Exponent

    a = 25E +174; //  @error invalid DecimalFloatingPointNumber due to unnecessary space

    a = 25e+ 174; //  @error invalid DecimalFloatingPointNumber due to unnecessary space

    a = 25E-ABC; // @error invalid DecimalFloatingPointNumber due to invalid characters after the sign in Exponent

    a = 25E -174; //  @error invalid DecimalFloatingPointNumber due to unnecessary space

    a = 25e- 174; //  @error invalid DecimalFloatingPointNumber due to unnecessary space

    a = 25E-174S; //  @error invalid DecimalFloatingPointNumber due to invalid Suffix

    a = 25E+174S; //  @error invalid DecimalFloatingPointNumber due to invalid Suffix

    a = 25E174s; //  @error invalid DecimalFloatingPointNumber due to invalid Suffix

    a = .25s; //  @error invalid DecimalFloatingPointNumber due to invalid Suffix

    a = 25.s; //  @error invalid DecimalFloatingPointNumber due to invalid Suffix

    a = 25.23s; //  @error invalid DecimalFloatingPointNumber due to invalid Suffix

    a = .25E-174S; //  @error invalid DecimalFloatingPointNumber due to invalid Suffix

    a = 25.0E+174S; //  @error invalid DecimalFloatingPointNumber due to invalid Suffix

    a = 25.67E174s; //  @error invalid DecimalFloatingPointNumber due to invalid Suffix

    a = 25E+174 f; //  @error invalid DecimalFloatingPointNumber due to unnecessary space

    a = 25E+174 F; //  @error invalid DecimalFloatingPointNumber due to unnecessary space

    a = 25E+174 d; //  @error invalid DecimalFloatingPointNumber due to unnecessary space

    a = 25E+174 D; //  @error invalid DecimalFloatingPointNumber due to unnecessary space

    a = 25,; //  @error invalid DecimalFloatingPointNumber due invalid decimal point symbol

    a = ,25; //  @error invalid DecimalFloatingPointNumber due invalid decimal point symbol

    a = 235,55; //  @error invalid DecimalFloatingPointNumber due invalid decimal point symbol

    a = 235. 55; //  @error invalid DecimalFloatingPointNumber due to unnecessary space

    a = 235 .55; //  @error invalid DecimalFloatingPointNumber due to unnecessary space

    a = 25 .;  //  @error invalid DecimalFloatingPointNumber due to unnecessary space

    a = . 99;  //  @error invalid DecimalFloatingPointNumber due to unnecessary space

    a = . 99;  //  @error invalid DecimalFloatingPointNumber due to unnecessary space

    a = 25. e174; //  @error invalid DecimalFloatingPointNumber due to unnecessary space

    a = 25.0E 174; //  @error invalid DecimalFloatingPointNumber due to unnecessary space

    a = 25 .0E174; //  @error invalid DecimalFloatingPointNumber due to unnecessary space

    a = 25.B174; //  @error invalid DecimalFloatingPointNumber due to incorrect ExponentIndicator

    a = 243.32B174; //  @error invalid DecimalFloatingPointNumber due to incorrect ExponentIndicator

    a = 243.32e 174; //  @error invalid DecimalFloatingPointNumber due to unnecessary space

    a = 243.32 e1742; // @error invalid DecimalFloatingPointNumber due to unnecessary space

    a = 245.32 E 1742; // @error invalid DecimalFloatingPointNumber due to unnecessary spaces

    a = .99eabc; // @error invalid DecimalFloatingPointNumber due to invalid characters after the ExponentIndicator in Exponent

    a = 25.B+1742; //  @error invalid DecimalFloatingPointNumber due to incorrect ExponentIndicator

    a = 25.BCF+1742; //  @error invalid DecimalFloatingPointNumber due to incorrect ExponentIndicator

    a = 25.TYU+GFH; // @error invalid DecimalFloatingPointNumber due to invalid Exponent

    a = 25.TYUGFH; // @error invalid DecimalFloatingPointNumber due to rhs of decimal point not being digits

    a = TYUGFH.23; // @error invalid DecimalFloatingPointNumber due to lhs of decimal point not being a DecimalNumber

    a = TYUGFH.; // @error invalid DecimalFloatingPointNumber due to lhs of decimal point not being a DecimalNumber

    a = .TYUGFH; // @error invalid DecimalFloatingPointNumber due to rhs of decimal point not being digits

    a = 25..23; // @error invalid DecimalFloatingPointNumber due to multiple decimal point symbols

    a = 25.0E+ty; // @error invalid DecimalFloatingPointNumber due to incorrect Exponent

    a = 25.0Ety;  // @error invalid DecimalFloatingPointNumber due to incorrect Exponent

    a = 25.BC2F+1742; // @error invalid DecimalFloatingPointNumber due to incorrect Exponent

    a = 25.BC2F+17VF42; // @error invalid DecimalFloatingPointNumber due to incorrect Exponent

    a = 25.BC2?F+17VF?42; // @error invalid DecimalFloatingPointNumber due to incorrect Exponent

    a = 25.67p+20; // @error invalid DecimalFloatingPointNumber due to incorrect ExponentIndicator

    a = .99+1742; // @error invalid DecimalFloatingPointNumber due to missing ExponentIndicator

    a = e+174; // @error invalid DecimalFloatingPointNumber due to the absence of DecimalNumber or DottedDecimalNumber

    a = e174; // @error invalid DecimalFloatingPointNumber due to the absence of DecimalNumber or DottedDecimalNumber

    a = 25.0E;1742; // @error invalid DecimalFloatingPointNumber due to invalid expression statement

    a = 25.0E=1742; // @error invalid DecimalFloatingPointNumber due to invalid expression statement

    a = 25.0E:1742; // @error invalid DecimalFloatingPointNumber due to invalid expression statement

    a = 25.0E,1742; // @error invalid DecimalFloatingPointNumber due to invalid expression statement

    a = .99E-; // @error invalid DecimalFloatingPointNumber due to invalid expression statement

    a = .99E+; // @error invalid DecimalFloatingPointNumber due to invalid expression statement

    a = .99E; // @error invalid DecimalFloatingPointNumber due to missing digit after exponent indicator
}

Test-Case: error
Description: Test invalid decimal floating point literals.
Labels: decimal, float, union-type

function errorFunction() {
    float|decimal _ = .99+1742; // @error invalid DecimalFloatingPointNumber due to missing ExponentIndicator

    float|decimal _ = e+174; // @error invalid DecimalFloatingPointNumber due to the absence of DecimalNumber or DottedDecimalNumber

    float|decimal _ = e174; // @error invalid DecimalFloatingPointNumber due to the absence of DecimalNumber or DottedDecimalNumber
}

Test-Case: output
Description: Test DecimalFloatingPointNumber with function call.
Labels: decimal, float, function-call-expr

function init() {
    printFloatingPoint(25); // @output 25.0

    printFloatingPoint(25e174); // @output 2.5E175

    printFloatingPoint(25E174); // @output 2.5E175


    printFloatingPoint(25e+174); // @output 2.5E175

    printFloatingPoint(25E-174); // @output 2.5E-173


    printFloatingPoint(25.0); // @output 25.0

    printFloatingPoint(245.32); // @output 245.32

    printFloatingPoint(.99); // @output 0.99


    printFloatingPoint(25.0e174); // @output 2.5E175

    printFloatingPoint(25.0E174); // @output 2.5E175

    printFloatingPoint(243.32e174); // @output 2.4332E176

    printFloatingPoint(245.32E174); // @output 2.4532E176

    printFloatingPoint(99e174); // @output 9.9E175

    printFloatingPoint(.99E174); // @output 9.9E173


    printFloatingPoint(25.0e+174); // @output 2.5E175

    printFloatingPoint(25.0E-174); // @output 2.5E-173

    printFloatingPoint(243.32e+174); // @output 2.4332E176

    printFloatingPoint(245.32E-174); // @output 2.4532E-172

    printFloatingPoint(.99e+174); // @output 9.9E173

    printFloatingPoint(.99E-174); // @output 9.9E-175
}

function printFloatingPoint(float|decimal x) {
    io:println(x);
}

Test-Case: output
Description: Test decimal floating point number that has a floating point suffix with function call.
Labels: decimal, float, FloatingPointTypeSuffix, function-call-expr

function init() {
    printFloatingPoint(25e174f); // @output 2.5E175

    printFloatingPoint(25e174F); // @output 2.5E175

    printFloatingPoint(25e174d); // @output 2.5E+175

    printFloatingPoint(25e174D); // @output 2.5E+175

    printFloatingPoint(25e174f); // @output 2.5E175

    printFloatingPoint(25e174F); // @output 2.5E175

    printFloatingPoint(25e174d); // @output 2.5E+175

    printFloatingPoint(25e174D); // @output 2.5E+175


    printFloatingPoint(25e+174f); // @output 2.5E175

    printFloatingPoint(25e-174F); // @output 2.5E-173

    printFloatingPoint(25e+174d); // @output 2.5E+175

    printFloatingPoint(25e-174D); // @output 2.5E-173

    printFloatingPoint(25E+174f); // @output 2.5E175

    printFloatingPoint(25E-174F); // @output 2.5E-173

    printFloatingPoint(25E+174d); // @output 2.5E+175

    printFloatingPoint(25E-174D); // @output 2.5E-173


    printFloatingPoint(25f); // @output 25.0

    printFloatingPoint(25F); // @output 25.0

    printFloatingPoint(25d); // @output 25

    printFloatingPoint(25D); // @output 25

   printFloatingPoint(25.0f); // @output 25.0

    printFloatingPoint(25.0F); // @output 25.0

    printFloatingPoint(25.0d); // @output 25.0

    printFloatingPoint(25.0D); // @output 25.0

    printFloatingPoint(245.32f); // @output 245.32

    printFloatingPoint(245.32F); // @output 245.32

    printFloatingPoint(245.32d); // @output 245.32

    printFloatingPoint(245.32D); // @output 245.32

    printFloatingPoint(.99f); // @output 0.99

    printFloatingPoint(.99F); // @output 0.99

    printFloatingPoint(.99d); // @output 0.99

    printFloatingPoint(.99D); // @output 0.99


    printFloatingPoint(25.0e174f); // @output 2.5E175

    printFloatingPoint(25.0e174F); // @output 2.5E175

    printFloatingPoint(25.0e174d); // @output 2.50E+175

    printFloatingPoint(25.0e174D); // @output 2.50E+175

    printFloatingPoint(25.0E174f); // @output 2.5E175

    printFloatingPoint(25.0E174F); // @output 2.5E175

    printFloatingPoint(25.0E174d); // @output 2.50E+175

    printFloatingPoint(25.0E174D); // @output 2.50E+175

    printFloatingPoint(245.32e174f); // @output 2.4532E176

    printFloatingPoint(245.32e174F); // @output 2.4532E176

    printFloatingPoint(245.32e174d); // @output 2.4532E+176

    printFloatingPoint(245.32e174D); // @output 2.4532E+176

    printFloatingPoint(245.32E174F); // @output 2.4532E176

    printFloatingPoint(245.32E174d); // @output 2.4532E+176

    printFloatingPoint(245.32E174D); // @output 2.4532E+176

    printFloatingPoint(.99e174f); // @output 9.9E173

    printFloatingPoint(.99e174F); // @output 9.9E173

    printFloatingPoint(.99e174d); // @output 9.9E+173

    printFloatingPoint(.99e174D); // @output 9.9E+173

    printFloatingPoint(.99E174f); // @output 9.9E173

    printFloatingPoint(.99E174F); // @output 9.9E173

    printFloatingPoint(.99E174d); // @output 9.9E+173

    printFloatingPoint(.99E174D); // @output 9.9E+173

    printFloatingPoint(25.0e+174f); // @output 2.5E175

    printFloatingPoint(25.0e-174F); // @output 2.5E-173

    printFloatingPoint(25.0e+174d); // @output 2.50E+175

    printFloatingPoint(25.0e-174D); // @output 2.50E-173

    printFloatingPoint(25.0E+174f); // @output 2.5E175

    printFloatingPoint(25.0E-174F); // @output 2.5E-173

    printFloatingPoint(25.0E+174d); // @output 2.50E+175

    printFloatingPoint(25.0E-174D); // @output 2.50E-173

    printFloatingPoint(245.32e+174f); // @output 2.4532E176

    printFloatingPoint(245.32e-174F); // @output 2.4532E-172

    printFloatingPoint(245.32e+174d); // @output 2.4532E+176

    printFloatingPoint(245.32e-174D); // @output 2.4532E-172

    printFloatingPoint(245.32E+174f); // @output 2.4532E176

    printFloatingPoint(245.32E-174F); // @output 2.4532E-172

    printFloatingPoint(245.32E+174d); // @output 2.4532E+176

    printFloatingPoint(245.32E-174D); // @output 2.4532E-172

    printFloatingPoint(.99e+174f); // @output 9.9E173

    printFloatingPoint(.99e-174F); // @output 9.9E-175

    printFloatingPoint(.99e+174d); // @output 9.9E+173

    printFloatingPoint(.99e-174D); // @output 9.9E-175

    printFloatingPoint(.99E+174f); // @output 9.9E173

    printFloatingPoint(.99E-174F); // @output 9.9E-175

    printFloatingPoint(.99E+174d); // @output 9.9E+173

    printFloatingPoint(.99E-174D); // @output 9.9E-175


    printFloatingPoint(25f); // @output 25.0

    printFloatingPoint(25F); // @output 25.0

    printFloatingPoint(25d); // @output 25

    printFloatingPoint(25D); // @output 25
}

function printFloatingPoint(float|decimal x) {
    io:println(x);
}

Test-Case: output
Description: Test DecimalFloatingPointNumber with toString().
Labels: FloatingPointTypeSuffix, value:toString

function init() {
    io:println((25).toString()); // @output 25

    io:println((25e174).toString()); // @output 2.5E175

    io:println((25E174).toString()); // @output 2.5E175


    io:println((25e+174).toString()); // @output 2.5E175

    io:println((25E-174).toString()); // @output 2.5E-173


    io:println((25e174f).toString()); // @output 2.5E175

    io:println((25e174F).toString()); // @output 2.5E175

    io:println((25e174d).toString()); // @output 2.5E+175

    io:println((25e174D).toString()); // @output 2.5E+175

    io:println((25e174f).toString()); // @output 2.5E175

    io:println((25e174F).toString()); // @output 2.5E175

    io:println((25e174d).toString()); // @output 2.5E+175

    io:println((25e174D).toString()); // @output 2.5E+175


    io:println((25e+174f).toString()); // @output 2.5E175

    io:println((25e-174F).toString()); // @output 2.5E-173

    io:println((25e+174d).toString()); // @output 2.5E+175

    io:println((25e-174D).toString()); // @output 2.5E-173

    io:println((25E+174f).toString()); // @output 2.5E175

    io:println((25E-174F).toString()); // @output 2.5E-173

    io:println((25E+174d).toString()); // @output 2.5E+175

    io:println((25E-174D).toString()); // @output 2.5E-173


    io:println((25f).toString()); // @output 25.0

    io:println((25F).toString()); // @output 25.0

    io:println((25d).toString()); // @output 25

    io:println((25D).toString()); // @output 25


    io:println((25.0).toString()); // @output 25.0

    io:println((245.32).toString()); // @output 245.32

    io:println((.99).toString()); // @output 0.99



    io:println((25.0e174).toString()); // @output 2.5E175

    io:println((25.0E174).toString()); // @output 2.5E175

    io:println((243.32e174).toString()); // @output 2.4332E176

    io:println((245.32E174).toString()); // @output 2.4532E176

    io:println((99e174).toString()); // @output 9.9E175

    io:println((.99E174).toString()); // @output 9.9E173


    io:println((25.0e+174).toString()); // @output 2.5E175

    io:println((25.0E-174).toString()); // @output 2.5E-173

    io:println((243.32e+174).toString()); // @output 2.4332E176

    io:println((245.32E-174).toString()); // @output 2.4532E-172

    io:println((.99e+174).toString()); // @output 9.9E173

    io:println((.99E-174).toString()); // @output 9.9E-175

    io:println((25.0f).toString()); // @output 25.0

    io:println((25.0F).toString()); // @output 25.0

    io:println((25.0d).toString()); // @output 25.0

    io:println((25.0D).toString()); // @output 25.0

    io:println((245.32f).toString()); // @output 245.32

    io:println((245.32F).toString()); // @output 245.32

    io:println((245.32d).toString()); // @output 245.32

    io:println((245.32D).toString()); // @output 245.32

    io:println((.99f).toString()); // @output 0.99

    io:println((.99F).toString()); // @output 0.99

    io:println((.99d).toString()); // @output 0.99

    io:println((.99D).toString()); // @output 0.99

    io:println((25.0e174f).toString()); // @output 2.5E175

    io:println((25.0e174F).toString()); // @output 2.5E175

    io:println((25.0e174d).toString()); // @output 2.50E+175

    io:println((25.0e174D).toString()); // @output 2.50E+175

    io:println((25.0E174f).toString()); // @output 2.5E175

    io:println((25.0E174F).toString()); // @output 2.5E175

    io:println((25.0E174d).toString()); // @output 2.50E+175

    io:println((25.0E174D).toString()); // @output 2.50E+175

    io:println((245.32e174f).toString()); // @output 2.4532E176

    io:println((245.32e174F).toString()); // @output 2.4532E176

    io:println((245.32e174d).toString()); // @output 2.4532E+176

    io:println((245.32e174D).toString()); // @output 2.4532E+176

    io:println((245.32E174F).toString()); // @output 2.4532E176

    io:println((245.32E174d).toString()); // @output 2.4532E+176

    io:println((245.32E174D).toString()); // @output 2.4532E+176

    io:println((.99e174f).toString()); // @output 9.9E173

    io:println((.99e174F).toString()); // @output 9.9E173

    io:println((.99e174d).toString()); // @output 9.9E+173

    io:println((.99e174D).toString()); // @output 9.9E+173

    io:println((.99E174f).toString()); // @output 9.9E173

    io:println((.99E174F).toString()); // @output 9.9E173

    io:println((.99E174d).toString()); // @output 9.9E+173

    io:println((.99E174D).toString()); // @output 9.9E+173

    io:println((25.0e+174f).toString()); // @output 2.5E175

    io:println((25.0e-174F).toString()); // @output 2.5E-173

    io:println((25.0e+174d).toString()); // @output 2.50E+175

    io:println((25.0e-174D).toString()); // @output 2.50E-173

    io:println((25.0E+174f).toString()); // @output 2.5E175

    io:println((25.0E-174F).toString()); // @output 2.5E-173

    io:println((25.0E+174d).toString()); // @output 2.50E+175

    io:println((25.0E-174D).toString()); // @output 2.50E-173

    io:println((245.32e+174f).toString()); // @output 2.4532E176

    io:println((245.32e-174F).toString()); // @output 2.4532E-172

    io:println((245.32e+174d).toString()); // @output 2.4532E+176

    io:println((245.32e-174D).toString()); // @output 2.4532E-172

    io:println((245.32E+174f).toString()); // @output 2.4532E176

    io:println((245.32E-174F).toString()); // @output 2.4532E-172

    io:println((245.32E+174d).toString()); // @output 2.4532E+176

    io:println((245.32E-174D).toString()); // @output 2.4532E-172

    io:println((.99e+174f).toString()); // @output 9.9E173

    io:println((.99e-174F).toString()); // @output 9.9E-175

    io:println((.99e+174d).toString()); // @output 9.9E+173

    io:println((.99e-174D).toString()); // @output 9.9E-175

    io:println((.99E+174f).toString()); // @output 9.9E173

    io:println((.99E-174F).toString()); // @output 9.9E-175

    io:println((.99E+174d).toString()); // @output 9.9E+173

    io:println((.99E-174D).toString()); // @output 9.9E-175
}

Test-Case: output
Description: Test DecimalFloatingPointNumber with toBalString().
Labels: FloatingPointTypeSuffix, value:toBalString

function init() {
    io:println((25).toBalString()); // @output 25

    io:println((25e174).toBalString()); // @output 2.5E175

    io:println((25E174).toBalString()); // @output 2.5E175


    io:println((25e+174).toBalString()); // @output 2.5E175

    io:println((25E-174).toBalString()); // @output 2.5E-173


    io:println((25e174f).toBalString()); // @output 2.5E175

    io:println((25e174F).toBalString()); // @output 2.5E175

    io:println((25e174d).toBalString()); // @output 2.5E+175d

    io:println((25e174D).toBalString()); // @output 2.5E+175d

    io:println((25e174f).toBalString()); // @output 2.5E175

    io:println((25e174F).toBalString()); // @output 2.5E175

    io:println((25e174d).toBalString()); // @output 2.5E+175d

    io:println((25e174D).toBalString()); // @output 2.5E+175d


    io:println((25e+174f).toBalString()); // @output 2.5E175

    io:println((25e-174F).toBalString()); // @output 2.5E-173

    io:println((25e+174d).toBalString()); // @output 2.5E+175d

    io:println((25e-174D).toBalString()); // @output 2.5E-173d

    io:println((25E+174f).toBalString()); // @output 2.5E175

    io:println((25E-174F).toBalString()); // @output 2.5E-173

    io:println((25E+174d).toBalString()); // @output 2.5E+175d

    io:println((25E-174D).toBalString()); // @output 2.5E-173d


    io:println((25f).toBalString()); // @output 25.0

    io:println((25F).toBalString()); // @output 25.0

    io:println((25d).toBalString()); // @output 25d

    io:println((25D).toBalString()); // @output 25d


    io:println((25.0).toBalString()); // @output 25.0

    io:println((245.32).toBalString()); // @output 245.32

    io:println((.99).toBalString()); // @output 0.99



    io:println((25.0e174).toBalString()); // @output 2.5E175

    io:println((25.0E174).toBalString()); // @output 2.5E175

    io:println((243.32e174).toBalString()); // @output 2.4332E176

    io:println((245.32E174).toBalString()); // @output 2.4532E176

    io:println((99e174).toBalString()); // @output 9.9E175

    io:println((.99E174).toBalString()); // @output 9.9E173


    io:println((25.0e+174).toBalString()); // @output 2.5E175

    io:println((25.0E-174).toBalString()); // @output 2.5E-173

    io:println((243.32e+174).toBalString()); // @output 2.4332E176

    io:println((245.32E-174).toBalString()); // @output 2.4532E-172

    io:println((.99e+174).toBalString()); // @output 9.9E173

    io:println((.99E-174).toBalString()); // @output 9.9E-175

    io:println((25.0f).toBalString()); // @output 25.0

    io:println((25.0F).toBalString()); // @output 25.0

    io:println((25.0d).toBalString()); // @output 25.0d

    io:println((25.0D).toBalString()); // @output 25.0d

    io:println((245.32f).toBalString()); // @output 245.32

    io:println((245.32F).toBalString()); // @output 245.32

    io:println((245.32d).toBalString()); // @output 245.32d

    io:println((245.32D).toBalString()); // @output 245.32d

    io:println((.99f).toBalString()); // @output 0.99

    io:println((.99F).toBalString()); // @output 0.99

    io:println((.99d).toBalString()); // @output 0.99d

    io:println((.99D).toBalString()); // @output 0.99d

    io:println((25.0e174f).toBalString()); // @output 2.5E175

    io:println((25.0e174F).toBalString()); // @output 2.5E175

    io:println((25.0e174d).toBalString()); // @output 2.50E+175d

    io:println((25.0e174D).toBalString()); // @output 2.50E+175d

    io:println((25.0E174f).toBalString()); // @output 2.5E175

    io:println((25.0E174F).toBalString()); // @output 2.5E175

    io:println((25.0E174d).toBalString()); // @output 2.50E+175d

    io:println((25.0E174D).toBalString()); // @output 2.50E+175d

    io:println((245.32e174f).toBalString()); // @output 2.4532E176

    io:println((245.32e174F).toBalString()); // @output 2.4532E176

    io:println((245.32e174d).toBalString()); // @output 2.4532E+176d

    io:println((245.32e174D).toBalString()); // @output 2.4532E+176d

    io:println((245.32E174F).toBalString()); // @output 2.4532E176

    io:println((245.32E174d).toBalString()); // @output 2.4532E+176d

    io:println((245.32E174D).toBalString()); // @output 2.4532E+176d

    io:println((.99e174f).toBalString()); // @output 9.9E173

    io:println((.99e174F).toBalString()); // @output 9.9E173

    io:println((.99e174d).toBalString()); // @output 9.9E+173d

    io:println((.99e174D).toBalString()); // @output 9.9E+173d

    io:println((.99E174f).toBalString()); // @output 9.9E173

    io:println((.99E174F).toBalString()); // @output 9.9E173

    io:println((.99E174d).toBalString()); // @output 9.9E+173d

    io:println((.99E174D).toBalString()); // @output 9.9E+173d

    io:println((25.0e+174f).toBalString()); // @output 2.5E175

    io:println((25.0e-174F).toBalString()); // @output 2.5E-173

    io:println((25.0e+174d).toBalString()); // @output 2.50E+175d

    io:println((25.0e-174D).toBalString()); // @output 2.50E-173d

    io:println((25.0E+174f).toBalString()); // @output 2.5E175

    io:println((25.0E-174F).toBalString()); // @output 2.5E-173

    io:println((25.0E+174d).toBalString()); // @output 2.50E+175d

    io:println((25.0E-174D).toBalString()); // @output 2.50E-173d

    io:println((245.32e+174f).toBalString()); // @output 2.4532E176

    io:println((245.32e-174F).toBalString()); // @output 2.4532E-172

    io:println((245.32e+174d).toBalString()); // @output 2.4532E+176d

    io:println((245.32e-174D).toBalString()); // @output 2.4532E-172d

    io:println((245.32E+174f).toBalString()); // @output 2.4532E176

    io:println((245.32E-174F).toBalString()); // @output 2.4532E-172

    io:println((245.32E+174d).toBalString()); // @output 2.4532E+176d

    io:println((245.32E-174D).toBalString()); // @output 2.4532E-172d

    io:println((.99e+174f).toBalString()); // @output 9.9E173

    io:println((.99e-174F).toBalString()); // @output 9.9E-175

    io:println((.99e+174d).toBalString()); // @output 9.9E+173d

    io:println((.99e-174D).toBalString()); // @output 9.9E-175d

    io:println((.99E+174f).toBalString()); // @output 9.9E173

    io:println((.99E-174F).toBalString()); // @output 9.9E-175

    io:println((.99E+174d).toBalString()); // @output 9.9E+173d

    io:println((.99E-174D).toBalString()); // @output 9.9E-175d


    io:println((25f).toBalString()); // @output 25.0

    io:println((25F).toBalString()); // @output 25.0

    io:println((25d).toBalString()); // @output 25d

    io:println((25D).toBalString()); // @output 25d
}

Test-Case: output
Description: Test DecimalFloatingPointNumber with toBalString() without parenthesis.
Labels: FloatingPointTypeSuffix, value:toBalString

function init() {

    io:println(25.toBalString()); // @output 25

    io:println(25e174.toBalString()); // @output 2.5E175

    io:println(25E174.toBalString()); // @output 2.5E175


    io:println(25e+174.toBalString()); // @output 2.5E175

    io:println(25E-174.toBalString()); // @output 2.5E-173


    io:println(25e174f.toBalString()); // @output 2.5E175

    io:println(25e174F.toBalString()); // @output 2.5E175

    io:println(25e174d.toBalString()); // @output 2.5E+175d

    io:println(25e174D.toBalString()); // @output 2.5E+175d

    io:println(25e174f.toBalString()); // @output 2.5E175

    io:println(25e174F.toBalString()); // @output 2.5E175

    io:println(25e174d.toBalString()); // @output 2.5E+175d

    io:println(25e174D.toBalString()); // @output 2.5E+175d


    io:println(25e+174f.toBalString()); // @output 2.5E175

    io:println(25e-174F.toBalString()); // @output 2.5E-173

    io:println(25e+174d.toBalString()); // @output 2.5E+175d

    io:println(25e-174D.toBalString()); // @output 2.5E-173d

    io:println(25E+174f.toBalString()); // @output 2.5E175

    io:println(25E-174F.toBalString()); // @output 2.5E-173

    io:println(25E+174d.toBalString()); // @output 2.5E+175d

    io:println(25E-174D.toBalString()); // @output 2.5E-173d


    io:println(245.32.toBalString()); // @output 245.32

    io:println(.99.toBalString()); // @output 0.99


    io:println(25.0e174.toBalString()); // @output 2.5E175

    io:println(25.0E174.toBalString()); // @output 2.5E175

    io:println(243.32e174.toBalString()); // @output 2.4332E176

    io:println(245.32E174.toBalString()); // @output 2.4532E176

    io:println(99e174.toBalString()); // @output 9.9E175

    io:println(.99E174.toBalString()); // @output 9.9E173


    io:println(25.0e+174.toBalString()); // @output 2.5E175

    io:println(25.0E-174.toBalString()); // @output 2.5E-173

    io:println(243.32e+174.toBalString()); // @output 2.4332E176

    io:println(245.32E-174.toBalString()); // @output 2.4532E-172

    io:println(.99e+174.toBalString()); // @output 9.9E173

    io:println(.99E-174.toBalString()); // @output 9.9E-175

    io:println(25.0f.toBalString()); // @output 25.0

    io:println(25.0F.toBalString()); // @output 25.0

    io:println(25.0d.toBalString()); // @output 25.0d

    io:println(25.0D.toBalString()); // @output 25.0d

    io:println(245.32f.toBalString()); // @output 245.32

    io:println(245.32F.toBalString()); // @output 245.32

    io:println(245.32d.toBalString()); // @output 245.32d

    io:println(245.32D.toBalString()); // @output 245.32d

    io:println(.99f.toBalString()); // @output 0.99

    io:println(.99F.toBalString()); // @output 0.99

    io:println(.99d.toBalString()); // @output 0.99d

    io:println(.99D.toBalString()); // @output 0.99d

    io:println(25.0e174f.toBalString()); // @output 2.5E175

    io:println(25.0e174F.toBalString()); // @output 2.5E175

    io:println(25.0e174d.toBalString()); // @output 2.50E+175d

    io:println(25.0e174D.toBalString()); // @output 2.50E+175d

    io:println(25.0E174f.toBalString()); // @output 2.5E175

    io:println(25.0E174F.toBalString()); // @output 2.5E175

    io:println(25.0E174d.toBalString()); // @output 2.50E+175d

    io:println(25.0E174D.toBalString()); // @output 2.50E+175d

    io:println(245.32e174f.toBalString()); // @output 2.4532E176

    io:println(245.32e174F.toBalString()); // @output 2.4532E176

    io:println(245.32e174d.toBalString()); // @output 2.4532E+176d

    io:println(245.32e174D.toBalString()); // @output 2.4532E+176d

    io:println(245.32E174F.toBalString()); // @output 2.4532E176

    io:println(245.32E174d.toBalString()); // @output 2.4532E+176d

    io:println(245.32E174D.toBalString()); // @output 2.4532E+176d

    io:println(.99e174f.toBalString()); // @output 9.9E173

    io:println(.99e174F.toBalString()); // @output 9.9E173

    io:println(.99e174d.toBalString()); // @output 9.9E+173d

    io:println(.99e174D.toBalString()); // @output 9.9E+173d

    io:println(.99E174f.toBalString()); // @output 9.9E173

    io:println(.99E174F.toBalString()); // @output 9.9E173

    io:println(.99E174d.toBalString()); // @output 9.9E+173d

    io:println(.99E174D.toBalString()); // @output 9.9E+173d

    io:println(25.0e+174f.toBalString()); // @output 2.5E175

    io:println(25.0e-174F.toBalString()); // @output 2.5E-173

    io:println(25.0e+174d.toBalString()); // @output 2.50E+175d

    io:println(25.0e-174D.toBalString()); // @output 2.50E-173d

    io:println(25.0E+174f.toBalString()); // @output 2.5E175

    io:println(25.0E-174F.toBalString()); // @output 2.5E-173

    io:println(25.0E+174d.toBalString()); // @output 2.50E+175d

    io:println(25.0E-174D.toBalString()); // @output 2.50E-173d

    io:println(245.32e+174f.toBalString()); // @output 2.4532E176

    io:println(245.32e-174F.toBalString()); // @output 2.4532E-172

    io:println(245.32e+174d.toBalString()); // @output 2.4532E+176d

    io:println(245.32e-174D.toBalString()); // @output 2.4532E-172d

    io:println(245.32E+174f.toBalString()); // @output 2.4532E176

    io:println(245.32E-174F.toBalString()); // @output 2.4532E-172

    io:println(245.32E+174d.toBalString()); // @output 2.4532E+176d

    io:println(245.32E-174D.toBalString()); // @output 2.4532E-172d

    io:println(.99e+174f.toBalString()); // @output 9.9E173

    io:println(.99e-174F.toBalString()); // @output 9.9E-175

    io:println(.99e+174d.toBalString()); // @output 9.9E+173d

    io:println(.99e-174D.toBalString()); // @output 9.9E-175d

    io:println(.99E+174f.toBalString()); // @output 9.9E173

    io:println(.99E-174F.toBalString()); // @output 9.9E-175

    io:println(.99E+174d.toBalString()); // @output 9.9E+173d

    io:println(.99E-174D.toBalString()); // @output 9.9E-175d

    io:println(25f.toBalString()); // @output 25.0

    io:println(25F.toBalString()); // @output 25.0

    io:println(25d.toBalString()); // @output 25d

    io:println(25D.toBalString()); // @output 25d

    io:println(25.toBalString()); // @output 25
}

Test-Case: output
Description: Test DecimalFloatingPointNumber with return statement using variable reference.
Labels: FloatingPointTypeSuffix, return-stmt, union-type

function init() {
    io:println(printFloatingPoint(25)); // @output 25.0

    io:println(printFloatingPoint(25e174)); // @output 2.5E175

    io:println(printFloatingPoint(25E174)); // @output 2.5E175


    io:println(printFloatingPoint(25e+174)); // @output 2.5E175

    io:println(printFloatingPoint(25E-174)); // @output 2.5E-173


    io:println(printFloatingPoint(25e174f)); // @output 2.5E175

    io:println(printFloatingPoint(25e174F)); // @output 2.5E175

    io:println(printFloatingPoint(25e174d)); // @output 2.5E+175

    io:println(printFloatingPoint(25e174D)); // @output 2.5E+175

    io:println(printFloatingPoint(25e174f)); // @output 2.5E175

    io:println(printFloatingPoint(25e174F)); // @output 2.5E175

    io:println(printFloatingPoint(25e174d)); // @output 2.5E+175

    io:println(printFloatingPoint(25e174D)); // @output 2.5E+175


    io:println(printFloatingPoint(25e+174f)); // @output 2.5E175

    io:println(printFloatingPoint(25e-174F)); // @output 2.5E-173

    io:println(printFloatingPoint(25e+174d)); // @output 2.5E+175

    io:println(printFloatingPoint(25e-174D)); // @output 2.5E-173

    io:println(printFloatingPoint(25E+174f)); // @output 2.5E175

    io:println(printFloatingPoint(25E-174F)); // @output 2.5E-173

    io:println(printFloatingPoint(25E+174d)); // @output 2.5E+175

    io:println(printFloatingPoint(25E-174D)); // @output 2.5E-173


    io:println(printFloatingPoint(25f)); // @output 25.0

    io:println(printFloatingPoint(25F)); // @output 25.0

    io:println(printFloatingPoint(25d)); // @output 25

    io:println(printFloatingPoint(25D)); // @output 25


    io:println(printFloatingPoint(25.0)); // @output 25.0

    io:println(printFloatingPoint(245.32)); // @output 245.32

    io:println(printFloatingPoint(.99)); // @output 0.99


    io:println(printFloatingPoint(25.0e174)); // @output 2.5E175

    io:println(printFloatingPoint(25.0E174)); // @output 2.5E175

    io:println(printFloatingPoint(243.32e174)); // @output 2.4332E176

    io:println(printFloatingPoint(245.32E174)); // @output 2.4532E176

    io:println(printFloatingPoint(99e174)); // @output 9.9E175

    io:println(printFloatingPoint(.99E174)); // @output 9.9E173


    io:println(printFloatingPoint(25.0e+174)); // @output 2.5E175

    io:println(printFloatingPoint(25.0E-174)); // @output 2.5E-173

    io:println(printFloatingPoint(243.32e+174)); // @output 2.4332E176

    io:println(printFloatingPoint(245.32E-174)); // @output 2.4532E-172

    io:println(printFloatingPoint(.99e+174)); // @output 9.9E173

    io:println(printFloatingPoint(.99E-174)); // @output 9.9E-175

    io:println(printFloatingPoint(25.0f)); // @output 25.0

    io:println(printFloatingPoint(25.0F)); // @output 25.0

    io:println(printFloatingPoint(25.0d)); // @output 25.0

    io:println(printFloatingPoint(25.0D)); // @output 25.0

    io:println(printFloatingPoint(245.32f)); // @output 245.32

    io:println(printFloatingPoint(245.32F)); // @output 245.32

    io:println(printFloatingPoint(245.32d)); // @output 245.32

    io:println(printFloatingPoint(245.32D)); // @output 245.32

    io:println(printFloatingPoint(.99f)); // @output 0.99

    io:println(printFloatingPoint(.99F)); // @output 0.99

    io:println(printFloatingPoint(.99d)); // @output 0.99

    io:println(printFloatingPoint(.99D)); // @output 0.99

    io:println(printFloatingPoint(25.0e174f)); // @output 2.5E175

    io:println(printFloatingPoint(25.0e174F)); // @output 2.5E175

    io:println(printFloatingPoint(25.0e174d)); // @output 2.50E+175

    io:println(printFloatingPoint(25.0e174D)); // @output 2.50E+175

    io:println(printFloatingPoint(25.0E174f)); // @output 2.5E175

    io:println(printFloatingPoint(25.0E174F)); // @output 2.5E175

    io:println(printFloatingPoint(25.0E174d)); // @output 2.50E+175

    io:println(printFloatingPoint(25.0E174D)); // @output 2.50E+175

    io:println(printFloatingPoint(245.32e174f)); // @output 2.4532E176

    io:println(printFloatingPoint(245.32e174F)); // @output 2.4532E176

    io:println(printFloatingPoint(245.32e174d)); // @output 2.4532E+176

    io:println(printFloatingPoint(245.32e174D)); // @output 2.4532E+176

    io:println(printFloatingPoint(245.32E174F)); // @output 2.4532E176

    io:println(printFloatingPoint(245.32E174d)); // @output 2.4532E+176

    io:println(printFloatingPoint(245.32E174D)); // @output 2.4532E+176

    io:println(printFloatingPoint(.99e174f)); // @output 9.9E173

    io:println(printFloatingPoint(.99e174F)); // @output 9.9E173

    io:println(printFloatingPoint(.99e174d)); // @output 9.9E+173

    io:println(printFloatingPoint(.99e174D)); // @output 9.9E+173

    io:println(printFloatingPoint(.99E174f)); // @output 9.9E173

    io:println(printFloatingPoint(.99E174F)); // @output 9.9E173

    io:println(printFloatingPoint(.99E174d)); // @output 9.9E+173

    io:println(printFloatingPoint(.99E174D)); // @output 9.9E+173

    io:println(printFloatingPoint(25.0e+174f)); // @output 2.5E175

    io:println(printFloatingPoint(25.0e-174F)); // @output 2.5E-173

    io:println(printFloatingPoint(25.0e+174d)); // @output 2.50E+175

    io:println(printFloatingPoint(25.0e-174D)); // @output 2.50E-173

    io:println(printFloatingPoint(25.0E+174f)); // @output 2.5E175

    io:println(printFloatingPoint(25.0E-174F)); // @output 2.5E-173

    io:println(printFloatingPoint(25.0E+174d)); // @output 2.50E+175

    io:println(printFloatingPoint(25.0E-174D)); // @output 2.50E-173

    io:println(printFloatingPoint(245.32e+174f)); // @output 2.4532E176

    io:println(printFloatingPoint(245.32e-174F)); // @output 2.4532E-172

    io:println(printFloatingPoint(245.32e+174d)); // @output 2.4532E+176

    io:println(printFloatingPoint(245.32e-174D)); // @output 2.4532E-172

    io:println(printFloatingPoint(245.32E+174f)); // @output 2.4532E176

    io:println(printFloatingPoint(245.32E-174F)); // @output 2.4532E-172

    io:println(printFloatingPoint(245.32E+174d)); // @output 2.4532E+176

    io:println(printFloatingPoint(245.32E-174D)); // @output 2.4532E-172

    io:println(printFloatingPoint(.99e+174f)); // @output 9.9E173

    io:println(printFloatingPoint(.99e-174F)); // @output 9.9E-175

    io:println(printFloatingPoint(.99e+174d)); // @output 9.9E+173

    io:println(printFloatingPoint(.99e-174D)); // @output 9.9E-175

    io:println(printFloatingPoint(.99E+174f)); // @output 9.9E173

    io:println(printFloatingPoint(.99E-174F)); // @output 9.9E-175

    io:println(printFloatingPoint(.99E+174d)); // @output 9.9E+173

    io:println(printFloatingPoint(.99E-174D)); // @output 9.9E-175


    io:println(printFloatingPoint(25f)); // @output 25.0

    io:println(printFloatingPoint(25F)); // @output 25.0

    io:println(printFloatingPoint(25d)); // @output 25

    io:println(printFloatingPoint(25D)); // @output 25
}

function printFloatingPoint(float|decimal x) returns float|decimal {
    return x;
}

Test-Case: output
Description: Test DecimalFloatingPointNumber with return statement.
Labels: FloatingPointTypeSuffix, return-stmt, union-type

function init() {
    io:println(printDecimalFloatingPoint1()); // @output 2.5E175

    io:println(printDecimalFloatingPoint2()); // @output 2.5E175

    io:println(printDecimalFloatingPoint3()); // @output 2.5E175

    io:println(printDecimalFloatingPoint4()); // @output 2.5E+175

    io:println(printDecimalFloatingPoint5()); // @output 2.5E-173

    io:println(printDecimalFloatingPoint6()); // @output 2.5E+175

    io:println(printDecimalFloatingPoint7()); // @output 25.0

    io:println(printDecimalFloatingPoint8()); // @output 25

    io:println(printDecimalFloatingPoint9()); // @output 25.0

    io:println(printDecimalFloatingPoint21()); // @output 245.32

    io:println(printDecimalFloatingPoint10()); // @output 0.99

    io:println(printDecimalFloatingPoint11()); // @output 2.5E175

    io:println(printDecimalFloatingPoint12()); // @output 2.4332E176

    io:println(printDecimalFloatingPoint13()); // @output 9.9E173

    io:println(printDecimalFloatingPoint14()); // @output 2.5E-173

    io:println(printDecimalFloatingPoint16()); // @output 2.4332E176

    io:println(printDecimalFloatingPoint15()); // @output 9.9E-175

    io:println(printDecimalFloatingPoint17()); // @output 25.0

    io:println(printDecimalFloatingPoint18()); // @output 25.0

    io:println(printDecimalFloatingPoint19()); // @output 245.32

    io:println(printDecimalFloatingPoint20()); // @output 245.32

    io:println(printDecimalFloatingPoint23()); // @output 0.99

    io:println(printDecimalFloatingPoint22()); // @output 0.99

    io:println(printDecimalFloatingPoint24()); // @output 2.5E175

    io:println(printDecimalFloatingPoint25()); // @output 2.50E+175

    io:println(printDecimalFloatingPoint27()); // @output 2.4532E176

    io:println(printDecimalFloatingPoint26()); // @output 2.4532E+176

    io:println(printDecimalFloatingPoint29()); // @output 9.9E173

    io:println(printDecimalFloatingPoint28()); // @output 9.9E+173

    io:println(printDecimalFloatingPoint30()); // @output 2.5E175

    io:println(printDecimalFloatingPoint31()); // @output 2.50E-173

    io:println(printDecimalFloatingPoint33()); // @output 2.4532E+176

    io:println(printDecimalFloatingPoint32()); // @output 2.4532E176

    io:println(printDecimalFloatingPoint34()); // @output 9.9E+173

    io:println(printDecimalFloatingPoint35()); // @output 9.9E-175

    io:println(printDecimalFloatingPoint36()); // @output 25.0

}

function printDecimalFloatingPoint1() returns float|decimal {
    return 25e174;
}

function printDecimalFloatingPoint2() returns float|decimal {
    return 25e+174;
}

function printDecimalFloatingPoint3() returns float|decimal {
    return 25e174f;
}

function printDecimalFloatingPoint4() returns float|decimal {
    return 25e174D;
}

function printDecimalFloatingPoint5() returns float|decimal {
    return 25e-174F;
}

function printDecimalFloatingPoint6() returns float|decimal {
    return 25E+174d;
}

function printDecimalFloatingPoint7() returns float|decimal {
    return 25F;
}

function printDecimalFloatingPoint8() returns float|decimal {
    return 25d;
}

function printDecimalFloatingPoint9() returns float|decimal {
    return 25.0;
}

function printDecimalFloatingPoint21() returns float|decimal {
    return 245.32;
}

function printDecimalFloatingPoint10() returns float|decimal {
    return .99;
}

function printDecimalFloatingPoint11() returns float|decimal {
    return 25.0E174;
}

function printDecimalFloatingPoint12() returns float|decimal {
    return 243.32e174;
}

function printDecimalFloatingPoint13() returns float|decimal {
    return .99E174;
}

function printDecimalFloatingPoint14() returns float|decimal {
    return 25.0E-174;
}

function printDecimalFloatingPoint15() returns float|decimal {
    return .99E-174;
}

function printDecimalFloatingPoint16() returns float|decimal {
    return 243.32e+174;
}

function printDecimalFloatingPoint17() returns float|decimal {
    return 25.0f;
}

function printDecimalFloatingPoint18() returns float|decimal {
    return 25.0D;
}

function printDecimalFloatingPoint19() returns float|decimal {
    return 245.32F;
}

function printDecimalFloatingPoint20() returns float|decimal {
    return 245.32d;
}

function printDecimalFloatingPoint22() returns float|decimal {
    return .99d;
}

function printDecimalFloatingPoint23() returns float|decimal {
    return .99f;
}

function printDecimalFloatingPoint24() returns float|decimal {
    return 25.0e174F;
}

function printDecimalFloatingPoint25() returns float|decimal {
    return 25.0e174d;
}

function printDecimalFloatingPoint26() returns float|decimal {
    return 245.32E174d;
}

function printDecimalFloatingPoint27() returns float|decimal {
    return 245.32E174F;
}

function printDecimalFloatingPoint28() returns float|decimal {
    return .99E174d;
}

function printDecimalFloatingPoint29() returns float|decimal {
    return .99E174f;
}

function printDecimalFloatingPoint30() returns float|decimal {
    return 25.0e+174f;
}

function printDecimalFloatingPoint31() returns float|decimal {
    return 25.0e-174D;
}

function printDecimalFloatingPoint32() returns float|decimal {
    return 245.32E+174f;
}

function printDecimalFloatingPoint33() returns float|decimal {
    return 245.32e+174d;
}

function printDecimalFloatingPoint34() returns float|decimal {
    return .99e+174d;
}

function printDecimalFloatingPoint35() returns float|decimal {
    return .99E-174F;
}

function printDecimalFloatingPoint36() returns float|decimal {
    return 25;
}

Test-Case: output
Description: Test DecimalFloatingPointNumber with equality.
Labels: equality, FloatingPointTypeSuffix, union-type

function init() {
    returnEquality(+0, -0);  // @output true
                             // @output false

    returnEquality(+0.0, -0.0);  // @output true
                                 // @output false

    returnEquality(+0d, -0d);  // @output true
                               // @output false

    returnEquality(+0f, -0F);  // @output true
                               // @output false

    returnEquality(1.24e3, 12.40e2);  // @output true
                                      // @output false

    returnEquality(1.24e3d, 12.40e2d); // @output true
                                       // @output false

    returnEquality(25e174, 25E174);  // @output true
                                     // @output false

    returnEquality(25e+174, 25E-174);  // @output false
                                       // @output true

    returnEquality(25e+174, 25E+174);  // @output true
                                       // @output false

    returnEquality(25e174f, 25e174F);  // @output true
                                       // @output false

    returnEquality(25e174d, 25e174D);  // @output true
                                       // @output false

    returnEquality(25E174f, 25E174F);  // @output true
                                       // @output false

    returnEquality(25E174d, 25E174D);  // @output true
                                       // @output false

    returnEquality(25e174d, 25e174f);  // @output false
                                       // @output true

    returnEquality(25E174D, 25E174F);  // @output false
                                       // @output true

    returnEquality(25e+174f, 25e-174F);  // @output false
                                         // @output true

    returnEquality(25e-174f, 25e-174F);  // @output true
                                         // @output false

    returnEquality(25e+174d, 25e-174D);  // @output false
                                         // @output true

    returnEquality(25e+174f, 25e+174D);  // @output false
                                         // @output true

    returnEquality(25e+174F, 25e+174d);  // @output false
                                         // @output true

    returnEquality(25E+174f, 25E-174F);  // @output false
                                         // @output true

    returnEquality(25E+174d, 25E-174D);  // @output false
                                         // @output true

    returnEquality(25E-174D, 25E-174F);  // @output false
                                         // @output true

    returnEquality(.99, 0.99);  // @output true
                                // @output false

    returnEquality(25.0e174, 25.0E174);  // @output true
                                         // @output false

    returnEquality(243.32e174, 245.32E174);  // @output false
                                             // @output true

    returnEquality(99e174, .99E174);  // @output false
                                      // @output true

    returnEquality(25.0e+174, 25.0E-174);  // @output false
                                           // @output true

    returnEquality(243.32e+174, 245.32E-174);  // @output false
                                               // @output true

    returnEquality(.99e+174, .99E-174);  // @output false
                                         // @output true

    returnEquality(25.0f, 25.0F);  // @output true
                                   // @output false

    returnEquality(25.0d, 25.0D);  // @output true
                                   // @output false

    returnEquality(245.32f, 245.32F);  // @output true
                                       // @output false

    returnEquality(245.32d, 245.32D);  // @output true
                                       // @output false

    returnEquality(.99f, .99F);  // @output true
                                 // @output false

    returnEquality(.99d, .99D);  // @output true
                                 // @output false

    returnEquality(.99d, .99F);  // @output false
                                 // @output true

    returnEquality(25.0e174f, 25.0e174F);  // @output true
                                           // @output false

    returnEquality(25.0e1742d, 25.0e1742D);  // @output true
                                             // @output false

    returnEquality(25.0E174f, 25.0E174F);  // @output true
                                           // @output false

    returnEquality(25.0E1742d, 25.0E1742D);  // @output true
                                             // @output false

    returnEquality(245.32e174f, 245.32e174F);  // @output true
                                               // @output false

    returnEquality(245.32e1742d, 245.32e1742D);  // @output true
                                                 // @output false

    returnEquality(245.32E174f, 245.32E174F);  // @output true
                                               // @output false

    returnEquality(245.32E1742d, 245.32E1742D);  // @output true
                                                 // @output false

    returnEquality(.99e174f, .99e174F);  // @output true
                                         // @output false

    returnEquality(.99e1742d, .99e1742D);  // @output true
                                           // @output false

    returnEquality(.99E174f, .99E174F);  // @output true
                                         // @output false

    returnEquality(.99E1742d, .99E1742D);  // @output true
                                           // @output false

    returnEquality(.99E174f, .99E174D);  // @output false
                                         // @output true

    returnEquality(245.32E174d, 245.32E174F);  // @output false
                                               // @output true

    returnEquality(25.0e174d, 25.0e174f);  // @output false
                                           // @output true

    returnEquality(25.0e+174f, 25.0e-174F);  // @output false
                                             // @output true

    returnEquality(25.0e+1742d, 25.0e-1742D);  // @output false
                                               // @output true

    returnEquality(25.0E+174f, 25.0E-174F);  // @output false
                                             // @output true

    returnEquality(25.0E+1742d, 25.0E-1742D);  // @output false
                                               // @output true

    returnEquality(245.32e+174f, 245.32e-174F);  // @output false
                                                 // @output true

    returnEquality(245.32e+1742d, 245.32e-1742D);  // @output false
                                                   // @output true

    returnEquality(245.32E+174f, 245.32E-174F);  // @output false
                                                 // @output true

    returnEquality(245.32E+1742d, 245.32E-1742D);  // @output false
                                                   // @output true

    returnEquality(.99e+174f, .99e-174F);  // @output false
                                           // @output true

    returnEquality(.99e+1742d, .99e-1742D);  // @output false
                                             // @output true

    returnEquality(.99E+174f, .99E-174F);  // @output false
                                           // @output true

    returnEquality(.99E+1742d, .99E-1742D);  // @output false
                                             // @output true

    returnEquality(.99E-1742D, .99e-1742d);  // @output true
                                             // @output false

    returnEquality(245.32e+174F, 245.32E+174f);  // @output true
                                                 // @output false

    returnEquality(25.0e-174F, 25.0E-174f);  // @output true
                                             // @output false

    returnEquality(25f, 25F);  // @output true
                               // @output false

    returnEquality(25d, 25D);  // @output true
                               // @output false

    returnEquality(25D, 25f);  // @output false
                               // @output true
}

function returnEquality(float|decimal x, float|decimal y) {
    io:println(x == y);
    io:println(x != y);
}

Test-Case: output
Description: Test HexFloatingPointLiteral and DecimalFloatingPointNumber with equality.
Labels: equality, FloatingPointTypeSuffix, HexFloatingPointLiteral, union-type

function init() {
    returnEquality(0x3eA3p34, 2.7547920236544E14);  // @output true
                                                    // @output false

    returnEquality(0X3eA3p34, 2.7547920236544E17);  // @output false
                                                    // @output true

    returnEquality(2.7547920236544E14, 0x3eA3p+34);  // @output true
                                                      // @output false

    returnEquality(2.7547920236544E14D, 0x3eA3p+34);  // @output false
                                                      // @output true

    returnEquality(16035.307403564453, 0x3eA3.4Eb2);  // @output true
                                                      // @output false

    returnEquality(0X.4Eb2, 0.307403564453125);  // @output true
                                                 // @output false

    returnEquality(0X.4Eb2, 0.307403564453125d);  // @output false
                                                  // @output true

    returnEquality(5.6419222224581427E17, 0x3eA3.4Eb2p45);  // @output true
                                                            // @output false

    returnEquality(0X.4Eb2p45, 1.0815801393152E13);  // @output true
                                                     // @output false

    returnEquality(5.6419222224581427E17, 0x3eA3.4Eb2p+45);  // @output true
                                                             // @output false

    returnEquality(5.6419222224581427E17F, 0x3eA3.4Eb2p+45);  // @output true
                                                              // @output false

    returnEquality(0X.4Eb2p+45, 1.0815801393152E13);  // @output true
                                                      // @output false

    returnEquality(25.0E+15, 0x58d15e17628000);  // @output true
                                                 // @output false

    returnEquality(245.32e+17f, 0x1.54732c061de2p+16);  // @output false
                                                        // @output true

    returnEquality(.99e-17D, 0x0.00000000000000b69f6e);  // @output false
                                                         // @output true
}

function returnEquality(float|decimal x, float|decimal y) {
    io:println(x == y);
    io:println(x != y);
}

Test-Case: error
Description: Test too large int-literal with floating point type descriptor.
Labels: decimal, DecimalNumber, float, HexIntLiteral, int, union-type

function errorFunction() {
    float|decimal _ = 0x154732c061de20000; //  @error out of range for 'float'
    float|decimal _ = 100922337203685477580810092233720368547755367487854876578948757848887848758740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000; //  @error out of range for 'float'
}

Test-Case: output
Description: Test the basic type of DecimalFloatingPointNumber.
Labels: any, decimal, float, FloatingPointTypeSuffix, int, is-expr, union-type

function init() {
    isCheck(25e174); // @output false
                     // @output true
                     // @output false
                     // @output true

    isCheck(25e+174); // @output false
                      // @output true
                      // @output false
                      // @output true

    isCheck(0.0f); // @output false
                   // @output true
                   // @output false
                   // @output true

    isCheck(6f); // @output false
                 // @output true
                 // @output false
                 // @output true

    isCheck(6d); // @output false
                 // @output false
                 // @output true
                 // @output true

    isCheck(25e174F); // @output false
                      // @output true
                      // @output false
                      // @output true

    isCheck(25e1742d); // @output false
                       // @output false
                       // @output true
                       // @output true

    isCheck(25e+174f); // @output false
                       // @output true
                       // @output false
                       // @output true

    isCheck(25E-1742D); // @output false
                        // @output false
                        // @output true
                        // @output true

    isCheck(25.0); // @output false
                   // @output true
                   // @output false
                   // @output true

    isCheck(245.32); // @output false
                     // @output true
                     // @output false
                     // @output true

    isCheck(.99); // @output false
                  // @output true
                  // @output false
                  // @output true

    isCheck(25.0e174); // @output false
                       // @output true
                       // @output false
                       // @output true

    isCheck(245.32E174); // @output false
                         // @output true
                         // @output false
                         // @output true

    isCheck(.99E174); // @output false
                      // @output true
                      // @output false
                      // @output true

    isCheck(25.0E-174); // @output false
                        // @output true
                        // @output false
                        // @output true

    isCheck(243.32e+174); // @output false
                          // @output true
                          // @output false
                          // @output true

    isCheck(.99E-174); // @output false
                       // @output true
                       // @output false
                       // @output true

    isCheck(25.0f); // @output false
                    // @output true
                    // @output false
                    // @output true

    isCheck(25.0D); // @output false
                    // @output false
                    // @output true
                    // @output true

    isCheck(245.32F); // @output false
                      // @output true
                      // @output false
                      // @output true

    isCheck(245.32d); // @output false
                      // @output false
                      // @output true
                      // @output true

    isCheck(.99f); // @output false
                   // @output true
                   // @output false
                   // @output true

    isCheck(.99D); // @output false
                   // @output false
                   // @output true
                   // @output true

    isCheck(25.0e174f); // @output false
                        // @output true
                        // @output false
                        // @output true

    isCheck(25.0E1742D); // @output false
                         // @output false
                         // @output true
                         // @output true

    isCheck(245.32E174F); // @output false
                          // @output true
                          // @output false
                          // @output true

    isCheck(245.32e1742d); // @output false
                           // @output false
                           // @output true
                           // @output true

    isCheck(.99e174F); // @output false
                       // @output true
                       // @output false
                       // @output true

    isCheck(.99e1742D); // @output false
                        // @output false
                        // @output true
                        // @output true

    isCheck(25.0e+174f); // @output false
                         // @output true
                         // @output false
                         // @output true

    isCheck(25.0e-1742D); // @output false
                          // @output false
                          // @output true
                          // @output true

    isCheck(245.32E-174F); // @output false
                           // @output true
                           // @output false
                           // @output true

    isCheck(245.32E+1742d); // @output false
                            // @output false
                            // @output true
                            // @output true

    isCheck(.99e+174f); // @output false
                        // @output true
                        // @output false
                        // @output true

    isCheck(.99E-1742D); // @output false
                         // @output false
                         // @output true
                         // @output true

    isCheck(1E-6176d); // @output false
                       // @output false
                       // @output true
                       // @output true

    isCheck(9.99E+6111D); // @output false
                          // @output false
                          // @output true
                          // @output true
}

function isCheck(any x) {
    io:println(x is int);
    io:println(x is float);
    io:println(x is decimal);
    io:println(x is decimal|float);
}

Test-Case: error
Description: Test the basic type when the floating point literal includes a FloatTypeSuffix.
Labels: decimal, FloatingPointTypeSuffix, int

function errorFunction() {
    int _ = 25f; // @error expected an 'int' but found a 'float'
    int _ = 25F; // @error expected an 'int' but found a 'float'
    decimal _ = .99E-174F; // @error expected a 'decimal' but found a 'float'
    decimal _  = 245.32E-174F; // @error expected a 'decimal' but found a 'float'
    decimal _  = 25.0E+174f; // @error expected a 'decimal' but found a 'float'
    decimal _  = .99E174F; // @error expected a 'decimal' but found a 'float'
    decimal _  = 245.32E174F; // @error expected a 'decimal' but found a 'float'
    decimal _  = 25.0E174f; // @error expected a 'decimal' but found a 'float'
    decimal _  = .99f; // @error expected a 'decimal' but found a 'float'
    decimal _  = 245.32F; // @error expected a 'decimal' but found a 'float'
    decimal _  = 25.0f; // @error expected a 'decimal' but found a 'float'
    decimal _  = 25E-174F; // @error expected a 'decimal' but found a 'float'
    decimal _  = 25E174f; // @error expected a 'decimal' but found a 'float'
}

Test-Case: error
Description: Test the basic type when the floating point literal includes a DecimalTypeSuffix.
Labels: float, FloatingPointTypeSuffix, int

function errorFunction() {
    int _ = 25d; // @error expected an 'int' but found a 'decimal'
    int _ = 25D; // @error expected an 'int' but found a 'decimal'
    float _ = .99E-1742D; // @error expected a 'float' but found a 'decimal'
    float _ = 245.32E-1742D; // @error expected a 'float' but found a 'decimal'
    float _ = 25.0E+1742d; // @error expected a 'float' but found a 'decimal'
    float _ = .99E1742D; // @error expected a 'float' but found a 'decimal'
    float _ = 245.32E1742D; // @error expected a 'float' but found a 'decimal'
    float _ = 25.0E1742d; // @error expected a 'float' but found a 'decimal'
    float _ = .99d; // @error expected a 'float' but found a 'decimal'
    float _ = 245.32D; // @error expected a 'float' but found a 'decimal'
    float _ = 25.0d; // @error expected a 'float' but found a 'decimal'
    float _ = 25E-1742D; // @error expected a 'float' but found a 'decimal'
    float _ = 25E1742d; // @error expected a 'float' but found a 'decimal'
}

Test-Case: output
Description: Test if +0 and -0 can be distinguished.
Labels: decimal, float, is-expr

function init() {
    io:println(+0 is -0); // @output true
    io:println(+0 == -0); // @output true
    io:println(+0 != -0); // @output false
    io:println(+0f is -0f); // @output true
    io:println(+0f == -0f); // @output true
    io:println(+0f != -0f); // @output false
    io:println(+0d is -0d); // @output true
    io:println(+0d == -0d); // @output true
    io:println(+0d != -0d); // @output false
}

Test-Case: output
Description: Test DecimalFloatingPointNumber without decimal point with valid type cast to integer type.
Labels: FloatingPointTypeSuffix, int, type-cast-expr

function init() {

    io:println(<int> 25e8); // @output 2500000000

    io:println(<int> 25E8); // @output 2500000000

    io:println(<int> 25e+8); // @output 2500000000

    io:println(<int> 25E-8); // @output 0

    io:println(<int> 25e8f); // @output 2500000000

    io:println(<int> 25e8F); // @output 2500000000

    io:println(<int> 25e8d); // @output 2500000000

    io:println(<int> 25e8D); // @output 2500000000

    io:println(<int> 25e8f); // @output 2500000000

    io:println(<int> 25e8F); // @output 2500000000

    io:println(<int> 25e8d); // @output 2500000000

    io:println(<int> 25e8D); // @output 2500000000

    io:println(<int> 25e+8f); // @output 2500000000

    io:println(<int> 25e-8F); // @output 0

    io:println(<int> 25e+8d); // @output 2500000000

    io:println(<int> 25e-8D); // @output 0

    io:println(<int> 25E+8f); // @output 2500000000

    io:println(<int> 25E-8F); // @output 0

    io:println(<int> 25E+8d); // @output 2500000000

    io:println(<int> 25E-8D); // @output 0

    io:println(<int> 25f); // @output 25

    io:println(<int> 25F); // @output 25

    io:println(<int> 25d); // @output 25

    io:println(<int> 25D); // @output 25

    io:println(<int> 25f); // @output 25

    io:println(<int> 25F); // @output 25

    io:println(<int> 25d); // @output 25

    io:println(<int> 25D); // @output 25
}

Test-Case: output
Description: Test DecimalFloatingPointNumber that has decimal point with valid type cast to integer type.
Labels: FloatingPointTypeSuffix, int, type-cast-expr

function init() {
    io:println(<int> .99); // @output 1

    io:println(<int> 25.0e8); // @output 2500000000

    io:println(<int> 25.0E8); // @output 2500000000

    io:println(<int> 243.32e8); // @output 24332000000

    io:println(<int> 245.32E8); // @output 24532000000

    io:println(<int> .99e8); // @output 99000000

    io:println(<int> .99E8); // @output 99000000

    io:println(<int> 25.0e+8); // @output 2500000000

    io:println(<int> 25.0E-8); // @output 0

    io:println(<int> 243.32e+8); // @output 24332000000

    io:println(<int> 245.32E-8); // @output 0

    io:println(<int> .99e+8); // @output 99000000

    io:println(<int> .99E-8); // @output 0

    io:println(<int> 25.0f); // @output 25

    io:println(<int> 25.0F); // @output 25

    io:println(<int> 25.0d); // @output 25

    io:println(<int> 25.0D); // @output 25

    io:println(<int> 245.32f); // @output 245

    io:println(<int> 245.32F); // @output 245

    io:println(<int> 245.32d); // @output 245

    io:println(<int> 245.32D); // @output 245

    io:println(<int> .99f); // @output 1

    io:println(<int> .99F); // @output 1

    io:println(<int> .99d); // @output 1

    io:println(<int> .99D); // @output 1

    io:println(<int> 25.0e8f); // @output 2500000000

    io:println(<int> 25.0e8F); // @output 2500000000

    io:println(<int> 25.0e8d); // @output 2500000000

    io:println(<int> 25.0e8D); // @output 2500000000

    io:println(<int> 25.0E8f); // @output 2500000000

    io:println(<int> 25.0E8F); // @output 2500000000

    io:println(<int> 25.0E8d); // @output 2500000000

    io:println(<int> 25.0E8D); // @output 2500000000

    io:println(<int> 245.32e8f); // @output 24532000000

    io:println(<int> 245.32e8F); // @output 24532000000

    io:println(<int> 245.32e8d); // @output 24532000000

    io:println(<int> 245.32e8D); // @output 24532000000

    io:println(<int> 245.32E8F); // @output 24532000000

    io:println(<int> 245.32E8d); // @output 24532000000

    io:println(<int> 245.32E8D); // @output 24532000000

    io:println(<int> .99e8f); // @output 99000000

    io:println(<int> .99e8F); // @output 99000000

    io:println(<int> .99e8d); // @output 99000000

    io:println(<int> .99e8D); // @output 99000000

    io:println(<int> .99E8f); // @output 99000000

    io:println(<int> .99E8F); // @output 99000000

    io:println(<int> .99E8d); // @output 99000000

    io:println(<int> .99E8D); // @output 99000000

    io:println(<int> 25.0e+8f); // @output 2500000000

    io:println(<int> 25.0e-8F); // @output 0

    io:println(<int> 25.0e+8d); // @output 2500000000

    io:println(<int> 25.0e-8D); // @output 0

    io:println(<int> 25.0E+8f); // @output 2500000000

    io:println(<int> 25.0E-8F); // @output 0

    io:println(<int> 25.0E+8d); // @output 2500000000

    io:println(<int> 25.0E-8D); // @output 0

    io:println(<int> 245.32e+8f); // @output 24532000000

    io:println(<int> 245.32e-8F); // @output 0

    io:println(<int> 245.32e+8d); // @output 24532000000

    io:println(<int> 245.32e-8D); // @output 0

    io:println(<int> 245.32E+8f); // @output 24532000000

    io:println(<int> 245.32E-8F); // @output 0

    io:println(<int> 245.32E+8d); // @output 24532000000

    io:println(<int> 245.32E-8D); // @output 0

    io:println(<int> .99e+8f); // @output 99000000

    io:println(<int> .99e-8F); // @output 0

    io:println(<int> .99e+8d); // @output 99000000

    io:println(<int> .99e-8D); // @output 0

    io:println(<int> .99E+8f); // @output 99000000

    io:println(<int> .99E-8F); // @output 0

    io:println(<int> .99E+8d); // @output 99000000

    io:println(<int> .99E-8D); // @output 0

    io:println(<int> 25.0); // @output 25

    io:println(<int> 245.32); // @output 245
}

Test-Case: output
Description: Test DecimalFloatingPointNumber without decimal point with valid type cast to float type.
Labels: float, FloatingPointTypeSuffix, type-cast-expr

function init() {
    io:println(<float> 25e174); // @output 2.5E175

    io:println(<float> 25E174); // @output 2.5E175

    io:println(<float> 25e+174); // @output 2.5E175

    io:println(<float> 25E-174); // @output 2.5E-173

    io:println(<float> 25e174f); // @output 2.5E175

    io:println(<float> 25e174F); // @output 2.5E175

    io:println(<float> 25e174d); // @output 2.5E175

    io:println(<float> 25e174D); // @output 2.5E175

    io:println(<float> 25e174f); // @output 2.5E175

    io:println(<float> 25e174F); // @output 2.5E175

    io:println(<float> 25e174d); // @output 2.5E175

    io:println(<float> 25e174D); // @output 2.5E175

    io:println(<float> 25e+174f); // @output 2.5E175

    io:println(<float> 25e-174F); // @output 2.5E-173

    io:println(<float> 25e+174d); // @output 2.5E175

    io:println(<float> 25e-174D); // @output 2.5E-173

    io:println(<float> 25E+174f); // @output 2.5E175

    io:println(<float> 25E-174F); // @output 2.5E-173

    io:println(<float> 25E+174d); // @output 2.5E175

    io:println(<float> 25E-174D); // @output 2.5E-173

    io:println(<float> 25f); // @output 25.0

    io:println(<float> 25F); // @output 25.0

    io:println(<float> 25d); // @output 25.0

    io:println(<float> 25D); // @output 25.0

    io:println(<float> 99e174); // @output 9.9E175

    io:println(<float> 25f); // @output 25.0

    io:println(<float> 25F); // @output 25.0

    io:println(<float> 25d); // @output 25.0

    io:println(<float> 25D); // @output 25.0

    io:println(<float> 1E-6176d); // @output 0.0
}

Test-Case: output
Description: Test DecimalFloatingPointNumber that has decimal point with valid type cast to float type.
Labels: float, FloatingPointTypeSuffix, type-cast-expr

function init() {
    io:println(<float> 25.0); // @output 25.0

    io:println(<float> 245.32); // @output 245.32

    io:println(<float> .99); // @output 0.99

    io:println(<float> 25.0e174); // @output 2.5E175

    io:println(<float> 25.0E174); // @output 2.5E175

    io:println(<float> 243.32e174); // @output 2.4332E176

    io:println(<float> 245.32E174); // @output 2.4532E176

    io:println(<float> .99E174); // @output 9.9E173

    io:println(<float> 25.0e+174); // @output 2.5E175

    io:println(<float> 25.0E-174); // @output 2.5E-173

    io:println(<float> 243.32e+174); // @output 2.4332E176

    io:println(<float> 245.32E-174); // @output 2.4532E-172

    io:println(<float> .99e+174); // @output 9.9E173

    io:println(<float> .99E-174); // @output 9.9E-175

    io:println(<float> 25.0f); // @output 25.0

    io:println(<float> 25.0F); // @output 25.0

    io:println(<float> 25.0d); // @output 25.0

    io:println(<float> 25.0D); // @output 25.0

    io:println(<float> 245.32f); // @output 245.32

    io:println(<float> 245.32F); // @output 245.32

    io:println(<float> 245.32d); // @output 245.32

    io:println(<float> 245.32D); // @output 245.32

    io:println(<float> .99f); // @output 0.99

    io:println(<float> .99F); // @output 0.99

    io:println(<float> .99d); // @output 0.99

    io:println(<float> .99D); // @output 0.99

    io:println(<float> 25.0e174f); // @output 2.5E175

    io:println(<float> 25.0e174F); // @output 2.5E175

    io:println(<float> 25.0e174d); // @output 2.5E175

    io:println(<float> 25.0e174D); // @output 2.5E175

    io:println(<float> 25.0E174f); // @output 2.5E175

    io:println(<float> 25.0E174F); // @output 2.5E175

    io:println(<float> 25.0E174d); // @output 2.5E175

    io:println(<float> 25.0E174D); // @output 2.5E175

    io:println(<float> 245.32e174f); // @output 2.4532E176

    io:println(<float> 245.32e174F); // @output 2.4532E176

    io:println(<float> 245.32e174d); // @output 2.4532E176

    io:println(<float> 245.32e174D); // @output 2.4532E176

    io:println(<float> 245.32E174F); // @output 2.4532E176

    io:println(<float> 245.32E174d); // @output 2.4532E176

    io:println(<float> 245.32E174D); // @output 2.4532E176

    io:println(<float> .99e174f); // @output 9.9E173

    io:println(<float> .99e174F); // @output 9.9E173

    io:println(<float> .99e174d); // @output 9.9E173

    io:println(<float> .99e174D); // @output 9.9E173

    io:println(<float> .99E174f); // @output 9.9E173

    io:println(<float> .99E174F); // @output 9.9E173

    io:println(<float> .99E174d); // @output 9.9E173

    io:println(<float> .99E174D); // @output 9.9E173

    io:println(<float> 25.0e+174f); // @output 2.5E175

    io:println(<float> 25.0e-174F); // @output 2.5E-173

    io:println(<float> 25.0e+174d); // @output 2.5E175

    io:println(<float> 25.0e-174D); // @output 2.5E-173

    io:println(<float> 25.0E+174f); // @output 2.5E175

    io:println(<float> 25.0E-174F); // @output 2.5E-173

    io:println(<float> 25.0E+174d); // @output 2.5E175

    io:println(<float> 25.0E-174D); // @output 2.5E-173

    io:println(<float> 245.32e+174f); // @output 2.4532E176

    io:println(<float> 245.32e-174F); // @output 2.4532E-172

    io:println(<float> 245.32e+174d); // @output 2.4532E176

    io:println(<float> 245.32e-174D); // @output 2.4532E-172

    io:println(<float> 245.32E+174f); // @output 2.4532E176

    io:println(<float> 245.32E-174F); // @output 2.4532E-172

    io:println(<float> 245.32E+174d); // @output 2.4532E176

    io:println(<float> 245.32E-174D); // @output 2.4532E-172

    io:println(<float> .99e+174f); // @output 9.9E173

    io:println(<float> .99e-174F); // @output 9.9E-175

    io:println(<float> .99e+174d); // @output 9.9E173

    io:println(<float> .99e-174D); // @output 9.9E-175

    io:println(<float> .99E+174f); // @output 9.9E173

    io:println(<float> .99E-174F); // @output 9.9E-175

    io:println(<float> .99E+174d); // @output 9.9E173

    io:println(<float> .99E-174D); // @output 9.9E-175
}

Test-Case: output
Description: Test DecimalFloatingPointNumber without decimal point with valid type cast to decimal type.
Labels: decimal, FloatingPointTypeSuffix, type-cast-expr

function init() {
    io:println(<decimal> 25e174); // @output 2.5E+175

    io:println(<decimal> 25E174); // @output 2.5E+175

    io:println(<decimal> 25e+174); // @output 2.5E+175

    io:println(<decimal> 25E-174); // @output 2.5E-173

    io:println(<decimal> 25e174f); // @output 2.5E+175

    io:println(<decimal> 25e174F); // @output 2.5E+175

    io:println(<decimal> 25e174d); // @output 2.5E+175

    io:println(<decimal> 25e174D); // @output 2.5E+175

    io:println(<decimal> 25e174f); // @output 2.5E+175

    io:println(<decimal> 25e174F); // @output 2.5E+175

    io:println(<decimal> 25e174d); // @output 2.5E+175

    io:println(<decimal> 25e174D); // @output 2.5E+175

    io:println(<decimal> 25e+174f); // @output 2.5E+175

    io:println(<decimal> 25e-174F); // @output 2.5E-173

    io:println(<decimal> 25e+174d); // @output 2.5E+175

    io:println(<decimal> 25e-174D); // @output 2.5E-173

    io:println(<decimal> 25E+174f); // @output 2.5E+175

    io:println(<decimal> 25E-174F); // @output 2.5E-173

    io:println(<decimal> 25E+174d); // @output 2.5E+175

    io:println(<decimal> 25E-174D); // @output 2.5E-173

    io:println(<decimal> 25f); // @output 25.0

    io:println(<decimal> 25F); // @output 25.0

    io:println(<decimal> 25d); // @output 25

    io:println(<decimal> 25D); // @output 25

    io:println(<decimal> 25f); // @output 25.0

    io:println(<decimal> 25F); // @output 25.0

    io:println(<decimal> 25d); // @output 25

    io:println(<decimal> 25D); // @output 25

    io:println(<decimal> 1E-6176); // @output 0

    io:println(<decimal> 1E-61f); // @output 1.0E-61
}

Test-Case: output
Description: Test DecimalFloatingPointNumber that has decimal point with valid type cast to decimal type.
Labels: decimal, FloatingPointTypeSuffix, type-cast-expr

function init() {
    io:println(<decimal> 9.99E+6111); // @output 9.99E+6111

    io:println(<decimal> 25.0); // @output 25.0

    io:println(<decimal> 245.32); // @output 245.32

    io:println(<decimal> .99); // @output 0.99

    io:println(<decimal> 25.0e174); // @output 2.50E+175

    io:println(<decimal> 25.0E174); // @output 2.50E+175

    io:println(<decimal> 243.32e174); // @output 2.4332E+176

    io:println(<decimal> 245.32E174); // @output 2.4532E+176

    io:println(<decimal> 99e174); // @output 9.9E+175

    io:println(<decimal> .99E174); // @output 9.9E+173

    io:println(<decimal> 25.0e+174); // @output 2.50E+175

    io:println(<decimal> 25.0E-174); // @output 2.50E-173

    io:println(<decimal> 243.32e+174); // @output 2.4332E+176

    io:println(<decimal> 245.32E-174); // @output 2.4532E-172

    io:println(<decimal> .99e+174); // @output 9.9E+173

    io:println(<decimal> .99E-174); // @output 9.9E-175

    io:println(<decimal> 25.0f); // @output 25.0

    io:println(<decimal> 25.0F); // @output 25.0

    io:println(<decimal> 25.0d); // @output 25.0

    io:println(<decimal> 25.0D); // @output 25.0

    io:println(<decimal> 245.32f); // @output 245.32

    io:println(<decimal> 245.32F); // @output 245.32

    io:println(<decimal> 245.32d); // @output 245.32

    io:println(<decimal> 245.32D); // @output 245.32

    io:println(<decimal> .99f); // @output 0.99

    io:println(<decimal> .99F); // @output 0.99

    io:println(<decimal> .99d); // @output 0.99

    io:println(<decimal> .99D); // @output 0.99

    io:println(<decimal> 25.0e174f); // @output 2.5E+175

    io:println(<decimal> 25.0e174F); // @output 2.5E+175

    io:println(<decimal> 25.0e174d); // @output 2.50E+175

    io:println(<decimal> 25.0e174D); // @output 2.50E+175

    io:println(<decimal> 25.0E174f); // @output 2.5E+175

    io:println(<decimal> 25.0E174F); // @output 2.5E+175

    io:println(<decimal> 25.0E174d); // @output 2.50E+175

    io:println(<decimal> 25.0E174D); // @output 2.50E+175

    io:println(<decimal> 245.32e174f); // @output 2.4532E+176

    io:println(<decimal> 245.32e174F); // @output 2.4532E+176

    io:println(<decimal> 245.32e174d); // @output 2.4532E+176

    io:println(<decimal> 245.32e174D); // @output 2.4532E+176

    io:println(<decimal> 245.32E174F); // @output 2.4532E+176

    io:println(<decimal> 245.32E174d); // @output 2.4532E+176

    io:println(<decimal> 245.32E174D); // @output 2.4532E+176

    io:println(<decimal> .99e174f); // @output 9.9E+173

    io:println(<decimal> .99e174F); // @output 9.9E+173

    io:println(<decimal> .99e174d); // @output 9.9E+173

    io:println(<decimal> .99e174D); // @output 9.9E+173

    io:println(<decimal> .99E174f); // @output 9.9E+173

    io:println(<decimal> .99E174F); // @output 9.9E+173

    io:println(<decimal> .99E174d); // @output 9.9E+173

    io:println(<decimal> .99E174D); // @output 9.9E+173

    io:println(<decimal> 25.0e+174f); // @output 2.5E+175

    io:println(<decimal> 25.0e-174F); // @output 2.5E-173

    io:println(<decimal> 25.0e+174d); // @output 2.50E+175

    io:println(<decimal> 25.0e-174D); // @output 2.50E-173

    io:println(<decimal> 25.0E+174f); // @output 2.5E+175

    io:println(<decimal> 25.0E-174F); // @output 2.5E-173

    io:println(<decimal> 25.0E+174d); // @output 2.50E+175

    io:println(<decimal> 25.0E-174D); // @output 2.50E-173

    io:println(<decimal> 245.32e+174f); // @output 2.4532E+176

    io:println(<decimal> 245.32e-174F); // @output 2.4532E-172

    io:println(<decimal> 245.32e+174d); // @output 2.4532E+176

    io:println(<decimal> 245.32e-174D); // @output 2.4532E-172

    io:println(<decimal> 245.32E+174f); // @output 2.4532E+176

    io:println(<decimal> 245.32E-174F); // @output 2.4532E-172

    io:println(<decimal> 245.32E+174d); // @output 2.4532E+176

    io:println(<decimal> 245.32E-174D); // @output 2.4532E-172

    io:println(<decimal> .99e+174f); // @output 9.9E+173

    io:println(<decimal> .99e-174F); // @output 9.9E-175

    io:println(<decimal> .99e+174d); // @output 9.9E+173

    io:println(<decimal> .99e-174D); // @output 9.9E-175

    io:println(<decimal> .99E+174f); // @output 9.9E+173

    io:println(<decimal> .99E-174F); // @output 9.9E-175

    io:println(<decimal> .99E+174d); // @output 9.9E+173

    io:println(<decimal> .99E-174D); // @output 9.9E-175
}

Test-Case: output
Description: Test DecimalFloatingPointNumber without decimal point with valid type cast to floating point type.
Labels: decimal, float, FloatingPointTypeSuffix, type-cast-expr, union-type

function init() {
    io:println(<decimal|float> 25e174); // @output 2.5E175

    io:println(<decimal|float> 25E174); // @output 2.5E175

    io:println(<decimal|float> 25e+174); // @output 2.5E175

    io:println(<decimal|float> 25E-174); // @output 2.5E-173

    io:println(<decimal|float> 25e174f); // @output 2.5E175

    io:println(<decimal|float> 25e174F); // @output 2.5E175

    io:println(<decimal|float> 25e174d); // @output 2.5E+175

    io:println(<decimal|float> 25e174D); // @output 2.5E+175

    io:println(<decimal|float> 25e174f); // @output 2.5E175

    io:println(<decimal|float> 25e174F); // @output 2.5E175

    io:println(<decimal|float> 25e174d); // @output 2.5E+175

    io:println(<decimal|float> 25e174D); // @output 2.5E+175

    io:println(<decimal|float> 25e+174f); // @output 2.5E175

    io:println(<decimal|float> 25e-174F); // @output 2.5E-173

    io:println(<decimal|float> 25e+174d); // @output 2.5E+175

    io:println(<decimal|float> 25e-174D); // @output 2.5E-173

    io:println(<decimal|float> 25E+174f); // @output 2.5E175

    io:println(<decimal|float> 25E-174F); // @output 2.5E-173

    io:println(<decimal|float> 25E+174d); // @output 2.5E+175

    io:println(<decimal|float> 25E-174D); // @output 2.5E-173

    io:println(<decimal|float> 25f); // @output 25.0

    io:println(<decimal|float> 25F); // @output 25.0

    io:println(<decimal|float> 25d); // @output 25

    io:println(<decimal|float> 25D); // @output 25

    io:println(<decimal|float> 99e174); // @output 9.9E175

    io:println(<decimal|float> 25f); // @output 25.0

    io:println(<decimal|float> 25F); // @output 25.0

    io:println(<decimal|float> 25d); // @output 25

    io:println(<decimal|float> 25D); // @output 25

    io:println(<decimal|float> 1E-6176d); // @output 0
}

Test-Case: output
Description: Test DecimalFloatingPointNumber that has decimal point with valid type cast to floating point type.
Labels: decimal, float, FloatingPointTypeSuffix, type-cast-expr, union-type

function init() {
    io:println(<decimal|float> .99E174); // @output 9.9E173

    io:println(<decimal|float> 25.0e+174); // @output 2.5E175

    io:println(<decimal|float> 25.0E-174); // @output 2.5E-173

    io:println(<decimal|float> 243.32e+174); // @output 2.4332E176

    io:println(<decimal|float> 245.32E-174); // @output 2.4532E-172

    io:println(<decimal|float> .99e+174); // @output 9.9E173

    io:println(<decimal|float> .99E-174); // @output 9.9E-175

    io:println(<decimal|float> 25.0f); // @output 25.0

    io:println(<decimal|float> 25.0F); // @output 25.0

    io:println(<decimal|float> 25.0d); // @output 25.0

    io:println(<decimal|float> 25.0D); // @output 25.0

    io:println(<decimal|float> 245.32f); // @output 245.32

    io:println(<decimal|float> 245.32F); // @output 245.32

    io:println(<decimal|float> 245.32d); // @output 245.32

    io:println(<decimal|float> 245.32D); // @output 245.32

    io:println(<decimal|float> .99f); // @output 0.99

    io:println(<decimal|float> .99F); // @output 0.99

    io:println(<decimal|float> .99d); // @output 0.99

    io:println(<decimal|float> .99D); // @output 0.99

    io:println(<decimal|float> 25.0e174f); // @output 2.5E175

    io:println(<decimal|float> 25.0e174F); // @output 2.5E175

    io:println(<decimal|float> 25.0e174d); // @output 2.50E+175

    io:println(<decimal|float> 25.0e174D); // @output 2.50E+175

    io:println(<decimal|float> 25.0E174f); // @output 2.5E175

    io:println(<decimal|float> 25.0E174F); // @output 2.5E175

    io:println(<decimal|float> 25.0E174d); // @output 2.50E+175

    io:println(<decimal|float> 25.0E174D); // @output 2.50E+175

    io:println(<decimal|float> 245.32e174f); // @output 2.4532E176

    io:println(<decimal|float> 245.32e174F); // @output 2.4532E176

    io:println(<decimal|float> 245.32e174d); // @output 2.4532E+176

    io:println(<decimal|float> 245.32e174D); // @output 2.4532E+176

    io:println(<decimal|float> 245.32E174F); // @output 2.4532E176

    io:println(<decimal|float> 245.32E174d); // @output 2.4532E+176

    io:println(<decimal|float> 245.32E174D); // @output 2.4532E+176

    io:println(<decimal|float> .99e174f); // @output 9.9E173

    io:println(<decimal|float> .99e174F); // @output 9.9E173

    io:println(<decimal|float> .99e174d); // @output 9.9E+173

    io:println(<decimal|float> .99e174D); // @output 9.9E+173

    io:println(<decimal|float> .99E174f); // @output 9.9E173

    io:println(<decimal|float> .99E174F); // @output 9.9E173

    io:println(<decimal|float> .99E174d); // @output 9.9E+173

    io:println(<decimal|float> .99E174D); // @output 9.9E+173

    io:println(<decimal|float> 25.0e+174f); // @output 2.5E175

    io:println(<decimal|float> 25.0e-174F); // @output 2.5E-173

    io:println(<decimal|float> 25.0e+174d); // @output 2.50E+175

    io:println(<decimal|float> 25.0e-174D); // @output 2.50E-173

    io:println(<decimal|float> 25.0E+174f); // @output 2.5E175

    io:println(<decimal|float> 25.0E-174F); // @output 2.5E-173

    io:println(<decimal|float> 25.0E+174d); // @output 2.50E+175

    io:println(<decimal|float> 25.0E-174D); // @output 2.50E-173

    io:println(<decimal|float> 245.32e+174f); // @output 2.4532E176

    io:println(<decimal|float> 245.32e-174F); // @output 2.4532E-172

    io:println(<decimal|float> 245.32e+174d); // @output 2.4532E+176

    io:println(<decimal|float> 245.32e-174D); // @output 2.4532E-172

    io:println(<decimal|float> 245.32E+174f); // @output 2.4532E176

    io:println(<decimal|float> 245.32E-174F); // @output 2.4532E-172

    io:println(<decimal|float> 245.32E+174d); // @output 2.4532E+176

    io:println(<decimal|float> 245.32E-174D); // @output 2.4532E-172

    io:println(<decimal|float> .99e+174f); // @output 9.9E173

    io:println(<decimal|float> .99e-174F); // @output 9.9E-175

    io:println(<decimal|float> .99e+174d); // @output 9.9E+173

    io:println(<decimal|float> .99e-174D); // @output 9.9E-175

    io:println(<decimal|float> .99E+174f); // @output 9.9E173

    io:println(<decimal|float> .99E-174F); // @output 9.9E-175

    io:println(<decimal|float> .99E+174d); // @output 9.9E+173

    io:println(<decimal|float> .99E-174D); // @output 9.9E-175

    io:println(<decimal|float> 25.0); // @output 25.0

    io:println(<decimal|float> 245.32); // @output 245.32

    io:println(<decimal|float> .99); // @output 0.99

    io:println(<decimal|float> 25.0e174); // @output 2.5E175

    io:println(<decimal|float> 25.0E174); // @output 2.5E175

    io:println(<decimal|float> 243.32e174); // @output 2.4332E176

    io:println(<decimal|float> 245.32E174); // @output 2.4532E176
}

Test-Case: error
Description: Test out of range DecimalFloatingPointNumber with type cast to decimal type.
Labels: decimal, FloatingPointTypeSuffix, type-cast-expr

function errorFunction() {
    io:println(<decimal> 9.99E+6111f); // @error out of range for 'float'
}

Test-Case: panic
Description: Test invalid DecimalFloatingPointNumber type cast.
Labels: FloatingPointTypeSuffix, int, type-cast-expr

function init() {
    io:println(<int>  245.32e84f); // @panic 'float' value  cannot be converted to 'int`
}

Test-Case: panic
Description: Test invalid DecimalFloatingPointNumber type cast.
Labels: FloatingPointTypeSuffix, int, type-cast-expr

function init() {
    io:println(<int>  245.32e84D); // @panic 'decimal' value  cannot be converted to 'int`
}

Test-Case: panic
Description: Test invalid DecimalFloatingPointNumber type cast.
Labels: FloatingPointTypeSuffix, int, type-cast-expr

function init() {
    io:println(<int>  9.99E+6111d); // @panic 'decimal' value  cannot be converted to 'int`
}

Test-Case: panic
Description: Test invalid DecimalFloatingPointNumber type cast.
Labels: FloatingPointTypeSuffix, int, type-cast-expr

function init() {
    io:println(<int>  1E-6176d); // @panic 'decimal' value  cannot be converted to 'int`
}

Test-Case: panic
Description: Test invalid DecimalFloatingPointNumber type cast.
Labels: FloatingPointTypeSuffix, int, type-cast-expr

function init() {
    io:println(<int>  9.99E+6111); // @panic 'float' value  cannot be converted to 'int`
}

Test-Case: panic
Description: Test invalid DecimalFloatingPointNumber type cast.
Labels: int, type-cast-expr

function init() {
    io:println(<int>  1E-6176); // @panic 'float' value  cannot be converted to 'int`
}

Test-Case: panic
Description: Test invalid DecimalFloatingPointNumber type cast.
Labels: HexFloatingPointLiteral, int, type-cast-expr

function init() {
    io:println(<int>  0x1.0fffffffffffffp+1024); // @panic 'float' value  cannot be converted to 'int`
}

Test-Case: error
Description: Test invalid DecimalFloatingPointNumber type cast.
Labels: any, boolean, FloatingPointTypeSuffix, nil-type, string, type-cast-expr

function errorFunction() {
    any _ = <()> 25e1742; // @error 'float' cannot be cast to '()'
    any _ = <()> 25e+1742; // @error 'float' cannot be cast to '()'
    any _ = <()> 25e1742f; // @error 'float' cannot be cast to '()'
    any _ = <()> 25e1742D; // @error 'decimal' cannot be cast to '()'
    any _ = <()> 25e+1742f; // @error 'float' cannot be cast to '()'
    any _ = <()> 25e-1742F; // @error 'float' cannot be cast to '()'
    any _ = <()> 25E+1742d; // @error 'decimal' cannot be cast to '()'
    any _ = <()> 25E-1742D; // @error 'decimal' cannot be cast to '()'
    any _ = <()> 25.0; // @error 'float' cannot be cast to '()'
    any _ = <()> 245.32; // @error 'float' cannot be cast to '()'
    any _ = <()> .99; // @error 'float' cannot be cast to '()'
    any _ = <()> 25.0e1742; // @error 'float' cannot be cast to '()'
    any _ = <()> 243.32e1742; // @error 'float' cannot be cast to '()'
    any _ = <()> .99E1742; // @error 'float' cannot be cast to '()'
    any _ = <()> 25.0e+1742; // @error 'float' cannot be cast to '()'
    any _ = <()> 245.32E-1742; // @error 'float' cannot be cast to '()'
    any _ = <()> .99e+1742; // @error 'float' cannot be cast to '()'
    any _ = <()> 25.0f; // @error 'float' cannot be cast to '()'
    any _ = <()> 25.0d; // @error 'decimal' cannot be cast to '()'
    any _ = <()> 245.32f; // @error 'float' cannot be cast to '()'
    any _ = <()> 245.32D; // @error 'decimal' cannot be cast to '()'
    any _ = <()> 25.0e1742f; // @error 'float' cannot be cast to '()'
    any _ = <()> 245.32e1742D; // @error 'decimal' cannot be cast to '()'
    any _ = <()> .99e1742F; // @error 'float' cannot be cast to '()'
    any _ = <()> 25.0e+1742f; // @error 'float' cannot be cast to '()'
    any _ = <()> 245.32e+1742f; // @error 'float' cannot be cast to '()'
    any _ = <()> .99e-1742D; // @error 'decimal' cannot be cast to '()'
    any _ = <()> 25f; // @error 'float' cannot be cast to '()'
    any _ = <()> 9.99E+6111f; // @error 'float' cannot be cast to '()'
    any _ = <()> 1E-6176f; // @error 'float' cannot be cast to '()'

    any _ = <string> 25e1742; // @error 'float' cannot be cast to 'string'
    any _ = <string> 25e+1742; // @error 'float' cannot be cast to 'string'
    any _ = <string> 25e1742f; // @error 'float' cannot be cast to 'string'
    any _ = <string> 25e1742D; // @error 'decimal' cannot be cast to 'string'
    any _ = <string> 25e+1742f; // @error 'float' cannot be cast to 'string'
    any _ = <string> 25e-1742F; // @error 'float' cannot be cast to 'string'
    any _ = <string> 25E+1742d; // @error 'decimal' cannot be cast to 'string'
    any _ = <string> 25E-1742D; // @error 'decimal' cannot be cast to 'string'
    any _ = <string> 25.0; // @error 'float' cannot be cast to 'string'
    any _ = <string> 245.32; // @error 'float' cannot be cast to 'string'
    any _ = <string> .99; // @error 'float' cannot be cast to 'string'
    any _ = <string> 25.0e1742; // @error 'float' cannot be cast to 'string'
    any _ = <string> 243.32e1742; // @error 'float' cannot be cast to 'string'
    any _ = <string> .99E1742; // @error 'float' cannot be cast to 'string'
    any _ = <string> 25.0e+1742; // @error 'float' cannot be cast to 'string'
    any _ = <string> 245.32E-1742; // @error 'float' cannot be cast to 'string'
    any _ = <string> .99e+1742; // @error 'float' cannot be cast to 'string'
    any _ = <string> 25.0f; // @error 'float' cannot be cast to 'string'
    any _ = <string> 25.0d; // @error 'decimal' cannot be cast to 'string'
    any _ = <string> 245.32f; // @error 'float' cannot be cast to 'string'
    any _ = <string> 245.32D; // @error 'decimal' cannot be cast to 'string'
    any _ = <string> 25.0e1742f; // @error 'float' cannot be cast to 'string'
    any _ = <string> 245.32e1742D; // @error 'decimal' cannot be cast to 'string'
    any _ = <string> .99e1742F; // @error 'float' cannot be cast to 'string'
    any _ = <string> 25.0e+1742f; // @error 'float' cannot be cast to 'string'
    any _ = <string> 245.32e+1742f; // @error 'float' cannot be cast to 'string'
    any _ = <string> .99e-1742D; // @error 'decimal' cannot be cast to 'string'
    any _ = <string> 25f; // @error 'float' cannot be cast to 'string'
    any _ = <string> 25D; // @error 'decimal' cannot be cast to 'string'
    any _ = <string> 9.99E+6111f; // @error 'float' cannot be cast to 'string'
    any _ = <string> 1E-6176f; // @error 'float' cannot be cast to 'string'

    any _ = <boolean> 25e1742; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 25e+1742; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 25e1742f; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 25e1742D; // @error 'decimal' cannot be cast to 'boolean'
    any _ = <boolean> 25e+1742f; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 25e-1742F; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 25E+1742d; // @error 'decimal' cannot be cast to 'boolean'
    any _ = <boolean> 25E-1742D; // @error 'decimal' cannot be cast to 'boolean'
    any _ = <boolean> 25.0; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 245.32; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> .99; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 25.0e1742; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 243.32e1742; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> .99E1742; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 25.0e+1742; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 245.32E-1742; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> .99e+1742; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 25.0f; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 25.0d; // @error 'decimal' cannot be cast to 'boolean'
    any _ = <boolean> 245.32f; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 245.32D; // @error 'decimal' cannot be cast to 'boolean'
    any _ = <boolean> 25.0e1742f; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 245.32e1742D; // @error 'decimal' cannot be cast to 'boolean'
    any _ = <boolean> .99e1742F; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 25.0e+1742f; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 245.32e+1742f; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> .99e-1742D; // @error 'decimal' cannot be cast to 'boolean'
    any _ = <boolean> 25f; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 25D; // @error 'decimal' cannot be cast to 'boolean'
    any _ = <boolean> 9.99E+6111f; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 1E-6176f; // @error 'float' cannot be cast to 'boolean'
}

Test-Case: output
Description: Test floating point literals with interpolation in template expressions.
Labels: FloatingPointTypeSuffix, HexFloatingPointLiteral, raw-template-expr

function init() {
    io:println(`${25e8}`); // @output 2.5E9
    io:println(`${25e+8}`); // @output 2.5E9
    io:println(`${25e8f}`); // @output 2.5E9
    io:println(`${25e8D}`); // @output 2.5E+9
    io:println(`${25e+8f}`); // @output 2.5E9
    io:println(`${25e-8F}`); // @output 2.5E-7
    io:println(`${25E+8d}`); // @output 2.5E+9
    io:println(`${25E-8D}`); // @output 2.5E-7
    io:println(`${25.0}`); // @output 25.0
    io:println(`${245.32}`); // @output 245.32
    io:println(`${.99}`); // @output 0.99
    io:println(`${25.0e8}`); // @output 2.5E9
    io:println(`${243.32e8}`); // @output 2.4332E10
    io:println(`${.99E8}`); // @output 9.9E7
    io:println(`${25.0e+8}`); // @output 2.5E9
    io:println(`${245.32E-8}`); // @output 2.4532E-6
    io:println(`${.99e+8}`); // @output 9.9E7
    io:println(`${25.0f}`); // @output 25.0
    io:println(`${25.0d}`); // @output 25.0
    io:println(`${245.32f}`); // @output 245.32
    io:println(`${245.32D}`); // @output 245.32
    io:println(`${25.0e8f}`); // @output 2.5E9
    io:println(`${245.32e8D}`); // @output 2.4532E+10
    io:println(`${.99e8F}`); // @output 9.9E7
    io:println(`${25.0e+8f}`); // @output 2.5E9
    io:println(`${245.32e+8f}`); // @output 2.4532E10
    io:println(`${.99e-8D}`); // @output 9.9E-9
    io:println(`${25f}`); // @output 25.0
    io:println(`${1E-61f}`); // @output 1.0E-61

    io:println(`${0x3eA3p34}`); // @output 2.7547920236544E14
    io:println(`${0X3eA3p34}`); // @output 2.7547920236544E14
    io:println(`${0x3eA3p+34}`); // @output 2.7547920236544E14
    io:println(`${0X3eA3P-34}`); // @output 9.333598427474499E-7
    io:println(`${0x3eA3.4Eb2}`); // @output 16035.307403564453
    io:println(`${0x.4Eb2}`); // @output 0.307403564453125
    io:println(`${0x4Eb2.0}`); // @output 20146.0
    io:println(`${0x3eA3.4Eb2p45}`); // @output 5.6419222224581427E17
    io:println(`${0X.4Eb2P45}`); // @output 1.0815801393152E13
    io:println(`${0X4Eb2.0P45}`); // @output 7.0882436010160947E17
    io:println(`${0x3eA3.4Eb2P-45}`); // @output 4.55750847651315E-10
    io:println(`${0X.4Eb2p+45}`); // @output 1.0815801393152E13
    io:println(`${0X4Eb2.0p+45}`); // @output 7.0882436010160947E17
}

Test-Case: output
Description: Test floating point literals as members of structural constructors.
Labels: FloatingPointTypeSuffix, HexFloatingPointLiteral, list-constructor-expr, mapping-constructor-expr, string,
        tuple-type

function init() {
    io:println([25e8, 25E8]); // @output [2.5E9,2.5E9]
    io:println([25e+8, 25e-8]); // @output [2.5E9,2.5E-7]
    io:println([25e8f, 25e8F]); // @output [2.5E9,2.5E9]
    io:println([25e8D, 25e8]); // @output [2.5E+9,2.5E9]
    io:println([25e+8f, 25e-8F]); // @output [2.5E9,2.5E-7]
    io:println([25E+8d, 25E-8D]); // @output [2.5E+9,2.5E-7]
    io:println([25.0, 25.0e8]); // @output [25.0,2.5E9]
    io:println([.99, 243.32e8]); // @output [0.99,2.4332E10]
    io:println([.99E8, 25.0e+8]); // @output [9.9E7,2.5E9]
    io:println([245.32E-8, .99e+8]); // @output [2.4532E-6,9.9E7]
    io:println([25.0f, 25.0d]); // @output [25.0,25.0]
    io:println([25.0d, 245.32f]); // @output [25.0,245.32]
    io:println([25.0e8f, 245.32D]); // @output [2.5E9,245.32]
    io:println([245.32e8D, 25.0e8f]); // @output [2.4532E+10,2.5E9]
    io:println([.99e8F, 25.0e+8f]); // @output [9.9E7,2.5E9]
    io:println([2.99e-8D, 0x12a3]); // @output [2.99E-8,4771]
    io:println([1E-6176d, 2.99e-8D]); // @output [0,2.99E-8]
    io:println([25f, 9.99E+6111d]); // @output [25.0,9.99E+6111]

    io:println([0x3eA3p34, 0X3eA3p34]); // @output [2.7547920236544E14,2.7547920236544E14]
    io:println([0x3eA3p+34, 0X3eA3P-34]); // @output [2.7547920236544E14,9.333598427474499E-7]
    io:println([0x3eA3.4Eb2, 0x.4Eb2]); // @output [16035.307403564453,0.307403564453125]
    io:println([0x4Eb2.0, 0x3eA3.4Eb2p45]); // @output [20146.0,5.6419222224581427E17]
    io:println([0X.4Eb2P45, 0X4Eb2.0P45]); // @output [1.0815801393152E13,7.0882436010160947E17]
    io:println([0x3eA3.4Eb2P-45, 0x3eA3.4Eb2P+45]); // @output [4.55750847651315E-10,5.6419222224581427E17]
    io:println([0X.4Eb2p+45, 0X4Eb2.0p+45]); // @output [1.0815801393152E13,7.0882436010160947E17]

    io:println([0x3eA3p34, 1E-6176d]); // @output [2.7547920236544E14,0]
    io:println([0x3eA3.4Eb2, .99e8F]); // @output [16035.307403564453,9.9E7]
    io:println([245.32e8f, 0x3eA3.4Eb2p45]); // @output [2.4532E10,5.6419222224581427E17]
    io:println([0X.4Eb2P45,  25.0]); // @output [1.0815801393152E13,25.0]
    io:println([0x3eA3.4Eb2P-45, 5e+8f]); // @output [4.55750847651315E-10,5.0E8]
    io:println([.99E8d, 0X4Eb2.0p+45]); // @output [9.9E+7,7.0882436010160947E17]

    io:println({"c" :25e8, "b" : 25E8}); // @output {"c":2.5E9,"b":2.5E9}
    io:println({"c" :25e+8, "b" : 25e-8}); // @output {"c":2.5E9,"b":2.5E-7}
    io:println({"c" :25e8f, "b" : 25e8F}); // @output {"c":2.5E9,"b":2.5E9}
    io:println({"c" :25e8D, "b" : 25e8}); // @output {"c":2.5E+9,"b":2.5E9}
    io:println({"c" :25e+8f, "b" : 25e-8F}); // @output {"c":2.5E9,"b":2.5E-7}
    io:println({"c" :25E+8d, "b" : 25E-8}); // @output {"c":2.5E+9,"b":2.5E-7}
    io:println({"c" :25.0, "b" : 25.0e8}); // @output {"c":25.0,"b":2.5E9}
    io:println({"c" :.99, "b" : 243.32e8}); // @output {"c":0.99,"b":2.4332E10}
    io:println({"c" :.99E8, "b" : 25.0e+8}); // @output {"c":9.9E7,"b":2.5E9}
    io:println({"c" :245.32E-8, "b" : .99e+8}); // @output {"c":2.4532E-6,"b":9.9E7}
    io:println({"c" :25.0f, "b" : 25.0d}); // @output {"c":25.0,"b":25.0}
    io:println({"c" :25.0d, "b" : 245.32f}); // @output {"c":25.0,"b":245.32}
    io:println({"c" :25.0e8f, "b" : 245.32D}); // @output {"c":2.5E9,"b":245.32}
    io:println({"c" :245.32e8D, "b" : 25.0e8f}); // @output {"c":2.4532E+10,"b":2.5E9}
    io:println({"c" :.99e8F, "b" : 25.0e+8f}); // @output {"c":9.9E7,"b":2.5E9}
    io:println({"c" :2.99e-8D, "b" : .123E+2f}); // @output {"c":2.99E-8,"b":12.3}
    io:println({"c" :1E-6176d, "b" : 2.99e-8D}); // @output {"c":0,"b":2.99E-8}

    io:println({"c" :0x3eA3p34, "b" : 0X3eA3p34}); // @output {"c":2.7547920236544E14,"b":2.7547920236544E14}
    io:println({"c" :0x3eA3p+34, "b" : 0X3eA3P-34}); // @output {"c":2.7547920236544E14,"b":9.333598427474499E-7}
    io:println({"c" :0x3eA3.4Eb2, "b" : 0x.4Eb2}); // @output {"c":16035.307403564453,"b":0.307403564453125}
    io:println({"c" :0x4Eb2.0, "b" : 0x3eA3.4Eb2p45}); // @output {"c":20146.0,"b":5.6419222224581427E17}
    io:println({"c" :0X.4Eb2P45, "b" : 0X4Eb2.0P45}); // @output {"c":1.0815801393152E13,"b":7.0882436010160947E17}
    io:println({"c" :0x3eA3.4Eb2P-45, "b" : 0x3eA3.4Eb2P+45}); // @output {"c":4.55750847651315E-10,"b":5.6419222224581427E17}
    io:println({"c" :0X.4Eb2p+45, "b" : 0X4Eb2.0p+45}); // @output {"c":1.0815801393152E13,"b":7.0882436010160947E17}

    io:println({"c" :0x3eA3.4Eb2, "b" : .99e8F}); // @output {"c":16035.307403564453,"b":9.9E7}
    io:println({"c" :245.32e8f, "b" : 0x3eA3.4Eb2p45}); // @output {"c":2.4532E10,"b":5.6419222224581427E17}
    io:println({"c" :0X.4Eb2P45, "b" :  25.0}); // @output {"c":1.0815801393152E13,"b":25.0}
    io:println({"c" :0x3eA3.4Eb2P-45, "b" : 5e+8f}); // @output {"c":4.55750847651315E-10,"b":5.0E8}
    io:println({"c" :.99E8, "b" : 0X4Eb2.0p+45}); // @output {"c":9.9E7,"b":7.0882436010160947E17}
    io:println({"c" :0x3eA3p34, "b" : 1E-61f}); // @output {"c":2.7547920236544E14,"b":1.0E-61}
}

Test-Case: output
Description: Test the basic type when the applicable contextually expected types are a subtype of decimal and a union with int and decimal.
Labels: decimal, int, is-expr, nil-type, union-type

function init() {
    subtypeDecimal(25e1742); // @output true
    subtypeDecimal(25e+1742); // @output true
    subtypeDecimal(25e1742); // // @output true
    subtypeDecimal(25E-1742); // // @output true
    subtypeDecimal(25.0); // @output true
    subtypeDecimal(245.32); // @output true
    subtypeDecimal(.99); // @output true
    subtypeDecimal(25.0e1742); // @output true
    subtypeDecimal(243.32e1742); // @output true
    subtypeDecimal(.99E1742); // @output true
    subtypeDecimal(25.0e+1742); // @output true
    subtypeDecimal(245.32E-1742); // @output true
    subtypeDecimal(.99e+1742); // @output true
    subtypeDecimal(25); // // @output true
    subtypeDecimal(9.99E+6111); // @output true
    subtypeDecimal(1E-6176); // @output true

    subtypeNilDecimal(25e1742); // @output true
    subtypeNilDecimal(25e+1742); // @output true
    subtypeNilDecimal(25e1742); // // @output true
    subtypeNilDecimal(25E-1742); // // @output true
    subtypeNilDecimal(25.0); // @output true
    subtypeNilDecimal(245.32); // @output true
    subtypeNilDecimal(.99); // @output true
    subtypeNilDecimal(25.0e1742); // @output true
    subtypeNilDecimal(243.32e1742); // @output true
    subtypeNilDecimal(.99E1742); // @output true
    subtypeNilDecimal(25.0e+1742); // @output true
    subtypeNilDecimal(245.32E-1742); // @output true
    subtypeNilDecimal(.99e+1742); // @output true
    subtypeNilDecimal(25); // // @output true
    subtypeNilDecimal(9.99E+6111); // @output true
    subtypeNilDecimal(1E-6176); // @output true

    subtypeIntDecimal(25e1742); // @output true
                                // @output false
    subtypeIntDecimal(25e+1742); // @output true
                                // @output false
    subtypeIntDecimal(25e1742); // @output true
                                // @output false
    subtypeIntDecimal(25E-1742); // @output true
                                 // @output false
    subtypeIntDecimal(25.0); // @output true
                            // @output false
    subtypeIntDecimal(245.32); // @output true
                            // @output false
    subtypeIntDecimal(.99); // @output true
                            // @output false
    subtypeIntDecimal(25.0e1742); // @output true
                                // @output false
    subtypeIntDecimal(243.32e1742); // @output true
                                    // @output false
    subtypeIntDecimal(.99E1742); // @output true
                                // @output false
    subtypeIntDecimal(25.0e+1742); // @output true
                                    // @output false
    subtypeIntDecimal(245.32E-1742); // @output true
                                    // @output false
    subtypeIntDecimal(.99e+1742); // @output true
                                // @output false
    subtypeIntDecimal(25); // @output false
                            // @output true
    subtypeIntDecimal(9.99E+6111); // @output true
                                    // @output false
    subtypeIntDecimal(1E-6176); // @output true
                                // @output false
}

function subtypeIntDecimal(int|decimal x) {
    io:println(x is decimal);
    io:println(x is int);
}

function subtypeNilDecimal(()|decimal x) {
    io:println(x is decimal);
}

function subtypeDecimal(decimal x) {
    io:println(x is decimal);
}

Test-Case: output
Description: Test the basic type when the applicable contextually expected type is float.
Labels: float, HexFloatingPointLiteral, is-expr, union-type

function init() {
    subtypeFloat(25e174); // @output true
    subtypeFloat(25e+174); // @output true
    subtypeFloat(25e174); // // @output true
    subtypeFloat(25E-174); // // @output true
    subtypeFloat(25.0); // @output true
    subtypeFloat(245.32); // @output true
    subtypeFloat(.99); // @output true
    subtypeFloat(25.0e174); // @output true
    subtypeFloat(243.32e174); // @output true
    subtypeFloat(.99E174); // @output true
    subtypeFloat(25.0e+174); // @output true
    subtypeFloat(245.32E-174); // @output true
    subtypeFloat(.99e+174); // @output true
    subtypeFloat(25); // // @output true
    subtypeFloat(9.99E+61); // @output true
    subtypeFloat(1E-61); // @output true

    subtypeFloat(0x3eA3p34); // @output true
    subtypeFloat(0x3eA3P34); // @output true
    subtypeFloat(0X3eA3p34); // @output true
    subtypeFloat(0X3eA3P34); // @output true
    subtypeFloat(0x3eA3p+34); // @output true
    subtypeFloat(0x3eA3P-34); // @output true
    subtypeFloat(0X3eA3p+34); // @output true
    subtypeFloat(0X3eA3P-34); // @output true
    subtypeFloat(0x3eA3.4Eb2); // @output true
    subtypeFloat(0x.4Eb2); // @output true
    subtypeFloat(0X3eA3.4Eb2); // @output true
    subtypeFloat(0X.4Eb2); // @output true
    subtypeFloat(0x3eA3.4Eb2p45); // @output true
    subtypeFloat(0x3eA3.4Eb2P45); // @output true
    subtypeFloat(0x.4Eb2p45); // @output true
    subtypeFloat(0x.4Eb2P45); // @output true
    subtypeFloat(0X3eA3.4Eb2p45); // @output true
    subtypeFloat(0X3eA3.4Eb2P45); // @output true
    subtypeFloat(0X.4Eb2p45); // @output true
    subtypeFloat(0X.4Eb2P45); // @output true
    subtypeFloat(0x3eA3.4Eb2p+45); // @output true
    subtypeFloat(0x3eA3.4Eb2P-45); // @output true
    subtypeFloat(0x.4Eb2p+45); // @output true
    subtypeFloat(0x.4Eb2P-45); // @output true
    subtypeFloat(0X3eA3.4Eb2p+45); // @output true
    subtypeFloat(0X3eA3.4Eb2P-45); // @output true
    subtypeFloat(0X.4Eb2p+45); // @output true
    subtypeFloat(0X.4Eb2P-45); // @output true
}

function subtypeFloat(float x) {
    io:println(x is float);
}

Test-Case: output
Description: Test the basic type when the applicable contextually expected type is a subtype of float, having a union with int and float types.
Labels: float, HexFloatingPointLiteral, int, is-expr, union-type

function init() {
    subtypeIntFloat(25e174); // @output true
                                // @output false
    subtypeIntFloat(25e+174); // @output true
                                // @output false
    subtypeIntFloat(25e174); // @output true
                                // @output false
    subtypeIntFloat(25E-174); // @output true
                                 // @output false
    subtypeIntFloat(25.0); // @output true
                            // @output false
    subtypeIntFloat(245.32); // @output true
                            // @output false
    subtypeIntFloat(.99); // @output true
                            // @output false
    subtypeIntFloat(25.0e174); // @output true
                                // @output false
    subtypeIntFloat(243.32e174); // @output true
                                    // @output false
    subtypeIntFloat(.99E174); // @output true
                                // @output false
    subtypeIntFloat(25.0e+174); // @output true
                                    // @output false
    subtypeIntFloat(245.32E-174); // @output true
                                    // @output false
    subtypeIntFloat(.99e+174); // @output true
                                // @output false
    subtypeIntFloat(25); // @output false
                            // @output true
    subtypeIntFloat(9.99E+61); // @output true
                                    // @output false
    subtypeIntFloat(1E-61); // @output true
                                // @output false

    subtypeIntFloat(0x3eA3p34); // @output true
                                // @output false
    subtypeIntFloat(0x3eA3P34); // @output true
                                // @output false
    subtypeIntFloat(0X3eA3p34); // @output true
                                // @output false
    subtypeIntFloat(0X3eA3P34); // @output true
                                // @output false
    subtypeIntFloat(0x3eA3p+34); // @output true
                                // @output false
    subtypeIntFloat(0x3eA3P-34); // @output true
                                // @output false
    subtypeIntFloat(0X3eA3p+34); // @output true
                                // @output false
    subtypeIntFloat(0X3eA3P-34); // @output true
                                // @output false
    subtypeIntFloat(0x3eA3.4Eb2); // @output true
                                    // @output false
    subtypeIntFloat(0x.4Eb2); // @output true
                                // @output false
    subtypeIntFloat(0X3eA3.4Eb2); // @output true
                                    // @output false
    subtypeIntFloat(0X.4Eb2); // @output true
                                // @output false
    subtypeIntFloat(0x3eA3.4Eb2p45); // @output true
                                    // @output false
    subtypeIntFloat(0x3eA3.4Eb2P45); // @output true
                                    // @output false
    subtypeIntFloat(0x.4Eb2p45); // @output true
                                // @output false
    subtypeIntFloat(0x.4Eb2P45); // @output true
                                // @output false
    subtypeIntFloat(0X3eA3.4Eb2p45); // @output true
                                // @output false
    subtypeIntFloat(0X3eA3.4Eb2P45); // @output true
                            // @output false
    subtypeIntFloat(0X.4Eb2p45); // @output true
                            // @output false
    subtypeIntFloat(0X.4Eb2P45); // @output true
                            // @output false
    subtypeIntFloat(0x3eA3.4Eb2p+45); // @output true
                                // @output false
    subtypeIntFloat(0x3eA3.4Eb2P-45); // @output true
                                    // @output false
    subtypeIntFloat(0x.4Eb2p+45); // @output true
                                // @output false
    subtypeIntFloat(0x.4Eb2P-45); // @output true
                                // @output false
    subtypeIntFloat(0X3eA3.4Eb2p+45); // @output true
                                    // @output false
    subtypeIntFloat(0X3eA3.4Eb2P-45); // @output true
                                // @output false
    subtypeIntFloat(0X.4Eb2p+45); // @output true
                                // @output false
    subtypeIntFloat(0X.4Eb2P-45); // @output true
                                // @output false
    subtypeIntFloat(0x12aB); // @output false
                                // @output true
}

function subtypeIntFloat(int|float x) {
    io:println(x is float);
    io:println(x is int);
}

Test-Case: output
Description: Test the basic type when the applicable contextually expected type is a subtype of float, having a union with nil and float types.
Labels: float, HexFloatingPointLiteral, is-expr, nil-type, union-type

function init() {
    subtypeNilFloat(25e174); // @output true
    subtypeNilFloat(25e+174); // @output true
    subtypeNilFloat(25e174); // // @output true
    subtypeNilFloat(25E-174); // // @output true
    subtypeNilFloat(25.0); // @output true
    subtypeNilFloat(245.32); // @output true
    subtypeNilFloat(.99); // @output true
    subtypeNilFloat(25.0e174); // @output true
    subtypeNilFloat(243.32e174); // @output true
    subtypeNilFloat(.99E174); // @output true
    subtypeNilFloat(25.0e+174); // @output true
    subtypeNilFloat(245.32E-174); // @output true
    subtypeNilFloat(.99e+174); // @output true
    subtypeNilFloat(25); // // @output true
    subtypeNilFloat(9.99E+61); // @output true
    subtypeNilFloat(1E-61); // @output true

    subtypeNilFloat(0x3eA3p34); // @output true
    subtypeNilFloat(0x3eA3P34); // @output true
    subtypeNilFloat(0X3eA3p34); // @output true
    subtypeNilFloat(0X3eA3P34); // @output true
    subtypeNilFloat(0x3eA3p+34); // @output true
    subtypeNilFloat(0x3eA3P-34); // @output true
    subtypeNilFloat(0X3eA3p+34); // @output true
    subtypeNilFloat(0X3eA3P-34); // @output true
    subtypeNilFloat(0x3eA3.4Eb2); // @output true
    subtypeNilFloat(0x.4Eb2); // @output true
    subtypeNilFloat(0X3eA3.4Eb2); // @output true
    subtypeNilFloat(0X.4Eb2); // @output true
    subtypeNilFloat(0x3eA3.4Eb2p45); // @output true
    subtypeNilFloat(0x3eA3.4Eb2P45); // @output true
    subtypeNilFloat(0x.4Eb2p45); // @output true
    subtypeNilFloat(0x.4Eb2P45); // @output true
    subtypeNilFloat(0X3eA3.4Eb2p45); // @output true
    subtypeNilFloat(0X3eA3.4Eb2P45); // @output true
    subtypeNilFloat(0X.4Eb2p45); // @output true
    subtypeNilFloat(0X.4Eb2P45); // @output true
    subtypeNilFloat(0x3eA3.4Eb2p+45); // @output true
    subtypeNilFloat(0x3eA3.4Eb2P-45); // @output true
    subtypeNilFloat(0x.4Eb2p+45); // @output true
    subtypeNilFloat(0x.4Eb2P-45); // @output true
    subtypeNilFloat(0X3eA3.4Eb2p+45); // @output true
    subtypeNilFloat(0X3eA3.4Eb2P-45); // @output true
    subtypeNilFloat(0X.4Eb2p+45); // @output true
    subtypeNilFloat(0X.4Eb2P-45); // @output true
}

function subtypeNilFloat(()|float x) {
    io:println(x is float);
}

Test-Case: output
Description: Test the basic type when the applicable contextually expected types are a combination of float and decimal with floating point literals.
Labels: decimal, float, HexFloatingPointLiteral, is-expr, union-type

function init() {
    subtypeFloatDecimal(25e174); // @output true
                                // @output false
    subtypeFloatDecimal(25e+174); // @output true
                                // @output false
    subtypeFloatDecimal(25e174); // @output true
                                // @output false
    subtypeFloatDecimal(25E-174); // @output true
                                 // @output false
    subtypeFloatDecimal(25.0); // @output true
                            // @output false
    subtypeFloatDecimal(245.32); // @output true
                            // @output false
    subtypeFloatDecimal(.99); // @output true
                            // @output false
    subtypeFloatDecimal(25.0e174); // @output true
                                // @output false
    subtypeFloatDecimal(243.32e174); // @output true
                                    // @output false
    subtypeFloatDecimal(.99E174); // @output true
                                // @output false
    subtypeFloatDecimal(25.0e+174); // @output true
                                    // @output false
    subtypeFloatDecimal(245.32E-174); // @output true
                                    // @output false
    subtypeFloatDecimal(.99e+174); // @output true
                                // @output false
    subtypeFloatDecimal(9.99E+61); // @output true
                                    // @output false
    subtypeFloatDecimal(1E-61); // @output true
                                // @output false

    subtypeFloatDecimal(0x3eA3p34); // @output true
                                // @output false
    subtypeFloatDecimal(0x3eA3P34); // @output true
                                // @output false
    subtypeFloatDecimal(0X3eA3p34); // @output true
                                // @output false
    subtypeFloatDecimal(0X3eA3P34); // @output true
                                // @output false
    subtypeFloatDecimal(0x3eA3p+34); // @output true
                                // @output false
    subtypeFloatDecimal(0x3eA3P-34); // @output true
                                // @output false
    subtypeFloatDecimal(0X3eA3p+34); // @output true
                                // @output false
    subtypeFloatDecimal(0X3eA3P-34); // @output true
                                // @output false
    subtypeFloatDecimal(0x3eA3.4Eb2); // @output true
                                    // @output false
    subtypeFloatDecimal(0x.4Eb2); // @output true
                                // @output false
    subtypeFloatDecimal(0X3eA3.4Eb2); // @output true
                                    // @output false
    subtypeFloatDecimal(0X.4Eb2); // @output true
                                // @output false
    subtypeFloatDecimal(0x3eA3.4Eb2p45); // @output true
                                    // @output false
    subtypeFloatDecimal(0x3eA3.4Eb2P45); // @output true
                                    // @output false
    subtypeFloatDecimal(0x.4Eb2p45); // @output true
                                // @output false
    subtypeFloatDecimal(0x.4Eb2P45); // @output true
                                // @output false
    subtypeFloatDecimal(0X3eA3.4Eb2p45); // @output true
                                // @output false
    subtypeFloatDecimal(0X3eA3.4Eb2P45); // @output true
                            // @output false
    subtypeFloatDecimal(0X.4Eb2p45); // @output true
                            // @output false
    subtypeFloatDecimal(0X.4Eb2P45); // @output true
                            // @output false
    subtypeFloatDecimal(0x3eA3.4Eb2p+45); // @output true
                                // @output false
    subtypeFloatDecimal(0x3eA3.4Eb2P-45); // @output true
                                    // @output false
    subtypeFloatDecimal(0x.4Eb2p+45); // @output true
                                // @output false
    subtypeFloatDecimal(0x.4Eb2P-45); // @output true
                                // @output false
    subtypeFloatDecimal(0X3eA3.4Eb2p+45); // @output true
                                    // @output false
    subtypeFloatDecimal(0X3eA3.4Eb2P-45); // @output true
                                // @output false
    subtypeFloatDecimal(0X.4Eb2p+45); // @output true
                                // @output false
    subtypeFloatDecimal(0X.4Eb2P-45); // @output true
                                // @output false
    subtypeFloatDecimal(0x12aB); // @output true
                                // @output false
}

function subtypeFloatDecimal(float|decimal x) {
    io:println(x is float);
    io:println(x is decimal);
}

Test-Case: output
Description: Test the basic type when the applicable contextually expected types are a combination of int, float and decimal with floating point literals.
Labels: decimal, float, HexFloatingPointLiteral, int, is-expr, union-type

function init() {
    subtypeIntFloatDecimal(25e174); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(25e+174); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(25e174); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(25E-174); // @output true
                                 // @output false
                                 // @output false

    subtypeIntFloatDecimal(25.0); // @output true
                            // @output false
                            // @output false

    subtypeIntFloatDecimal(245.32); // @output true
                            // @output false
                            // @output false

    subtypeIntFloatDecimal(.99); // @output true
                            // @output false
                            // @output false

    subtypeIntFloatDecimal(25.0e174); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(243.32e174); // @output true
                                    // @output false
                                    // @output false

    subtypeIntFloatDecimal(.99E174); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(25.0e+174); // @output true
                                    // @output false
                                    // @output false

    subtypeIntFloatDecimal(245.32E-174); // @output true
                                    // @output false
                                    // @output false

    subtypeIntFloatDecimal(.99e+174); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(9.99E+61); // @output true
                                    // @output false
                                    // @output false

    subtypeIntFloatDecimal(1E-61); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(0x3eA3p34); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(0x3eA3P34); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(0X3eA3p34); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(0X3eA3P34); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(0x3eA3p+34); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(0x3eA3P-34); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(0X3eA3p+34); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(0X3eA3P-34); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(0x3eA3.4Eb2); // @output true
                                    // @output false
                                    // @output false

    subtypeIntFloatDecimal(0x.4Eb2); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(0X3eA3.4Eb2); // @output true
                                    // @output false
                                    // @output false

    subtypeIntFloatDecimal(0X.4Eb2); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(0x3eA3.4Eb2p45); // @output true
                                    // @output false
                                    // @output false

    subtypeIntFloatDecimal(0x3eA3.4Eb2P45); // @output true
                                    // @output false
                                    // @output false

    subtypeIntFloatDecimal(0x.4Eb2p45); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(0x.4Eb2P45); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(0X3eA3.4Eb2p45); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(0X3eA3.4Eb2P45); // @output true
                            // @output false
                            // @output false

    subtypeIntFloatDecimal(0X.4Eb2p45); // @output true
                            // @output false
                            // @output false

    subtypeIntFloatDecimal(0X.4Eb2P45); // @output true
                            // @output false
                            // @output false

    subtypeIntFloatDecimal(0x3eA3.4Eb2p+45); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(0x3eA3.4Eb2P-45); // @output true
                                    // @output false
                                    // @output false

    subtypeIntFloatDecimal(0x.4Eb2p+45); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(0x.4Eb2P-45); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(0X3eA3.4Eb2p+45); // @output true
                                    // @output false
                                    // @output false

    subtypeIntFloatDecimal(0X3eA3.4Eb2P-45); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(0X.4Eb2p+45); // @output true
                                // @output false
                                // @output false

    subtypeIntFloatDecimal(0X.4Eb2P-45); // @output true
                                // @output false
                                // @output false
}

function subtypeIntFloatDecimal(int|float|decimal x) {
    io:println(x is float);
    io:println(x is int);
    io:println(x is decimal);
}

Test-Case: error
Description: Test out of range float assignment to a union of float and decimal
Labels: decimal, float, union-type

function errorFunction() {
    float|decimal _ = 25e1742; // @error value is out of range for 'float'
    float|decimal _ = 245.32E-1742; // @error value is out of range for 'float'
    float|decimal _ = 25.e+1742; // @error value is out of range for 'float'
}

Test-Case: output
Description: Test NAN and Infinity with float type descriptor.
Labels: float

function init() {
    float f = 0.0 / 0.0;
    io:println(f); // @output NaN
    io:println(f is float); // @output true
    io:println(f is float:NaN); // @output true

    f = 3.0/0.0;
    io:println(f); // @output Infinity
    io:println(f is float); // @output true
    io:println(f is float:Infinity); // @output true
}

Test-Case: panic
Description: Test NAN with decimal type descriptor.
Labels: decimal

function init() {
    decimal _ = 0.0 / 0.0; // @panic 'NaN' is not supported with decimal type
}

Test-Case: panic
Description: Test Infinity with decimal type descriptor.
Labels: decimal

function init() {
    decimal _ = 3.0/0.0; // @panic 'Infinity' is not supported with decimal type
}

Test-Case: panic
Description: Test subnormal value with decimal type descriptor.
Fail-Issue: ballerina-platform/ballerina-lang#39940
Labels: decimal

function init() {
    decimal _ = 1.0e-6144; // @panic 'subnormal' values are not supported with decimal type
    decimal _ = 1.0e-6150; // @panic 'subnormal' values are not supported with decimal type
    decimal _ = 1.0e-6173; // @panic 'subnormal' values are not supported with decimal type
}

Test-Case: output
Description: Test rounding floating point values with float type.
Labels: float, FloatingPointTypeSuffix, HexFloatingPointLiteral

function init() {
    float c = float:round(0.001234, 2);
    io:println(c); // @output 0.0

    c = float:round(0.001234, 4);
    io:println(c); // @output 0.0012

    c = float:round(0.001234, 6);
    io:println(c); // @output 0.001234

    c = float:round(0.001234, 7);
    io:println(c); // @output 0.001234

    c = float:round(12345.67e-2, 2);
    io:println(c); // @output 123.46

    c = float:round(0.000055E2, 2);
    io:println(c); // @output 0.01

    c = float:round(123.123f, 2);
    io:println(c); // @output 123.12

    c = float:round(0X.2345, 2);
    io:println(c); // @output 0.14

    c = float:round(0X0.000002345p-2, 2);
    io:println(c); // @output 0.0

    c = float:round(0X0.05a45p2, 2);
    io:println(c); // @output 0.09

    c = float:round(0X0.05a45P-2, 2);
    io:println(c); // @output 0.01
}

Test-Case: output
Description: Test rounding floating point values with decimal type.
Labels: decimal, FloatingPointTypeSuffix

function init() {
    decimal c = decimal:round(0.001234, 2);
    io:println(c); // @output 0

    c = decimal:round(0.001234, 4);
    io:println(c); // @output 0.0012

    c = decimal:round(0.001234, 6);
    io:println(c); // @output 0.001234

    c = decimal:round(0.001234, 7);
    io:println(c); // @output 0.001234

    c = decimal:round(12345.67e-2, 2);
    io:println(c); // @output 123.46

    c = decimal:round(0.000055E2, 2);
    io:println(c); // @output 0.01

    c = decimal:round(123.123d, 2);
    io:println(c); // @output 123.12
}

Test-Case: output
Description: Test equality of decimal mathematical value with different exponents.
Labels: decimal, FloatingPointTypeSuffix

function init() {
    decimal a = 0.45e2;
    decimal b = 0.0045e4;
    io:println(a == b); // @output true
    io:println(a === b); // @output true

    a = 0.45e-2;
    b = 4.5e-3;
    io:println(a == b); // @output true
    io:println(a === b); // @output true

    a = 0.45e2d;
    b = 0.0045e4D;
    io:println(a == b); // @output true
    io:println(a === b); // @output true

    a = 0.45e-2D;
    b = 4.5e-3d;
    io:println(a == b); // @output true
    io:println(a === b); // @output true
}

Test-Case: error
Description: Test invalid HexFloatingPointLiteral type cast.
Labels: any, boolean, HexFloatingPointLiteral, nil-type, string, type-cast-expr

function errorFunction() {
    any _ = <()> 0x3eA3p34; // @error 'float' cannot be cast to '()'
    any _ = <()> 0X3eA3p34; // @error 'float' cannot be cast to '()'
    any _ = <()> 0x3eA3p+34; // @error 'float' cannot be cast to '()'
    any _ = <()> 0X3eA3P-34; // @error 'float' cannot be cast to '()'
    any _ = <()> 0x3eA3.4Eb2; // @error 'float' cannot be cast to '()'
    any _ = <()> 0x.4Eb2; // @error 'float' cannot be cast to '()'
    any _ = <()> 0x4Eb2.; // @error 'float' cannot be cast to '()'
    any _ = <()> 0x3eA3.4Eb2p45; // @error 'float' cannot be cast to '()'
    any _ = <()> 0X.4Eb2P45; // @error 'float' cannot be cast to '()'
    any _ = <()> 0X4Eb2.0P45; // @error 'float' cannot be cast to '()'
    any _ = <()> 0x3eA3.4Eb2P-45; // @error 'float' cannot be cast to '()'
    any _ = <()> 0X.4Eb2p+45; // @error 'float' cannot be cast to '()'
    any _ = <()> 0X4Eb2.0p+45; // @error 'float' cannot be cast to '()'
    any _ = <())> 0x1.0ffffffffffffffp+1023; // @error 'float' cannot be cast to '())'

    any _ = <string> 0x3eA3p34; // @error 'float' cannot be cast to 'string'
    any _ = <string> 0X3eA3p34; // @error 'float' cannot be cast to 'string'
    any _ = <string> 0x3eA3p+34; // @error 'float' cannot be cast to 'string'
    any _ = <string> 0X3eA3P-34; // @error 'float' cannot be cast to 'string'
    any _ = <string> 0x3eA3.4Eb2; // @error 'float' cannot be cast to 'string'
    any _ = <string> 0x.4Eb2; // @error 'float' cannot be cast to 'string'
    any _ = <string> 0x4Eb2.; // @error 'float' cannot be cast to 'string'
    any _ = <string> 0x3eA3.4Eb2p45; // @error 'float' cannot be cast to 'string'
    any _ = <string> 0X.4Eb2P45; // @error 'float' cannot be cast to 'string'
    any _ = <string> 0X4Eb2.0P45; // @error 'float' cannot be cast to 'string'
    any _ = <string> 0x3eA3.4Eb2P-45; // @error 'float' cannot be cast to 'string'
    any _ = <string> 0X.4Eb2p+45; // @error 'float' cannot be cast to 'string'
    any _ = <string> 0X4Eb2.0p+45; // @error 'float' cannot be cast to 'string'
    any _ = <string> 0x1.0ffffffffffffffp+1023; // @error 'float' cannot be cast to 'string'

    any _ = <boolean> 0x3eA3p34; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 0X3eA3p34; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 0x3eA3p+34; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 0X3eA3P-34; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 0x3eA3.4Eb2; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 0x.4Eb2; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 0x4Eb2.; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 0x3eA3.4Eb2p45; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 0X.4Eb2P45; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 0X4Eb2.0P45; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 0x3eA3.4Eb2P-45; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 0X.4Eb2p+45; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 0X4Eb2.0p+45; // @error 'float' cannot be cast to 'boolean'
    any _ = <boolean> 0x1.0ffffffffffffffp+1023; // @error 'float' cannot be cast to 'boolean'
}

Test-Case: output
Description: Test HexFloatingPointLiteral with equality.
Labels: equality, HexFloatingPointLiteral, union-type

function init() {

    returnEquality(0x3eA3p34, 0x3eA3P34);  // @output true
                                           // @output false

    returnEquality(0X3eA3p34, 0X3eA3P34);  // @output true
                                           // @output false

    returnEquality(0x3eA3p+34, 0x3eA3P-34);  // @output false
                                             // @output true

    returnEquality(0X3eA3p+34, 0X3eA3P-34);  // @output false
                                             // @output true

    returnEquality(0X3eA3P-34, 0X3eA3p-34);  // @output true
                                             // @output false

    returnEquality(0X3EA3p34, 0X3eA3P34);  // @output true
                                           // @output false

    returnEquality(0x.4Eb2, 0x0.4Eb2);  // @output true
                                        // @output false

    returnEquality(0x.4Eb2, 0X.4Eb2);  // @output true
                                       // @output false

    returnEquality(0X3eA3.4Eb2, 0x3eA3.4Eb2);  // @output true
                                               // @output false

    returnEquality(0x3eA3.4Eb2p45, 0x3eA3.4Eb2P45);  // @output true
                                                     // @output false

    returnEquality(0x.4Eb2p45, 0x.4Eb2P45);  // @output true
                                             // @output false

    returnEquality(0X3eA3.4Eb2p45, 0X3eA3.4Eb2P45);  // @output true
                                                     // @output false

    returnEquality(0X.4Eb2p45, 0X.4Eb2P45);  // @output true
                                             // @output false

    returnEquality(0x3eA3.4Eb2p+45, 0x3eA3.4Eb2P-45);  // @output false
                                                       // @output true

    returnEquality(0x.4Eb2p+45, 0x.4Eb2P-45);  // @output false
                                               // @output true

    returnEquality(0X3eA3.4Eb2p+45, 0X3eA3.4Eb2P-45);  // @output false
                                                       // @output true

    returnEquality(0X.4Eb2p+45, 0X.4Eb2P-45);  // @output false
                                               // @output true

    returnEquality(0X.4Eb2p+45, 0x.4eb2P+45);  // @output true
                                               // @output false

    returnEquality(0X3eA3.4Eb2p-45, 0x3eA3.4Eb2P-45);  // @output true
                                                       // @output false
}

function returnEquality(float|decimal x, float|decimal y) {
    io:println(x == y);
    io:println(x != y);
}

Test-Case: output
Description: Test HexFloatingPointLiteral with valid type cast to integer type.
Labels: HexFloatingPointLiteral, int, type-cast-expr

function init() {
    io:println(<int> 0x3eA3p34); // @output 275479202365440

    io:println(<int> 0x3eA3P34); // @output 275479202365440

    io:println(<int> 0X3eA3p34); // @output 275479202365440

    io:println(<int> 0X3eA3P34); // @output 275479202365440

    io:println(<int> 0x3eA3p+34); // @output 275479202365440

    io:println(<int> 0x3eA3P-34); // @output 0

    io:println(<int> 0X3eA3p+34); // @output 275479202365440

    io:println(<int> 0X3eA3P-34); // @output 0


    io:println(<int> 0x3eA3.4Eb2); // @output 16035

    io:println(<int> 0x.4Eb2); // @output 0

    io:println(<int> 0X3eA3.4Eb2); // @output 16035

    io:println(<int> 0X.4Eb2); // @output 0


    io:println(<int> 0x3eA3.4Eb2p45); // @output 564192222245814272

    io:println(<int> 0x3eA3.4Eb2P45); // @output 564192222245814272

    io:println(<int> 0x.4Eb2p45); // @output 10815801393152

    io:println(<int> 0x.4Eb2P45); // @output 10815801393152

    io:println(<int> 0X3eA3.4Eb2p45); // @output 564192222245814272

    io:println(<int> 0X3eA3.4Eb2P45); // @output 564192222245814272

    io:println(<int> 0X.4Eb2p45); // @output 10815801393152

    io:println(<int> 0X.4Eb2P45); // @output 10815801393152


    io:println(<int> 0x3eA3.4Eb2p+45); // @output 564192222245814272

    io:println(<int> 0x3eA3.4Eb2P-45); // @output 0

    io:println(<int> 0x.4Eb2p+45); // @output 10815801393152

    io:println(<int> 0x.4Eb2P-45); // @output 0

    io:println(<int> 0X3eA3.4Eb2p+45); // @output 564192222245814272

    io:println(<int> 0X3eA3.4Eb2P-45); // @output 0

    io:println(<int> 0X.4Eb2p+45); // @output 10815801393152

    io:println(<int> 0X.4Eb2P-45); // @output 0
}

Test-Case: output
Description: Test HexFloatingPointLiteral with valid type cast to float type.
Labels: float, HexFloatingPointLiteral, type-cast-expr

function init() {
    io:println(<float>  0x3eA3p34); // @output 2.7547920236544E14

    io:println(<float>  0x3eA3P34); // @output 2.7547920236544E14

    io:println(<float>  0X3eA3p34); // @output 2.7547920236544E14

    io:println(<float>  0X3eA3P34); // @output 2.7547920236544E14

    io:println(<float>  0x3eA3p+34); // @output 2.7547920236544E14

    io:println(<float>  0x3eA3P-34); // @output 9.333598427474499E-7

    io:println(<float>  0X3eA3p+34); // @output 2.7547920236544E14

    io:println(<float>  0X3eA3P-34); // @output 9.333598427474499E-7


    io:println(<float>  0x3eA3.4Eb2); // @output 16035.307403564453

    io:println(<float>  0x.4Eb2); // @output 0.307403564453125

    io:println(<float>  0X3eA3.4Eb2); // @output 16035.307403564453

    io:println(<float>  0X.4Eb2); // @output 0.307403564453125


    io:println(<float>  0x3eA3.4Eb2p45); // @output 5.6419222224581427E17

    io:println(<float>  0x3eA3.4Eb2P45); // @output 5.6419222224581427E17

    io:println(<float>  0x.4Eb2p45); // @output 1.0815801393152E13

    io:println(<float>  0x.4Eb2P45); // @output 1.0815801393152E13

    io:println(<float>  0X3eA3.4Eb2p45); // @output 5.6419222224581427E17

    io:println(<float>  0X3eA3.4Eb2P45); // @output 5.6419222224581427E17

    io:println(<float>  0X.4Eb2p45); // @output 1.0815801393152E13

    io:println(<float>  0X.4Eb2P45); // @output 1.0815801393152E13


    io:println(<float>  0x3eA3.4Eb2p+45); // @output 5.6419222224581427E17

    io:println(<float>  0x3eA3.4Eb2P-45); // @output 4.55750847651315E-10

    io:println(<float>  0x.4Eb2p+45); // @output 1.0815801393152E13

    io:println(<float>  0x.4Eb2P-45); // @output 8.736934786757189E-15

    io:println(<float>  0X3eA3.4Eb2p+45); // @output 5.6419222224581427E17

    io:println(<float>  0X3eA3.4Eb2P-45); // @output 4.55750847651315E-10

    io:println(<float>  0X.4Eb2p+45); // @output 1.0815801393152E13

    io:println(<float>  0X.4Eb2P-45); // @output 8.736934786757189E-15
}

Test-Case: output
Description: Test HexFloatingPointLiteral with valid type cast to decimal type.
Labels: decimal, HexFloatingPointLiteral, type-cast-expr

function init() {
    io:println(<decimal>  0x3eA3p34); // @output 2.7547920236544E+14

    io:println(<decimal>  0x3eA3P34); // @output 2.7547920236544E+14

    io:println(<decimal>  0X3eA3p34); // @output 2.7547920236544E+14

    io:println(<decimal>  0X3eA3P34); // @output 2.7547920236544E+14

    io:println(<decimal>  0x3eA3p+34); // @output 2.7547920236544E+14

    io:println(<decimal>  0x3eA3P-34); // @output 9.333598427474499E-7

    io:println(<decimal>  0X3eA3p+34); // @output 2.7547920236544E+14

    io:println(<decimal>  0X3eA3P-34); // @output 9.333598427474499E-7


    io:println(<decimal>  0x3eA3.4Eb2); // @output 16035.307403564453

    io:println(<decimal>  0x.4Eb2); // @output 0.307403564453125

    io:println(<decimal>  0X3eA3.4Eb2); // @output 16035.307403564453

    io:println(<decimal>  0X.4Eb2); // @output 0.307403564453125


    io:println(<decimal>  0x3eA3.4Eb2p45); // @output 5.6419222224581427E+17

    io:println(<decimal>  0x3eA3.4Eb2P45); // @output 5.6419222224581427E+17

    io:println(<decimal>  0x.4Eb2p45); // @output 10815801393152

    io:println(<decimal>  0x.4Eb2P45); // @output 10815801393152

    io:println(<decimal>  0X3eA3.4Eb2p45); // @output 5.6419222224581427E+17

    io:println(<decimal>  0X3eA3.4Eb2P45); // @output 5.6419222224581427E+17

    io:println(<decimal>  0X.4Eb2p45); // @output 10815801393152

    io:println(<decimal>  0X.4Eb2P45); // @output 10815801393152


    io:println(<decimal>  0x3eA3.4Eb2p+45); // @output 5.6419222224581427E+17

    io:println(<decimal>  0x3eA3.4Eb2P-45); // @output 4.55750847651315E-10

    io:println(<decimal>  0x.4Eb2p+45); // @output 10815801393152

    io:println(<decimal>  0x.4Eb2P-45); // @output 8.736934786757189E-15

    io:println(<decimal>  0X3eA3.4Eb2p+45); // @output 5.6419222224581427E+17

    io:println(<decimal>  0X3eA3.4Eb2P-45); // @output 4.55750847651315E-10

    io:println(<decimal>  0X.4Eb2p+45); // @output 10815801393152

    io:println(<decimal>  0X.4Eb2P-45); // @output 8.736934786757189E-15
}

Test-Case: output
Description: Test HexFloatingPointLiteral with valid type cast to floating point type.
Labels: decimal, float, HexFloatingPointLiteral, type-cast-expr, union-type

function init() {
    io:println(<decimal|float> 0x3eA3p34); // @output 2.7547920236544E14

    io:println(<decimal|float> 0x3eA3P34); // @output 2.7547920236544E14

    io:println(<decimal|float> 0X3eA3p34); // @output 2.7547920236544E14

    io:println(<decimal|float> 0X3eA3P34); // @output 2.7547920236544E14

    io:println(<decimal|float> 0x3eA3p+34); // @output 2.7547920236544E14

    io:println(<decimal|float> 0x3eA3P-34); // @output 9.333598427474499E-7

    io:println(<decimal|float> 0X3eA3p+34); // @output 2.7547920236544E14

    io:println(<decimal|float> 0X3eA3P-34); // @output 9.333598427474499E-7


    io:println(<decimal|float> 0x3eA3.4Eb2); // @output 16035.307403564453

    io:println(<decimal|float> 0x.4Eb2); // @output 0.307403564453125

    io:println(<decimal|float> 0X3eA3.4Eb2); // @output 16035.307403564453

    io:println(<decimal|float> 0X.4Eb2); // @output 0.307403564453125


    io:println(<decimal|float> 0x3eA3.4Eb2p45); // @output 5.6419222224581427E17

    io:println(<decimal|float> 0x3eA3.4Eb2P45); // @output 5.6419222224581427E17

    io:println(<decimal|float> 0x.4Eb2p45); // @output 1.0815801393152E13

    io:println(<decimal|float> 0x.4Eb2P45); // @output 1.0815801393152E13

    io:println(<decimal|float> 0X3eA3.4Eb2p45); // @output 5.6419222224581427E17

    io:println(<decimal|float> 0X3eA3.4Eb2P45); // @output 5.6419222224581427E17

    io:println(<decimal|float> 0X.4Eb2p45); // @output 1.0815801393152E13

    io:println(<decimal|float> 0X.4Eb2P45); // @output 1.0815801393152E13


    io:println(<decimal|float> 0x3eA3.4Eb2p+45); // @output 5.6419222224581427E17

    io:println(<decimal|float> 0x3eA3.4Eb2P-45); // @output 4.55750847651315E-10

    io:println(<decimal|float> 0x.4Eb2p+45); // @output 1.0815801393152E13

    io:println(<decimal|float> 0x.4Eb2P-45); // @output 8.736934786757189E-15

    io:println(<decimal|float> 0X3eA3.4Eb2p+45); // @output 5.6419222224581427E17

    io:println(<decimal|float> 0X3eA3.4Eb2P-45); // @output 4.55750847651315E-10

    io:println(<decimal|float> 0X.4Eb2p+45); // @output 1.0815801393152E13

    io:println(<decimal|float> 0X.4Eb2P-45); // @output 8.736934786757189E-15
}

Test-Case: error
Description: Test the basic type when the floating point literal is a HexFloatingPointLiteral
Labels: decimal, HexFloatingPointLiteral, int

function errorFunction() {
    decimal _ = 0x3eA3p34; // @error expected 'decimal', found 'float'
    decimal _ = 0x3eA3p+34; // @error expected 'decimal', found 'float'
    decimal _ = 0X3eA3P-34; // @error expected 'decimal', found 'float'
    decimal _ = 0x3eA3.4Eb2; // @error expected 'decimal', found 'float'
    decimal _ = 0x.4Eb2; // @error expected 'decimal', found 'float'
    decimal _ = 0x4Eb2.; // @error expected 'decimal', found 'float'
    decimal _ = 0x3eA3.4Eb2p45; // @error expected 'decimal', found 'float'
    decimal _ = 0x.4Eb2p45; // @error expected 'decimal', found 'float'
    decimal _ = 0x3eA3.4Eb2p+45; // @error expected 'decimal', found 'float'
    decimal _ = 0x.4Eb2p-45; // @error expected 'decimal', found 'float'
    int _ = 0x3eA3p34; // @error expected 'int', found 'float'
}

Test-Case: output
Description: Test HexFloatingPointLiteral with return statement.
Labels: HexFloatingPointLiteral, return-stmt, union-type

function init() {
    io:println(printHexFloatingPoint13()); // @output 16035.0

    io:println(printHexFloatingPoint1()); // @output 2.7547920236544E14

    io:println(printHexFloatingPoint2()); // @output 2.7547920236544E14

    io:println(printHexFloatingPoint3()); // @output 9.333598427474499E-7

    io:println(printHexFloatingPoint4()); // @output 16035.307403564453

    io:println(printHexFloatingPoint5()); // @output 0.307403564453125

    io:println(printHexFloatingPoint6()); // @output 20146.0

    io:println(printHexFloatingPoint7()); // @output 1.0815801393152E13

    io:println(printHexFloatingPoint8()); // @output 5.6419222224581427E17

    io:println(printHexFloatingPoint9()); // @output 5.6418140644442112E17

    io:println(printHexFloatingPoint10()); // @output 5.6419222224581427E17

    io:println(printHexFloatingPoint11()); // @output 8.736934786757189E-15

    io:println(printHexFloatingPoint12()); // @output 4.5574211071652826E-10
}

function printHexFloatingPoint13() returns float|decimal {
    return 0x3eA3;
}

function printHexFloatingPoint1() returns float|decimal {
    return 0x3eA3p34;
}

function printHexFloatingPoint2() returns float|decimal {
    return 0x3eA3p+34;
}

function printHexFloatingPoint3() returns float|decimal {
    return 0X3eA3p-34;
}

function printHexFloatingPoint4() returns float|decimal {
    return 0x3eA3.4Eb2;
}

function printHexFloatingPoint5() returns float|decimal {
    return 0X.4Eb2;
}

function printHexFloatingPoint6() returns float|decimal {
    return 0X4Eb2.0;
}

function printHexFloatingPoint7() returns float|decimal {
    return 0x.4Eb2P45;
}

function printHexFloatingPoint8() returns float|decimal {
    return 0X3eA3.4Eb2p45;
}

function printHexFloatingPoint9() returns float|decimal {
    return 0X3eA3.0p45;
}

function printHexFloatingPoint10() returns float|decimal {
    return 0x3eA3.4Eb2p+45;
}

function printHexFloatingPoint11() returns float|decimal {
    return 0x.4Eb2P-45;
}

function printHexFloatingPoint12() returns float|decimal {
    return 0X3eA3.0p-45;
}

Test-Case: output
Description: Test HexFloatingPointLiteral with return statement using variable reference.
Labels: HexFloatingPointLiteral, return-stmt, union-type

function init() {
    io:println(printFloatingPoint(0x3eA3)); // @output 16035.0

    io:println(printFloatingPoint(0x3eA3p34)); // @output 2.7547920236544E14

    io:println(printFloatingPoint(0x3eA3P34)); // @output 2.7547920236544E14

    io:println(printFloatingPoint(0X3eA3p34)); // @output 2.7547920236544E14

    io:println(printFloatingPoint(0X3eA3P34)); // @output 2.7547920236544E14

    io:println(printFloatingPoint(0x3eA3p+34)); // @output 2.7547920236544E14

    io:println(printFloatingPoint(0x3eA3P-34)); // @output 9.333598427474499E-7

    io:println(printFloatingPoint(0X3eA3p+34)); // @output 2.7547920236544E14

    io:println(printFloatingPoint(0X3eA3P-34)); // @output 9.333598427474499E-7


    io:println(printFloatingPoint(0x3eA3.4Eb2)); // @output 16035.307403564453

    io:println(printFloatingPoint(0x.4Eb2)); // @output 0.307403564453125

    io:println(printFloatingPoint(0X3eA3.4Eb2)); // @output 16035.307403564453

    io:println(printFloatingPoint(0X.4Eb2)); // @output 0.307403564453125


    io:println(printFloatingPoint(0x3eA3.4Eb2p45)); // @output 5.6419222224581427E17

    io:println(printFloatingPoint(0x3eA3.4Eb2P45)); // @output 5.6419222224581427E17

    io:println(printFloatingPoint(0x.4Eb2p45)); // @output 1.0815801393152E13

    io:println(printFloatingPoint(0x.4Eb2P45)); // @output 1.0815801393152E13

    io:println(printFloatingPoint(0X3eA3.4Eb2p45)); // @output 5.6419222224581427E17

    io:println(printFloatingPoint(0X3eA3.4Eb2P45)); // @output 5.6419222224581427E17

    io:println(printFloatingPoint(0X.4Eb2p45)); // @output 1.0815801393152E13

    io:println(printFloatingPoint(0X.4Eb2P45)); // @output 1.0815801393152E13


    io:println(printFloatingPoint(0x3eA3.4Eb2p+45)); // @output 5.6419222224581427E17

    io:println(printFloatingPoint(0x3eA3.4Eb2P-45)); // @output 4.55750847651315E-10

    io:println(printFloatingPoint(0x.4Eb2p+45)); // @output 1.0815801393152E13

    io:println(printFloatingPoint(0x.4Eb2P-45)); // @output 8.736934786757189E-15

    io:println(printFloatingPoint(0X3eA3.4Eb2p+45)); // @output 5.6419222224581427E17

    io:println(printFloatingPoint(0X3eA3.4Eb2P-45)); // @output 4.55750847651315E-10

    io:println(printFloatingPoint(0X.4Eb2p+45)); // @output 1.0815801393152E13

    io:println(printFloatingPoint(0X.4Eb2P-45)); // @output 8.736934786757189E-15
}


function printFloatingPoint(float|decimal x) returns float|decimal {
    return x;
}

Test-Case: output
Description: Test HexFloatingPointLiteral with toBalString().
Labels: HexFloatingPointLiteral, value:toBalString

function init() {
    io:println((0x3eA3).toBalString()); // @output 16035

    io:println((0x3eA3p34).toBalString()); // @output 2.7547920236544E14

    io:println((0x3eA3P34).toBalString()); // @output 2.7547920236544E14

    io:println((0X3eA3p34).toBalString()); // @output 2.7547920236544E14

    io:println((0X3eA3P34).toBalString()); // @output 2.7547920236544E14

    io:println((0x3eA3p+34).toBalString()); // @output 2.7547920236544E14

    io:println((0x3eA3P-34).toBalString()); // @output 9.333598427474499E-7

    io:println((0X3eA3p+34).toBalString()); // @output 2.7547920236544E14

    io:println((0X3eA3P-34).toBalString()); // @output 9.333598427474499E-7


    io:println((0x3eA3.4Eb2).toBalString()); // @output 16035.307403564453

    io:println((0x.4Eb2).toBalString()); // @output 0.307403564453125

    io:println((0X3eA3.4Eb2).toBalString()); // @output 16035.307403564453

    io:println((0X.4Eb2).toBalString()); // @output 0.307403564453125


    io:println((0x3eA3.4Eb2p45).toBalString()); // @output 5.6419222224581427E17

    io:println((0x3eA3.4Eb2P45).toBalString()); // @output 5.6419222224581427E17

    io:println((0x.4Eb2p45).toBalString()); // @output 1.0815801393152E13

    io:println((0x.4Eb2P45).toBalString()); // @output 1.0815801393152E13

    io:println((0X3eA3.4Eb2p45).toBalString()); // @output 5.6419222224581427E17

    io:println((0X3eA3.4Eb2P45).toBalString()); // @output 5.6419222224581427E17

    io:println((0X.4Eb2p45).toBalString()); // @output 1.0815801393152E13

    io:println((0X.4Eb2P45).toBalString()); // @output 1.0815801393152E13


    io:println((0x3eA3.4Eb2p+45).toBalString()); // @output 5.6419222224581427E17

    io:println((0x3eA3.4Eb2P-45).toBalString()); // @output 4.55750847651315E-10

    io:println((0x.4Eb2p+45).toBalString()); // @output 1.0815801393152E13

    io:println((0x.4Eb2P-45).toBalString()); // @output 8.736934786757189E-15

    io:println((0X3eA3.4Eb2p+45).toBalString()); // @output 5.6419222224581427E17

    io:println((0X3eA3.4Eb2P-45).toBalString()); // @output 4.55750847651315E-10

    io:println((0X.4Eb2p+45).toBalString()); // @output 1.0815801393152E13

    io:println((0X.4Eb2P-45).toBalString()); // @output 8.736934786757189E-15
}

Test-Case: output
Description: Test HexFloatingPointLiteral with toString().
Labels: HexFloatingPointLiteral, value:toString

function init() {

    io:println((0x3eA3p34).toString()); // @output 2.7547920236544E14

    io:println((0x3eA3P34).toString()); // @output 2.7547920236544E14

    io:println((0X3eA3p34).toString()); // @output 2.7547920236544E14

    io:println((0X3eA3P34).toString()); // @output 2.7547920236544E14

    io:println((0x3eA3p+34).toString()); // @output 2.7547920236544E14

    io:println((0x3eA3P-34).toString()); // @output 9.333598427474499E-7

    io:println((0X3eA3p+34).toString()); // @output 2.7547920236544E14

    io:println((0X3eA3P-34).toString()); // @output 9.333598427474499E-7


    io:println((0x3eA3.4Eb2).toString()); // @output 16035.307403564453

    io:println((0x.4Eb2).toString()); // @output 0.307403564453125

    io:println((0X3eA3.4Eb2).toString()); // @output 16035.307403564453

    io:println((0X.4Eb2).toString()); // @output 0.307403564453125


    io:println((0x3eA3.4Eb2p45).toString()); // @output 5.6419222224581427E17

    io:println((0x3eA3.4Eb2P45).toString()); // @output 5.6419222224581427E17

    io:println((0x.4Eb2p45).toString()); // @output 1.0815801393152E13

    io:println((0x.4Eb2P45).toString()); // @output 1.0815801393152E13

    io:println((0X3eA3.4Eb2p45).toString()); // @output 5.6419222224581427E17

    io:println((0X3eA3.4Eb2P45).toString()); // @output 5.6419222224581427E17

    io:println((0X.4Eb2p45).toString()); // @output 1.0815801393152E13

    io:println((0X.4Eb2P45).toString()); // @output 1.0815801393152E13


    io:println((0x3eA3.4Eb2p+45).toString()); // @output 5.6419222224581427E17

    io:println((0x3eA3.4Eb2P-45).toString()); // @output 4.55750847651315E-10

    io:println((0x.4Eb2p+45).toString()); // @output 1.0815801393152E13

    io:println((0x.4Eb2P-45).toString()); // @output 8.736934786757189E-15

    io:println((0X3eA3.4Eb2p+45).toString()); // @output 5.6419222224581427E17

    io:println((0X3eA3.4Eb2P-45).toString()); // @output 4.55750847651315E-10

    io:println((0X.4Eb2p+45).toString()); // @output 1.0815801393152E13

    io:println((0X.4Eb2P-45).toString()); // @output 8.736934786757189E-15
}

Test-Case: output
Description: Test HexFloatingPointLiteral with function call.
Labels: decimal, float, function-call-expr, HexFloatingPointLiteral

function init() {
    printFloatingPoint(0x3eA3); // @output 16035.0

    printFloatingPoint(0x3eA3p34); // @output 2.7547920236544E14

    printFloatingPoint(0x3eA3P34); // @output 2.7547920236544E14

    printFloatingPoint(0X3eA3p34); // @output 2.7547920236544E14

    printFloatingPoint(0X3eA3P34); // @output 2.7547920236544E14

    printFloatingPoint(0x3eA3p+34); // @output 2.7547920236544E14

    printFloatingPoint(0x3eA3P-34); // @output 9.333598427474499E-7

    printFloatingPoint(0X3eA3p+34); // @output 2.7547920236544E14

    printFloatingPoint(0X3eA3P-34); // @output 9.333598427474499E-7


    printFloatingPoint(0x3eA3.4Eb2); // @output 16035.307403564453

    printFloatingPoint(0x.4Eb2); // @output 0.307403564453125

    printFloatingPoint(0X3eA3.4Eb2); // @output 16035.307403564453

    printFloatingPoint(0X.4Eb2); // @output 0.307403564453125


    printFloatingPoint(0x3eA3.4Eb2p45); // @output 5.6419222224581427E17

    printFloatingPoint(0x3eA3.4Eb2P45); // @output 5.6419222224581427E17

    printFloatingPoint(0x.4Eb2p45); // @output 1.0815801393152E13

    printFloatingPoint(0x.4Eb2P45); // @output 1.0815801393152E13

    printFloatingPoint(0X3eA3.4Eb2p45); // @output 5.6419222224581427E17

    printFloatingPoint(0X3eA3.4Eb2P45); // @output 5.6419222224581427E17

    printFloatingPoint(0X.4Eb2p45); // @output 1.0815801393152E13

    printFloatingPoint(0X.4Eb2P45); // @output 1.0815801393152E13


    printFloatingPoint(0x3eA3.4Eb2p+45); // @output 5.6419222224581427E17

    printFloatingPoint(0x3eA3.4Eb2P-45); // @output 4.55750847651315E-10

    printFloatingPoint(0x.4Eb2p+45); // @output 1.0815801393152E13

    printFloatingPoint(0x.4Eb2P-45); // @output 8.736934786757189E-15

    printFloatingPoint(0X3eA3.4Eb2p+45); // @output 5.6419222224581427E17

    printFloatingPoint(0X3eA3.4Eb2P-45); // @output 4.55750847651315E-10

    printFloatingPoint(0X.4Eb2p+45); // @output 1.0815801393152E13

    printFloatingPoint(0X.4Eb2P-45); // @output 8.736934786757189E-15
}

function printFloatingPoint(float|decimal x) {
    io:println(x);
}

Test-Case: output
Description: Test the basic type of HexFloatingPointLiteral.
Labels: any, decimal, float, HexFloatingPointLiteral, int, is-expr, union-type

function init() {
     isCheck(0x3eA3p34); // @output false
                         // @output true
                         // @output false
                         // @output true

     isCheck(0X3eA3p34); // @output false
                         // @output true
                         // @output false
                         // @output true

     isCheck(0X3eA3P34); // @output false
                         // @output true
                         // @output false
                         // @output true

     isCheck(0x3eA3P34); // @output false
                         // @output true
                         // @output false
                         // @output true

     isCheck(0x3eA3p+34); // @output false
                          // @output true
                          // @output false
                          // @output true

     isCheck(0x3eA3P-34); // @output false
                          // @output true
                          // @output false
                          // @output true

     isCheck(0X3eA3p+34); // @output false
                          // @output true
                          // @output false
                          // @output true

     isCheck(0X3eA3P-34); // @output false
                          // @output true
                          // @output false
                          // @output true

     isCheck(0x3eA3.4Eb2); // @output false
                           // @output true
                           // @output false
                           // @output true

     isCheck(0X.4Eb2); // @output false
                       // @output true
                       // @output false
                       // @output true

     isCheck(0x3eA3.0); // @output false
                        // @output true
                        // @output false
                        // @output true

     isCheck(0x3eA3.4Eb2p45); // @output false
                              // @output true
                              // @output false
                              // @output true

     isCheck(0x.4Eb2P45); // @output false
                          // @output true
                          // @output false
                          // @output true

     isCheck(0x3eA3.0p12); // @output false
                           // @output true
                           // @output false
                           // @output true

     isCheck(0x3eA3.4Eb2p+45); // @output false
                               // @output true
                               // @output false
                               // @output true

     isCheck(0x.4Eb2P-45); // @output false
                           // @output true
                           // @output false
                           // @output true

     isCheck(0x3eA3.0p-12); // @output false
                            // @output true
                            // @output false
                            // @output true
}

function isCheck(any x) {
    io:println(x is int);
    io:println(x is float);
    io:println(x is decimal);
    io:println(x is decimal|float);
}

Test-Case: output
Description: Test hex floating point literal with floating point type descriptor.
Labels: decimal, float, HexFloatingPointLiteral, union-type

function init() {
    float|decimal c = 0x240aDfBcEe;
    io:println(c); // @output 1.5480125771E11

    c = 0x240aDfBcEep4;
    io:println(c); // @output 2.47682012336E12

    c = 0x240aDfBcEeP4;
    io:println(c); // @output 2.47682012336E12

    c = 0x240aDfBcEep+4;
    io:println(c); // @output 2.47682012336E12

    c = 0x240aDfBcEeP-4;
    io:println(c); // @output 9.675078606875E9

    c = 0x240aDfBcEep-0;
    io:println(c); // @output 1.5480125771E11

    c = 0x240aDfBcEeP+0;
    io:println(c); // @output 1.5480125771E11

    c = 0x240aDfBcEep-324;
    io:println(c); // @output 4.529558674359502E-87

    c = 0x240aDfBcEeP+205;
    io:println(c); // @output 7.960192970026859E72

    c = 0X0.0;
    io:println(c); // @output 0.0

    c = 0X9.9;
    io:println(c); // @output 9.5625

    c = 0X206.50743;
    io:println(c); // @output 518.3142728805542

    c = 0Xa.a;
    io:println(c); // @output 10.625

    c = 0XA.A;
    io:println(c); // @output 10.625

    c = 0XA.a;
    io:println(c); // @output 10.625

    c = 0Xa.A;
    io:println(c); // @output 10.625

    c = 0XaEbcD.0EaD;
    io:println(c); // @output 715725.0573272705

    c = 0XaE04bcD.0E91aD;
    io:println(c); // @output 1.8247162905691034E8

    c = 0X.0;
    io:println(c); // @output 0.0

    c = 0X.1;
    io:println(c); // @output 0.0625

    c = 0X.2345;
    io:println(c); // @output 0.1377716064453125

    c = 0X.A;
    io:println(c); // @output 0.625

    c = 0X.a;
    io:println(c); // @output 0.625

    c = 0x.aBdECFF;
    io:println(c); // @output 0.671368595212698

    c = 0x.aBd0E12C9FF4;
    io:println(c); // @output 0.6711559995600993

    c = 0X.2p+0;
    io:println(c); // @output 0.125

    c = 0X.AP-0;
    io:println(c); // @output 0.625

    c = 0X.ap-0;
    io:println(c); // @output 0.625

    c = 0x.263567p+46;
    io:println(c); // @output 1.0502700793856E13

    c = 0X.AEDP-46;
    io:println(c); // @output 9.704043124614259E-15

    c = 0X.aedp-46;
    io:println(c); // @output 9.704043124614259E-15

    c = 0x.1BeAP+948;
    io:println(c); // @output 2.594292682612851E284

    c = 0X.0EfCap-456;
    io:println(c); // @output 3.1462367457512917E-139

    c = 0x0.0p-0;
    io:println(c); // @output 0.0

    c = 0x0.0P+0;
    io:println(c); // @output 0.0

    c = 0x9.4p-1;
    io:println(c); // @output 4.625

    c = 0x9546.4748p+126;
    io:println(c); // @output 3.250911279637454E42

    c = 0xa.aP-1;
    io:println(c); // @output 5.3125

    c = 0Xa.ap+1;
    io:println(c); // @output 21.25

    c = 0xA.aP-12;
    io:println(c); // @output 0.002593994140625

    c = 0XA.ap+12;
    io:println(c); // @output 43520.0

    c = 0xaeb.acdfP-302;
    io:println(c); // @output 3.431057809225094E-88

    c = 0xABC.CEEFFp+302;
    io:println(c); // @output 2.2397685993041007E94

    c = 0xAbC.0eEfFp-453;
    io:println(c); // @output 1.1815113934486016E-133

    c = 0xAb12C.0e9E1f0FP+45;
    io:println(c); // @output 2.465425448163409E19

    c = 0x3e3.0;
    io:println(c); // @output 995.0

    c = 0x3e3.0p23;
    io:println(c); // @output 8.34666496E9

    c = 0x3e3.0P23;
    io:println(c); // @output 8.34666496E9

    c = 0x3e3.0p+23;
    io:println(c); // @output 8.34666496E9

    c = 0x3e3.0p-23;
    io:println(c); // @output 1.1861324310302734E-4

    c = 0x3e3.0P+23;
    io:println(c); // @output 8.34666496E9

    c = 0x3e3.0P-23;
    io:println(c); // @output 1.1861324310302734E-4
}

Test-Case: error
Description: Test hex indicator with float type descriptor.
Labels: float, HexFloatingPointLiteral

function errorFunction() {
    float _ = 0xFFFFFFFFFFFFFFFF; // @error value is out of range for 'float'
    float _ = 0xabc435de769FEAB0; // @error value is out of range for 'float'
    float _ = 0xaaaaaaaaaaaaaaa0; // @error value is out of range for 'float'
    float _ = 0xAAAAAAAAAAAAAAA0; // @error value is out of range for 'float'
}

Test-Case: output
Description: Test hex floating point literal with float type descriptor.
Labels: float, HexFloatingPointLiteral

function init() {

    float c = 0x0;
    io:println(c); // @output 0.0

    c = 0X9;
    io:println(c); // @output 9.0

    c = 0X2409;
    io:println(c); // @output 9225.0

    c = 0X240af;
    io:println(c); // @output 147631.0

    c = 0X240AF;
    io:println(c); // @output 147631.0

    c = 0x240aDfBcEe;
    io:println(c); // @output 1.5480125771E11

    c = 0x240aDfBcEep4;
    io:println(c); // @output 2.47682012336E12

    c = 0x240aDfBcEeP4;
    io:println(c); // @output 2.47682012336E12

    c = 0x240aDfBcEep+4;
    io:println(c); // @output 2.47682012336E12

    c = 0x240aDfBcEeP-4;
    io:println(c); // @output 9.675078606875E9

    c = 0x240aDfBcEep-0;
    io:println(c); // @output 1.5480125771E11

    c = 0x240aDfBcEeP+0;
    io:println(c); // @output 1.5480125771E11

    c = 0x240aDfBcEep-324;
    io:println(c); // @output 4.529558674359502E-87

    c = 0x240aDfBcEeP+205;
    io:println(c); // @output 7.960192970026859E72

    c = 0X0.0;
    io:println(c); // @output 0.0

    c = 0X9.9;
    io:println(c); // @output 9.5625

    c = 0X206.50743;
    io:println(c); // @output 518.3142728805542

    c = 0Xa.a;
    io:println(c); // @output 10.625

    c = 0XA.A;
    io:println(c); // @output 10.625

    c = 0XA.a;
    io:println(c); // @output 10.625

    c = 0Xa.A;
    io:println(c); // @output 10.625

    c = 0XaEbcD.0EaD;
    io:println(c); // @output 715725.0573272705

    c = 0XaE04bcD.0E91aD;
    io:println(c); // @output 1.8247162905691034E8

    c = 0X.0;
    io:println(c); // @output 0.0

    c = 0X.1;
    io:println(c); // @output 0.0625

    c = 0X.2345;
    io:println(c); // @output 0.1377716064453125

    c = 0X.A;
    io:println(c); // @output 0.625

    c = 0X.a;
    io:println(c); // @output 0.625

    c = 0x.aBdECFF;
    io:println(c); // @output 0.671368595212698

    c = 0x.aBd0E12C9FF4;
    io:println(c); // @output 0.6711559995600993

    c = 0X.2p+0;
    io:println(c); // @output 0.125

    c = 0X.AP-0;
    io:println(c); // @output 0.625

    c = 0X.ap-0;
    io:println(c); // @output 0.625

    c = 0x.263567p+46;
    io:println(c); // @output 1.0502700793856E13

    c = 0X.AEDP-46;
    io:println(c); // @output 9.704043124614259E-15

    c = 0X.aedp-46;
    io:println(c); // @output 9.704043124614259E-15

    c = 0x.1BeAP+948;
    io:println(c); // @output 2.594292682612851E284

    c = 0X.0EfCap-456;
    io:println(c); // @output 3.1462367457512917E-139

    c = 0x0.0p-0;
    io:println(c); // @output 0.0

    c = 0x0.0P+0;
    io:println(c); // @output 0.0

    c = 0x9.4p-1;
    io:println(c); // @output 4.625

    c = 0x9546.4748p+126;
    io:println(c); // @output 3.250911279637454E42

    c = 0xa.aP-1;
    io:println(c); // @output 5.3125

    c = 0Xa.ap+1;
    io:println(c); // @output 21.25

    c = 0xA.aP-12;
    io:println(c); // @output 0.002593994140625

    c = 0XA.ap+12;
    io:println(c); // @output 43520.0

    c = 0xaeb.acdfP-302;
    io:println(c); // @output 3.431057809225094E-88

    c = 0xABC.CEEFFp+302;
    io:println(c); // @output 2.2397685993041007E94

    c = 0xAbC.0eEfFp-453;
    io:println(c); // @output 1.1815113934486016E-133

    c = 0xAb12C.0e9E1f0FP+45;
    io:println(c); // @output 2.465425448163409E19
}

Test-Case: error
Description: Test hex floating point literal with decimal type descriptor.
Labels: decimal, HexFloatingPointLiteral

function errorFunction() {
    decimal _ = 0x1.0fp+10; // @error hex floating point literal is incompatible  with 'decimal'

    decimal _ = 0x1p-5; // @error hex floating point literal is incompatible  with 'decimal'

    decimal _ = 0x1.0; // @error hex floating point literal is incompatible  with 'decimal'
}

Test-Case: output
Description: Test hex floating point literal type narrowing with floating point type descriptor.
Labels: decimal, float, HexFloatingPointLiteral, if-else-stmt, is-expr

function init() {
    float|decimal a = 0x1.0;

    if (a is decimal) {
        io:println("Not Decimal");
    } else {
        float b = a;
        io:println(b); // @output 1.0
    }
}

Test-Case: error
Description: Test out of range hex floating point literal with decimal type descriptor.
Labels: decimal, HexFloatingPointLiteral

function errorFunction() {
    decimal _ = 0x1.0fffffffffffffp+1024; // @error '0x1.0fffffffffffffp+1024' is out of range for 'float'

    decimal _ = 0x1p-1075; // @error '0x1p-1075' is out of range for 'float'
}

Test-Case: output
Description: Test floating point literal max and min with float type descriptor.
Labels: float, HexFloatingPointLiteral

function init() {
    float d = 1.7976931348623157E+308;
    io:println(d); // @output 1.7976931348623157E308

    d = 4.94065645841246544E-324;
    io:println(d); // @output 4.9E-324

    d = 0x1.0fffffffffffffp+1023;
    io:println(d); // @output 9.550244778956053E307

    d = 0x1p-1074;
    io:println(d); // @output 4.9E-324

    d = 0x0p-1074;
    io:println(d); // @output 0.0

    d = 0x0p-1075;
    io:println(d); // @output 0.0
}

Test-Case: error
Description: Test invalid hex floating point literal.
Fail-Issue: ballerina-platform/ballerina-lang#39557
Labels: decimal, float, HexFloatingPointLiteral, union-type

function errorFunction() {
    float|decimal _ = 0x 3eA3.4Eb2p+45; // @error invalid HexFloatingPointLiteral

    float|decimal _ = 0x=4Eb2P-45; // @error invalid HexFloatingPointLiteral

    float|decimal _ = 0x:4Eb2P-45; // @error invalid HexFloatingPointLiteral

    float|decimal _ = 0x,4Eb2P-45; // @error invalid HexFloatingPointLiteral

    float|decimal _ = 0x 3eA3 .4Eb2 p45; // @error invalid HexFloatingPointLiteral

    float|decimal _ = 0x3eA3 .4Eb2; // @error invalid HexFloatingPointLiteral
}

Test-Case: parser-error
Description: Test invalid hex floating point literal.
Labels: decimal, float, HexFloatingPointLiteral, union-type

function errorFunction() {
    float|decimal _ = 3eA3p34; // @error invalid HexFloatingPointLiteral due to missing HexIndicator

    float|decimal _ = 345eA; // @error invalid HexFloatingPointLiteral due to missing HexIndicator

    float|decimal _ = 0x3 eA3p34; // @error invalid HexFloatingPointLiteral due to unnecessary space

    float|decimal _ = 0X3eA3 p34; // @error invalid HexFloatingPointLiteral due to unnecessary space

    float|decimal _ = 0X3eA3p 34; // @error invalid HexFloatingPointLiteral due to unnecessary space

    float|decimal _ = 0X3eA3pAf; // @error invalid HexFloatingPointLiteral due to invalid HexExponent

    float|decimal _ = 0aBV6p34; // @error invalid HexFloatingPointLiteral due to invalid HexNumber

    float|decimal _ = 0XVVzp34; // @error invalid HexFloatingPointLiteral due to invalid HexNumber

    float|decimal _ = 0X3eApVB; // @error invalid HexFloatingPointLiteral due to invalid HexExponent

    float|decimal _ = 0x3eA3p++34; // @error invalid HexFloatingPointLiteral due to invalid HexExponent

    float|decimal _ = 0x3eA3p+3dS4; // @error invalid HexFloatingPointLiteral due to invalid HexExponent

    float|decimal _ = 0x3eA3p--34; // @error invalid HexFloatingPointLiteral due to invalid HexExponent

    float|decimal _ = 0x3eA3p-+34; // @error invalid HexFloatingPointLiteral due to invalid HexExponent

    float|decimal _ = 0x3eA3p.34; // @error invalid HexFloatingPointLiteral due to invalid sign in HexExponent

    float|decimal _ = 0x3eA3p+ 34; // @error invalid HexFloatingPointLiteral due to unnecessary space

    float|decimal _ = 0x3eA3p+34f; // @error invalid HexFloatingPointLiteral due to unnecessary suffix

    float|decimal _ = 0x3eA3p+34F; // @error invalid HexFloatingPointLiteral due to unnecessary suffix

    float|decimal _ = 0x3eA3p+34D; // @error invalid HexFloatingPointLiteral due to unnecessary suffix

    float|decimal _ = 0x3eA3p+34d; // @error invalid HexFloatingPointLiteral due to unnecessary suffix

    float|decimal _ = 0x3eA3H-34; // @error invalid HexFloatingPointLiteral

    float|decimal _ = 8x3eA3p67; // @error invalid HexFloatingPointLiteral due to invalid HexIndicator

    float|decimal _ = 0Z3eA3p67; // @error invalid HexFloatingPointLiteral due to invalid HexIndicator

    float|decimal _ = 0x3eA3. 4Eb2; // @error invalid HexFloatingPointLiteral due to unnecessary space

    float|decimal _ = 0x3e3=4Eb2p45; // @error invalid HexFloatingPointLiteral

    float|decimal _ = 0x4E,b2P-45; // @error invalid HexFloatingPointLiteral

    float|decimal _ = 0x4E:b2P-45; // @error invalid HexFloatingPointLiteral

    float|decimal _ = .0x3e3; // @error invalid HexFloatingPointLiteral

    float|decimal _ = 0x3e3 .0p23; // @error invalid HexFloatingPointLiteral due to unnecessary space

    float|decimal _ = 0x3e3. p23; // @error invalid HexFloatingPointLiteral due to unnecessary space

    float|decimal _ = 0x 3eA3p34; // @error invalid HexFloatingPointLiteral due to missing hex number after hex indicator

    float|decimal _ = 0x; // @error invalid HexFloatingPointLiteral due to missing hex number after hex indicator

    float|decimal _ = 0X; // @error invalid HexFloatingPointLiteral due to missing hex number after hex indicator

    float|decimal _ = 0Xp34; // @error invalid HexFloatingPointLiteral due to missing hex number after hex indicator

    float|decimal _ = 0x3eA3p-; // @error invalid HexFloatingPointLiteral due to missing digit after exponent indicator

    float|decimal _ = 0x3eA3p+; // @error invalid HexFloatingPointLiteral due to missing digit after exponent indicator

    float|decimal _ = 0x3eA3p; // @error invalid HexFloatingPointLiteral due to missing digit after exponent indicator

    float|decimal _ = 0X3eAp; // @error invalid HexFloatingPointLiteral

    float|decimal _ = 0x3eA3p=34; // @error invalid HexFloatingPointLiteral

    float|decimal _ = 0x3eA3p:34; // @error invalid HexFloatingPointLiteral

    float|decimal _ = 0x3eA3p,34; // @error invalid HexFloatingPointLiteral
}
