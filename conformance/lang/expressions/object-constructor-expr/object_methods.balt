Test-Case: output
Description: Test defining a method of an object.
Labels: array-type, field-access-expr, int, list-constructor-expr, method-call-expr, module-type-defn,
        object-constructor-expr, object-type

type ObjectType object {
    int[] val;
    function func1() returns int;
};

function init() {
    ObjectType obj = object {
        int[] val;

        function init() {
            self.val = [1, 2];
        }

        function func1() returns int {
            return 10;
        }
    };
    io:println(obj.val); // @output [1,2]
    io:println(obj.func1()); // @output 10
}

Test-Case: error
Description: Test defining mismatching method of an object at the object constructor.
Labels: array-type, field-access-expr, int, list-constructor-expr, method-call-expr, module-type-defn,
        object-constructor-expr, object-type

type ObjectType object {
    int[] val;
    function func1() returns int;
};

function errorFunction() {
    ObjectType obj = object { // @error incompatible types: expected 'ObjectType', found 'object { int[] val; function func1 () returns (string); }'
        int[] val;

        function init() {
            self.val = [1, 2];
        }

        function func1() returns string {
            return "A";
        }
    };
}

Test-Case: output
Description: Test defining methods of an object with meta data.
Fail-Issue: ballerina-platform/ballerina-lang#34859
Labels: annotation-decl, annotation, field-access-expr, module-type-defn, object-constructor-expr,
        record-type, string, type-cast-expr, typeof-expr, var

type Annot record {
    string a;
};

annotation Annot v1 on object function;

function init() {
    var obj = object {
        # This is a document.
        # It is for an object function.
        @v1 {
            a: "v1"
        }
        function f1() {
        }
    };

    Annot annot = <Annot>(typeof obj.f1).@v1;
    io:println(annot.a); // @output v1
}

Test-Case: output
Description: Test defining methods of an object with visibility qualifiers.
Labels: array-type, field-access-expr, int, list-constructor-expr, member-access-expr, method-call-expr, module-type-defn,
        object-constructor-expr, object-type

function init() {
    var obj =  object {
        private int[] val = [1, 2];

        private function func1() returns int {
            return self.val[0];
        }

        public function func2() returns int {
            return self.val[0];
        }
    };

    int a = obj.func2();
    io:println(a); // @output 1
}

Test-Case: error
Description: Test accessing private method of an object.
Fail-Issue: ballerina-platform/ballerina-lang#36417
Labels: array-type, field-access-expr, int, list-constructor-expr, member-access-expr, method-call-expr, module-type-defn,
        object-constructor-expr, object-type

function errorFunction() {
    var obj =  object {
        private int[] val = [1, 2];

        private function func1() returns int {
            return self.val[0];
        }
    };

    int _ = obj.func1(); // @error attempt to refer to non-accessible symbol and undefined method 'func1' in object 'object { private int[] val; private function func1 () returns (int); }'
}

Test-Case: output
Description: Test defining methods of an object with method qualifiers.
Labels: array-type, field-access-expr, int, isolated-function, list-constructor-expr, member-access-expr,
        method-call-expr, object-constructor-expr, string, var

function init() {
    var obj =  object {
        int[] val;

        function init() {
            self.val = [1, 2];
        }

        transactional function func1() returns int {
            return self.val[0];
        }

        public isolated function func2() returns string {
            return "ABC";
        }
    };
    io:println(obj.func2()); // @output ABC
}

Test-Case: output
Description: Test invoking object method with transactional qualifier in a transactional context.
Labels: commit-action, int, method-call-expr, object-constructor-expr, transaction-stmt, var

function init() returns error? {
    var obj = object {
        transactional function func1() returns int {
            return 1;
        }
    };
    transaction {
        io:println(obj.func1()); // @output 1
        check commit;
    }
}

Test-Case: error
Description: Test invoking object method with transactional qualifier in a non-transactional context.
Labels: int, method-call-expr, object-constructor-expr, var

function errorFunction() {
    var _ =  object {
        transactional function func1() returns int {
            return 1;
        }
        function func2() {
            _ = self.func1(); // @error invoking transactional function outside transactional scope is prohibited
        }
    };
}

Test-Case: output
Description: Test accessing fields and methods of the object within the method-defn-body using self variable.
Labels: additive-expr, array-type, field-access-expr, int, list-constructor-expr, member-access-expr, method-call-expr,
        object-constructor-expr, var

function init() {
    var obj =  object {
        int[] val;

        function init() {
            self.val = [1, 2];
        }

        function func1() returns int {
            return self.val[0];
        }

        function func2() returns int {
            return self.val[1] + self.func1();
        }
    };
    io:println(obj.func1()); // @output 1
    io:println(obj.func2()); // @output 3
}

Test-Case: error
Description: Test accessing fields and methods of the object within the method-defn-body without using self variable.
Labels: array-type, field-access-expr, int, list-constructor-expr, member-access-expr, method-call-expr, 
        object-constructor-expr, var

function errorFunction() {
    var obj =  object {
        int[] val;

        function init() {
            val = [1, 2]; // @error undefined symbol
        }

        function func1() returns int {
            return val[0]; // @error undefined symbol
        }

        function func2() returns int {
            return func1(); // @error undefined function
        }
    };
}

Test-Case: output
Description: Test accessing the self variable only within the scope of a lock statement, except when
             self is part of a field-access-expr of the form self.f, where f is the name of an isolated field and the
             object-constructor-expr is explicitly isolated.
Labels: additive-expr, array-type, field-access-expr, int, intersection-type, isolated-object, list-constructor-expr,
        lock-stmt, member-access-expr, method-call-expr, object-constructor-expr, readonly-type, var

function init() {
    var obj = isolated object {
        private int[] val = [1, 2];
        final readonly & int[] val2 = [3, 4];

        function func1() returns int {
            int sum = self.val2[1];
            lock {
                return sum + self.val[0];
            }
        }
    };
    io:println(obj.func1()); // @output 5
}

Test-Case: error
Description: Test accessing the self variable without using a lock statement when the object-constructor-expr is
             explicitly isolated and self is part of a field-access-expr of the form self.f, where f is the name of a
             non-isolated field.
Labels: array-type, field-access-expr, int, isolated-object, list-constructor-expr, member-access-expr, 
        object-constructor-expr, var

function errorFunction() {
    var _ = isolated object {
        private int[] val = [1, 2];

        function func1() returns int {
            return self.val[0]; // @error invalid access of a mutable field of an isolated object outside a lock statement
        }
    };
}

Test-Case: output
Description: Test whether an isolated method containing isolated-qual can call only isolated functions.
Labels: additive-expr, array-type, field-access-expr, int, intersection-type, isolated-function, list-constructor-expr,
        member-access-expr, method-call-expr, object-constructor-expr, readonly-type, var

function init() {
    var obj = object {
        final readonly & int[] val = [1, 2];

        isolated function func1() returns int {
            return self.val[0];
        }

        isolated function func2() returns int {
            return self.val[1] + self.func1();
        }
    };
    io:println(obj.func2()); // @output 3
}

Test-Case: error
Description: Test whether an isolated method containing isolated-qual can call only isolated functions.
Labels: additive-expr, array-type, field-access-expr, int, intersection-type, isolated-function, list-constructor-expr,
        member-access-expr, method-call-expr, object-constructor-expr, readonly-type, var

function errorFunction() {
    var _ = object {
        final readonly & int[] val = [1, 2];

        function func1() returns int {
            return self.val[0];
        }

        isolated function func2() returns int {
            return self.val[1] + self.func1(); // @error invalid invocation of a non-isolated function in an 'isolated' function
        }
    };
}

Test-Case: output
Description: Test whether an isolated method containing isolated-qual can only read an non-isolated module-level state
             if the variable is final or configurable and static type of the variable is a subtype of readonly or
             isolated object {}.
Labels: additive-expr, array-type, field-access-expr, int, intersection-type, isolated-function, list-constructor-expr,
        member-access-expr, method-call-expr, module-init-var-decl, object-constructor-expr, readonly-type, var

final int[] & readonly arr = [3, 4];

function init() {
    var obj = object {
        final readonly & int[] val = [1, 2];

        isolated function func1() returns int {
            return self.val[0];
        }

        isolated function func2() returns int {
            return self.val[1] + arr[1] + self.func1();
        }
    };
    io:println(obj.func2()); // @output 7
}

Test-Case: error
Description: Test whether an isolated method containing isolated-qual cannot mutate non-isolated module-level state.
Labels: additive-expr, array-type, field-access-expr, int, intersection-type, isolated-function, list-constructor-expr,
        member-access-expr, method-call-expr, module-init-var-decl, object-constructor-expr, readonly-type, var

int[] & readonly arr = [3, 4];

function errorFunction() {
    var _ = object {
        isolated function func1() returns int {
            return arr[1]; // @error invalid access of mutable storage in an isolated function
        }
    };
}

Test-Case: error
Description: Test whether an isolated method containing isolated-qual cannot mutate non-isolated module-level state.
Labels: int, isolated-function, module-init-var-decl, object-constructor-expr, var

int intVal = 10;

function errorFunction() {
    var _ = object {
        isolated function func1() {
            lock {
                intVal = 5; // @error invalid access of mutable storage in an isolated function
            }
        }
    };
}

Test-Case: output
Description: Test whether an isolated method containing isolated-qual can only refer captured variables if they are
             final and have a static type that is a subtype of readonly|isolated object {}.
Labels: explicit-anonymous-function-expr, int, isolated-function, method-call-expr, 
        object-constructor-expr, var

function init() {
    final int val = 10;
    var obj = object {
        isolated function func1() returns int => val;
    };
    io:println(obj.func1()); // @output 10
}

Test-Case: error
Description: Test whether an isolated method containing isolated-qual can only refer captured variables if they are
             final and have a static type that is a subtype of readonly|isolated object {}.
Labels: explicit-anonymous-function-expr, int, intersection-type, isolated-function, method-call-expr, 
        object-constructor-expr, readonly-type, var

function errorFunction() {
    int & readonly val = 10;
    var _ = object {
        isolated function func1() returns int => val; // @error invalid access of mutable storage in an isolated function
    };
}
