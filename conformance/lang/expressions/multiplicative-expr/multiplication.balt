Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for positive non-zero integers.
Labels: multiplicative-expr, int, DecimalNumber

function init() {
    int a = 1;
    int b = 2;
    int c = 4611686018427387903;
    int d = 6917529027641081853;
    int e = 9223372036854775807;

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 4611686018427387903
    io:println(a * d); // @output 6917529027641081853
    io:println(a * e); // @output 9223372036854775807

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 9223372036854775806

    io:println(c * a); // @output 4611686018427387903
    io:println(c * b); // @output 9223372036854775806

    io:println(d * a); // @output 6917529027641081853

    io:println(e * a); // @output 9223372036854775807
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for negative non-zero integers.
Labels: multiplicative-expr, int, DecimalNumber, unary-minus

function init() {
    int a = -1;
    int b = -2;
    int c = -4611686018427387903;
    int d = -6917529027641081853;
    int e = -9223372036854775807;

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 4611686018427387903
    io:println(a * d); // @output 6917529027641081853
    io:println(a * e); // @output 9223372036854775807

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 9223372036854775806

    io:println(c * a); // @output 4611686018427387903
    io:println(c * b); // @output 9223372036854775806

    io:println(d * a); // @output 6917529027641081853

    io:println(e * a); // @output 9223372036854775807
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where one operand is negative 
             and the other is positive.
Labels: multiplicative-expr, int, DecimalNumber, unary-minus, int:MIN_VALUE

function init() {
    int a = int:MIN_VALUE;
    int b = -1234;
    int c = -1;
    int d = 1;
    int e = 60708;
    int f = 9223372036854775807;

    io:println(a * d); // @output -9223372036854775808

    io:println(b * d); // @output -1234
    io:println(b * e); // @output -74913672

    io:println(c * d); // @output -1
    io:println(c * e); // @output -60708
    io:println(c * f); // @output -9223372036854775807

    io:println(d * a); // @output -9223372036854775808
    io:println(d * b); // @output -1234
    io:println(d * c); // @output -1

    io:println(e * b); // @output -74913672
    io:println(e * c); // @output -60708

    io:println(f * c); // @output -9223372036854775807
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where at least one operand is zero.
Labels: multiplicative-expr, int, DecimalNumber, unary-minus, int:MIN_VALUE

function init() {
    int a = int:MIN_VALUE;
    int b = -1234;
    int c = -1;
    int d = -0;
    int e = 0;
    int f = 1;
    int g = 60708;
    int h = 9223372036854775807;

    io:println(a * d); // @output 0
    io:println(a * e); // @output 0

    io:println(b * d); // @output 0
    io:println(b * e); // @output 0

    io:println(c * d); // @output 0
    io:println(c * e); // @output 0

    io:println(d * a); // @output 0
    io:println(d * b); // @output 0
    io:println(d * c); // @output 0
    io:println(d * d); // @output 0
    io:println(d * e); // @output 0
    io:println(d * f); // @output 0
    io:println(d * g); // @output 0
    io:println(d * h); // @output 0

    io:println(e * a); // @output 0
    io:println(e * b); // @output 0
    io:println(e * c); // @output 0
    io:println(e * d); // @output 0
    io:println(e * e); // @output 0
    io:println(e * f); // @output 0
    io:println(e * g); // @output 0
    io:println(e * h); // @output 0

    io:println(f * d); // @output 0
    io:println(f * e); // @output 0

    io:println(g * d); // @output 0
    io:println(g * e); // @output 0

    io:println(h * d); // @output 0
    io:println(h * e); // @output 0
}

Test-Case: panic
Description: Test 1 for integer multiplication overflow.
Labels: multiplicative-expr, int, DecimalNumber

function init() {
    int a = 9223372036854775807;
    int b = 2;    
    int _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: panic
Description: Test 2 for integer multiplication overflow.
Labels: multiplicative-expr, int, DecimalNumber

function init() {
    int _ = 2 * 4611686018427387904; // @panic integer overflow on multiplication
}

Test-Case: panic
Description: Test 3 for integer multiplication overflow.
Labels: multiplicative-expr, int, DecimalNumber, unary-minus

function init() {
    int _ = -3074457345618258603 * 3; // @panic integer overflow on multiplication
}

Test-Case: panic
Description: Test 4 for integer multiplication overflow.
Labels: multiplicative-expr, int, DecimalNumber, unary-minus, int:MIN_VALUE

function init() {
    int _ = -1 * int:MIN_VALUE; // @panic integer overflow on multiplication
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for positive non-zero integers, for int:Unsigned8.
Labels: multiplicative-expr, DecimalNumber, int:Unsigned8

function init() {
    int:Unsigned8 a = 1;
    int:Unsigned8 b = 2;
    int:Unsigned8 c = 3;
    int:Unsigned8 d = 86;
    int:Unsigned8 e = 255;

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 3
    io:println(a * d); // @output 86
    io:println(a * e); // @output 255

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 6
    io:println(b * d); // @output 172
    io:println(b * e); // @output 510

    io:println(c * a); // @output 3
    io:println(c * b); // @output 6
    io:println(c * c); // @output 9
    io:println(c * d); // @output 258
    io:println(c * e); // @output 765

    io:println(d * a); // @output 86
    io:println(d * b); // @output 172
    io:println(d * c); // @output 258
    io:println(d * d); // @output 7396
    io:println(d * e); // @output 21930

    io:println(e * a); // @output 255
    io:println(e * b); // @output 510
    io:println(e * c); // @output 765
    io:println(e * d); // @output 21930
    io:println(e * e); // @output 65025
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where at least one operand is zero, for int:Unsigned8.
Labels: multiplicative-expr, DecimalNumber, int:Unsigned8

function init() {
    int:Unsigned8 a = 0;
    int:Unsigned8 b = 1;
    int:Unsigned8 c = 128;
    int:Unsigned8 d = 255;

    io:println(a * a); // @output 0

    io:println(a * b); // @output 0
    io:println(a * c); // @output 0
    io:println(a * d); // @output 0

    io:println(b * a); // @output 0
    io:println(c * a); // @output 0
    io:println(d * a); // @output 0
}

Test-Case: panic
Description: Test 1 for integer multiplication overflow, where one operand is of type int:Unsigned8.
Labels: multiplicative-expr, int, DecimalNumber, int:Unsigned8, unary-minus

function init() {
    int:Unsigned8 a = 255;
    int b = 36170086419038337;    
    int _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: panic
Description: Test 2 for integer multiplication overflow, where one operand is of type int:Unsigned8.
Labels: multiplicative-expr, int, DecimalNumber, int:Unsigned8, unary-minus

function init() {
    int a = -461168601842738791;
    int:Unsigned8 b = 20;  
    int _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for positive non-zero integers, for byte.
Labels: multiplicative-expr, DecimalNumber, byte

function init() {
    byte a = 1;
    byte b = 2;
    byte c = 3;
    byte d = 86;
    byte e = 255;

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 3
    io:println(a * d); // @output 86
    io:println(a * e); // @output 255

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 6
    io:println(b * d); // @output 172
    io:println(b * e); // @output 510

    io:println(c * a); // @output 3
    io:println(c * b); // @output 6
    io:println(c * c); // @output 9
    io:println(c * d); // @output 258
    io:println(c * e); // @output 765

    io:println(d * a); // @output 86
    io:println(d * b); // @output 172
    io:println(d * c); // @output 258
    io:println(d * d); // @output 7396
    io:println(d * e); // @output 21930

    io:println(e * a); // @output 255
    io:println(e * b); // @output 510
    io:println(e * c); // @output 765
    io:println(e * d); // @output 21930
    io:println(e * e); // @output 65025
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where at least one operand is zero, for byte.
Labels: multiplicative-expr, DecimalNumber, byte

function init() {
    byte a = 0;
    byte b = 1;
    byte c = 128;
    byte d = 255;

    io:println(a * a); // @output 0

    io:println(a * b); // @output 0
    io:println(a * c); // @output 0
    io:println(a * d); // @output 0

    io:println(b * a); // @output 0
    io:println(c * a); // @output 0
    io:println(d * a); // @output 0
}

Test-Case: panic
Description: Test 1 for integer multiplication overflow, where one operand is of type byte.
Labels: multiplicative-expr, int, DecimalNumber, byte

function init() {
    byte a = 255;
    int b = 36170086419038337;    
    int _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: panic
Description: Test 2 for integer multiplication overflow, where one operand is of type byte.
Labels: multiplicative-expr, int,  DecimalNumber, byte

function init() {
    int a = -461168601842738791;
    byte b = 20;  
    int _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for positive non-zero integers, for int:Unsigned16.
Labels: multiplicative-expr, DecimalNumber, int:Unsigned16

function init() {
    int:Unsigned16 a = 1;
    int:Unsigned16 b = 2;
    int:Unsigned16 c = 5;
    int:Unsigned16 d = 40123;
    int:Unsigned16 e = 65535;

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 5
    io:println(a * d); // @output 40123
    io:println(a * e); // @output 65535

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 10
    io:println(b * d); // @output 80246
    io:println(b * e); // @output 131070

    io:println(c * a); // @output 5
    io:println(c * b); // @output 10
    io:println(c * c); // @output 25
    io:println(c * d); // @output 200615
    io:println(c * e); // @output 327675

    io:println(d * a); // @output 40123
    io:println(d * b); // @output 80246
    io:println(d * c); // @output 200615
    io:println(d * d); // @output 1609855129
    io:println(d * e); // @output 2629460805

    io:println(e * a); // @output 65535
    io:println(e * b); // @output 131070
    io:println(e * c); // @output 327675
    io:println(e * d); // @output 2629460805
    io:println(e * e); // @output 4294836225
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where at least one operand is zero, for int:Unsigned16.
Labels: multiplicative-expr, DecimalNumber, int:Unsigned16

function init() {
    int:Unsigned16 a = 0;
    int:Unsigned16 b = 1;
    int:Unsigned16 c = 128;
    int:Unsigned16 d = 255;

    io:println(a * a); // @output 0

    io:println(a * b); // @output 0
    io:println(a * c); // @output 0
    io:println(a * d); // @output 0

    io:println(b * a); // @output 0
    io:println(c * a); // @output 0
    io:println(d * a); // @output 0
}

Test-Case: panic
Description: Test 1 for integer multiplication overflow, where one operand is of type int:Unsigned16.
Labels: multiplicative-expr, int, DecimalNumber, int:Unsigned16

function init() {
    int:Unsigned16 a = 65534;
    int b = 140741783453701;    
    int _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: panic
Description: Test 2 for integer multiplication overflow, where one operand is of type int:Unsigned16.
Labels: multiplicative-expr, int, DecimalNumber, int:Unsigned16, unary-minus

function init() {
    int a = -30744573456182586;
    int:Unsigned16 b = 301;  
    int _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for positive non-zero integers, for int:Unsigned32.
Labels: multiplicative-expr, DecimalNumber, int:Unsigned32

function init() {
    int:Unsigned32 a = 1;
    int:Unsigned32 b = 2;
    int:Unsigned32 c = 10;
    int:Unsigned32 d = 12034;
    int:Unsigned32 e = 429496729;

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 10
    io:println(a * d); // @output 12034
    io:println(a * e); // @output 429496729

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 20
    io:println(b * d); // @output 24068
    io:println(b * e); // @output 858993458

    io:println(c * a); // @output 10
    io:println(c * b); // @output 20
    io:println(c * c); // @output 100
    io:println(c * d); // @output 120340
    io:println(c * e); // @output 4294967290

    io:println(d * a); // @output 12034
    io:println(d * b); // @output 24068
    io:println(d * c); // @output 120340
    io:println(d * d); // @output 144817156
    io:println(d * e); // @output 5168563636786

    io:println(e * a); // @output 429496729
    io:println(e * b); // @output 858993458
    io:println(e * c); // @output 4294967290
    io:println(e * d); // @output 5168563636786
    io:println(e * e); // @output 184467440221699441
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where at least one operand is zero, for int:Unsigned32.
Labels: multiplicative-expr, DecimalNumber, int:Unsigned32

function init() {
    int:Unsigned32 a = 0;
    int:Unsigned32 b = 1;
    int:Unsigned32 c = 1259273;
    int:Unsigned32 d = 4294967295;

    io:println(a * a); // @output 0

    io:println(a * b); // @output 0
    io:println(a * c); // @output 0
    io:println(a * d); // @output 0

    io:println(b * a); // @output 0
    io:println(c * a); // @output 0
    io:println(d * a); // @output 0
}

Test-Case: panic
Description: Test 1 for integer multiplication overflow, where one operand is of type int:Unsigned32.
Labels: multiplicative-expr, int, DecimalNumber, int:Unsigned32

function init() {
    int:Unsigned32 a = 4294127249;
    int b = 2147903754;    
    int _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: panic
Description: Test 2 for integer multiplication overflow, where one operand is of type int:Unsigned32.
Labels: multiplicative-expr, int, DecimalNumber, int:Unsigned32, unary-minus

function init() {
    int a = -140737488355328;
    int:Unsigned32 b = 65537;  
    int _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: panic
Description: Test 3 for integer multiplication overflow, where both operands are of type int:Unsigned32.
Labels: multiplicative-expr, int, DecimalNumber, int:Unsigned32

function init() {
    int:Unsigned32 a = 4294967295;  
    int _ = a * a; // @panic integer overflow on multiplication
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for positive non-zero integers, for int:Signed8.
Labels: multiplicative-expr, DecimalNumber, int:Signed8

function init() {
    int:Signed8 a = 1;
    int:Signed8 b = 2;
    int:Signed8 c = 10;
    int:Signed8 d = 100;
    int:Signed8 e = 127;

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 10
    io:println(a * d); // @output 100
    io:println(a * e); // @output 127

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 20
    io:println(b * d); // @output 200
    io:println(b * e); // @output 254

    io:println(c * a); // @output 10
    io:println(c * b); // @output 20
    io:println(c * c); // @output 100
    io:println(c * d); // @output 1000
    io:println(c * e); // @output 1270

    io:println(d * a); // @output 100
    io:println(d * b); // @output 200
    io:println(d * c); // @output 1000
    io:println(d * d); // @output 10000
    io:println(d * e); // @output 12700

    io:println(e * a); // @output 127
    io:println(e * b); // @output 254
    io:println(e * c); // @output 1270
    io:println(e * d); // @output 12700
    io:println(e * e); // @output 16129
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for negative non-zero integers, for int:Signed8.
Labels: multiplicative-expr, DecimalNumber, int:Signed8, unary-minus

function init() {
    int:Signed8 a = -1;
    int:Signed8 b = -2;
    int:Signed8 c = -100;
    int:Signed8 d = -120;
    int:Signed8 e = -128;

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 100
    io:println(a * d); // @output 120
    io:println(a * e); // @output 128

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 200
    io:println(b * d); // @output 240
    io:println(b * e); // @output 256

    io:println(c * a); // @output 100
    io:println(c * b); // @output 200
    io:println(c * c); // @output 10000
    io:println(c * d); // @output 12000
    io:println(c * e); // @output 12800

    io:println(d * a); // @output 120
    io:println(d * b); // @output 240
    io:println(d * c); // @output 12000
    io:println(d * d); // @output 14400
    io:println(d * e); // @output 15360

    io:println(e * a); // @output 128
    io:println(e * b); // @output 256
    io:println(e * c); // @output 12800
    io:println(e * d); // @output 15360
    io:println(e * e); // @output 16384
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where one operand is negative 
             and the other is positive, for int:Signed8.
Labels: multiplicative-expr, DecimalNumber, int:Signed8, unary-minus

function init() {
    int:Signed8 a = -128;
    int:Signed8 b = -100;
    int:Signed8 c = -1;
    int:Signed8 d = 1;
    int:Signed8 e = 100;
    int:Signed8 f = 127;

    io:println(a * d); // @output -128
    io:println(a * e); // @output -12800
    io:println(a * f); // @output -16256

    io:println(b * d); // @output -100
    io:println(b * e); // @output -10000
    io:println(b * f); // @output -12700

    io:println(c * d); // @output -1
    io:println(c * e); // @output -100
    io:println(c * f); // @output -127

    io:println(d * a); // @output -128
    io:println(d * b); // @output -100
    io:println(d * c); // @output -1

    io:println(e * a); // @output -12800
    io:println(e * b); // @output -10000
    io:println(e * c); // @output -100

    io:println(f * a); // @output -16256
    io:println(f * b); // @output -12700
    io:println(f * c); // @output -127
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where at least one operand is zero, for int:Signed8.
Labels: multiplicative-expr, DecimalNumber, int:Signed8, unary-minus

function init() {
    int:Signed8 a = -128;
    int:Signed8 b = -100;
    int:Signed8 c = -1;
    int:Signed8 d = -0;
    int:Signed8 e = 0;
    int:Signed8 f = 1;
    int:Signed8 g = 100;
    int:Signed8 h = 127;

    io:println(a * d); // @output 0
    io:println(a * e); // @output 0

    io:println(b * d); // @output 0
    io:println(b * e); // @output 0

    io:println(c * d); // @output 0
    io:println(c * e); // @output 0

    io:println(d * a); // @output 0
    io:println(d * b); // @output 0
    io:println(d * c); // @output 0
    io:println(d * d); // @output 0
    io:println(d * e); // @output 0
    io:println(d * f); // @output 0
    io:println(d * g); // @output 0
    io:println(d * h); // @output 0

    io:println(e * a); // @output 0
    io:println(e * b); // @output 0
    io:println(e * c); // @output 0
    io:println(e * d); // @output 0
    io:println(e * e); // @output 0
    io:println(e * f); // @output 0
    io:println(e * g); // @output 0
    io:println(e * h); // @output 0

    io:println(f * d); // @output 0
    io:println(f * e); // @output 0

    io:println(g * d); // @output 0
    io:println(g * e); // @output 0

    io:println(h * d); // @output 0
    io:println(h * e); // @output 0
}

Test-Case: panic
Description: Test 1 for integer multiplication overflow, for int:Signed8.
Labels: multiplicative-expr, int, DecimalNumber, int:Signed8

function init() {
    int a = 72624976668147842;
    int:Signed8 b = 127;    
    int _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: panic
Description: Test 2 for integer multiplication overflow, for int:Signed8.
Labels: multiplicative-expr, int, DecimalNumber, int:Signed8, unary-minus

function init() {
    int:Signed8 a = -128;
    int _ = 72057594037927937 * a; // @panic integer overflow on multiplication
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for positive non-zero integers, for int:Signed16.
Labels: multiplicative-expr, DecimalNumber, int:Signed16

function init() {
    int:Signed16 a = 1;
    int:Signed16 b = 2;
    int:Signed16 c = 10;
    int:Signed16 d = 12345;
    int:Signed16 e = 32767;

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 10
    io:println(a * d); // @output 12345
    io:println(a * e); // @output 32767

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 20
    io:println(b * d); // @output 24690
    io:println(b * e); // @output 65534

    io:println(c * a); // @output 10
    io:println(c * b); // @output 20
    io:println(c * c); // @output 100
    io:println(c * d); // @output 123450
    io:println(c * e); // @output 327670

    io:println(d * a); // @output 12345
    io:println(d * b); // @output 24690
    io:println(d * c); // @output 123450
    io:println(d * d); // @output 152399025
    io:println(d * e); // @output 404508615

    io:println(e * a); // @output 32767
    io:println(e * b); // @output 65534
    io:println(e * c); // @output 327670
    io:println(e * d); // @output 404508615
    io:println(e * e); // @output 1073676289
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for negative non-zero integers, for int:Signed16.
Labels: multiplicative-expr, DecimalNumber, int:Signed16, unary-minus

function init() {
    int:Signed16 a = -1;
    int:Signed16 b = -2;
    int:Signed16 c = -100;
    int:Signed16 d = -20000;
    int:Signed16 e = -32768;

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 100
    io:println(a * d); // @output 20000
    io:println(a * e); // @output 32768

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 200
    io:println(b * d); // @output 40000
    io:println(b * e); // @output 65536

    io:println(c * a); // @output 100
    io:println(c * b); // @output 200
    io:println(c * c); // @output 10000
    io:println(c * d); // @output 2000000
    io:println(c * e); // @output 3276800

    io:println(d * a); // @output 20000
    io:println(d * b); // @output 40000
    io:println(d * c); // @output 2000000
    io:println(d * d); // @output 400000000
    io:println(d * e); // @output 655360000

    io:println(e * a); // @output 32768
    io:println(e * b); // @output 65536
    io:println(e * c); // @output 3276800
    io:println(e * d); // @output 655360000
    io:println(e * e); // @output 1073741824
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where one operand is negative 
             and the other is positive, for int:Signed16.
Labels: multiplicative-expr, DecimalNumber, int:Signed16, unary-minus

function init() {
    int:Signed16 a = -32768;
    int:Signed16 b = -200;
    int:Signed16 c = -1;
    int:Signed16 d = 1;
    int:Signed16 e = 200;
    int:Signed16 f = 32767;

    io:println(a * d); // @output -32768
    io:println(a * e); // @output -6553600
    io:println(a * f); // @output -1073709056

    io:println(b * d); // @output -200
    io:println(b * e); // @output -40000
    io:println(b * f); // @output -6553400

    io:println(c * d); // @output -1
    io:println(c * e); // @output -200
    io:println(c * f); // @output -32767

    io:println(d * a); // @output -32768
    io:println(d * b); // @output -200
    io:println(d * c); // @output -1

    io:println(e * a); // @output -6553600
    io:println(e * b); // @output -40000
    io:println(e * c); // @output -200

    io:println(f * a); // @output -1073709056
    io:println(f * b); // @output -6553400
    io:println(f * c); // @output -32767
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where at least one operand is zero, for int:Signed16.
Labels: multiplicative-expr, DecimalNumber, int:Signed16, unary-minus

function init() {
    int:Signed16 a = -32768;
    int:Signed16 b = -100;
    int:Signed16 c = -1;
    int:Signed16 d = -0;
    int:Signed16 e = 0;
    int:Signed16 f = 1;
    int:Signed16 g = 1100;
    int:Signed16 h = 32767;

    io:println(a * d); // @output 0
    io:println(a * e); // @output 0

    io:println(b * d); // @output 0
    io:println(b * e); // @output 0

    io:println(c * d); // @output 0
    io:println(c * e); // @output 0

    io:println(d * a); // @output 0
    io:println(d * b); // @output 0
    io:println(d * c); // @output 0
    io:println(d * d); // @output 0
    io:println(d * e); // @output 0
    io:println(d * f); // @output 0
    io:println(d * g); // @output 0
    io:println(d * h); // @output 0

    io:println(e * a); // @output 0
    io:println(e * b); // @output 0
    io:println(e * c); // @output 0
    io:println(e * d); // @output 0
    io:println(e * e); // @output 0
    io:println(e * f); // @output 0
    io:println(e * g); // @output 0
    io:println(e * h); // @output 0

    io:println(f * d); // @output 0
    io:println(f * e); // @output 0

    io:println(g * d); // @output 0
    io:println(g * e); // @output 0

    io:println(h * d); // @output 0
    io:println(h * e); // @output 0
}

Test-Case: panic
Description: Test 1 for integer multiplication overflow, for int:Signed16.
Labels: multiplicative-expr, int, DecimalNumber, int:Signed16

function init() {
    int a = 281483566907401;
    int:Signed16 b = 32767;    
    int _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: panic
Description: Test 2 for integer multiplication overflow, for int:Signed16.
Labels: multiplicative-expr, int, DecimalNumber, int:Signed16, unary-minus

function init() {
    int:Signed16 a = -32768;
    int b = 281474976710666;
    int _ = b * a; // @panic integer overflow on multiplication
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for positive non-zero integers, for int:Signed32.
Labels: multiplicative-expr, DecimalNumber, int:Signed32

function init() {
    int:Signed32 a = 1;
    int:Signed32 b = 2;
    int:Signed32 c = 10;
    int:Signed32 d = 1000;
    int:Signed32 e = 2147483647;

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 10
    io:println(a * d); // @output 1000
    io:println(a * e); // @output 2147483647

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 20
    io:println(b * d); // @output 2000
    io:println(b * e); // @output 4294967294

    io:println(c * a); // @output 10
    io:println(c * b); // @output 20
    io:println(c * c); // @output 100
    io:println(c * d); // @output 10000
    io:println(c * e); // @output 21474836470

    io:println(d * a); // @output 1000
    io:println(d * b); // @output 2000
    io:println(d * c); // @output 10000
    io:println(d * d); // @output 1000000
    io:println(d * e); // @output 2147483647000

    io:println(e * a); // @output 2147483647
    io:println(e * b); // @output 4294967294
    io:println(e * c); // @output 21474836470
    io:println(e * d); // @output 2147483647000
    io:println(e * e); // @output 4611686014132420609
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for negative non-zero integers, for int:Signed32.
Labels: multiplicative-expr, DecimalNumber, int:Signed32, unary-minus

function init() {
    int:Signed32 a = -1;
    int:Signed32 b = -2;
    int:Signed32 c = -100;
    int:Signed32 d = -20000;
    int:Signed32 e = -2147483648;

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 100
    io:println(a * d); // @output 20000
    io:println(a * e); // @output 2147483648

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 200
    io:println(b * d); // @output 40000
    io:println(b * e); // @output 4294967296

    io:println(c * a); // @output 100
    io:println(c * b); // @output 200
    io:println(c * c); // @output 10000
    io:println(c * d); // @output 2000000
    io:println(c * e); // @output 214748364800

    io:println(d * a); // @output 20000
    io:println(d * b); // @output 40000
    io:println(d * c); // @output 2000000
    io:println(d * d); // @output 400000000
    io:println(d * e); // @output 42949672960000

    io:println(e * a); // @output 2147483648
    io:println(e * b); // @output 4294967296
    io:println(e * c); // @output 214748364800
    io:println(e * d); // @output 42949672960000
    io:println(e * e); // @output 4611686018427387904
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where one operand is negative 
             and the other is positive, for int:Signed32.
Labels: multiplicative-expr, DecimalNumber, int:Signed32, unary-minus

function init() {
    int:Signed32 a = -2147483648;
    int:Signed32 b = -200;
    int:Signed32 c = -1;
    int:Signed32 d = 1;
    int:Signed32 e = 200;
    int:Signed32 f = 2147483647;

    io:println(a * d); // @output -2147483648
    io:println(a * e); // @output -429496729600
    io:println(a * f); // @output -4611686016279904256

    io:println(b * d); // @output -200
    io:println(b * e); // @output -40000
    io:println(b * f); // @output -429496729400

    io:println(c * d); // @output -1
    io:println(c * e); // @output -200
    io:println(c * f); // @output -2147483647

    io:println(d * a); // @output -2147483648
    io:println(d * b); // @output -200
    io:println(d * c); // @output -1

    io:println(e * a); // @output -429496729600
    io:println(e * b); // @output -40000
    io:println(e * c); // @output -200

    io:println(f * a); // @output -4611686016279904256
    io:println(f * b); // @output -429496729400
    io:println(f * c); // @output -2147483647
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where at least one operand is zero, for int:Signed32.
Labels: multiplicative-expr, DecimalNumber, int:Signed32, unary-minus

function init() {
    int:Signed32 a = -2147483648;
    int:Signed32 b = -12342340;
    int:Signed32 c = -1;
    int:Signed32 d = -0;
    int:Signed32 e = 0;
    int:Signed32 f = 1;
    int:Signed32 g = 139456264;
    int:Signed32 h = 2147483647;

    io:println(a * d); // @output 0
    io:println(a * e); // @output 0

    io:println(b * d); // @output 0
    io:println(b * e); // @output 0

    io:println(c * d); // @output 0
    io:println(c * e); // @output 0

    io:println(d * a); // @output 0
    io:println(d * b); // @output 0
    io:println(d * c); // @output 0
    io:println(d * d); // @output 0
    io:println(d * e); // @output 0
    io:println(d * f); // @output 0
    io:println(d * g); // @output 0
    io:println(d * h); // @output 0

    io:println(e * a); // @output 0
    io:println(e * b); // @output 0
    io:println(e * c); // @output 0
    io:println(e * d); // @output 0
    io:println(e * e); // @output 0
    io:println(e * f); // @output 0
    io:println(e * g); // @output 0
    io:println(e * h); // @output 0

    io:println(f * d); // @output 0
    io:println(f * e); // @output 0

    io:println(g * d); // @output 0
    io:println(g * e); // @output 0

    io:println(h * d); // @output 0
    io:println(h * e); // @output 0
}

Test-Case: panic
Description: Test 1 for integer multiplication overflow, for int:Signed32.
Labels: multiplicative-expr, int, DecimalNumber, int:Signed32

function init() {
    int a = 4294967399;
    int:Signed32 b = 2147483646;    
    int _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: panic
Description: Test 2 for integer multiplication overflow, for int:Signed32.
Labels: multiplicative-expr, int, DecimalNumber, int:Signed32, unary-minus

function init() {
    int:Signed32 a = -2147483648;
    int _ = a * 4294967297; // @panic integer overflow on multiplication
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for positive non-zero integers, 
             for user-defined subtype of int.
Labels: multiplicative-expr, union-type, singleton-type, DecimalNumber, unary-minus, module-type-defn

type Ints -2|-1|0|1|2;

function init() {
    Ints a = 1;
    Ints b = 2;

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
}


Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for negative non-zero integers,  
             for user-defined subtype of int.
Labels: multiplicative-expr, union-type, singleton-type, DecimalNumber, unary-minus, module-type-defn

type Ints -2|-1|0|1|2;

function init() {
    Ints a = -1;
    Ints b = -2;

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where one operand is negative 
             and the other is positive, for user-defined subtype of int.
Labels: multiplicative-expr, union-type, singleton-type, DecimalNumber, unary-minus, module-type-defn

type Ints -2|-1|0|1|2;

function init() {
    Ints a = -1;
    Ints b = -2;
    Ints c = 1;
    Ints d = 2;

    io:println(a * c); // @output -1
    io:println(a * d); // @output -2

    io:println(b * c); // @output -2
    io:println(b * d); // @output -4

    io:println(c * a); // @output -1
    io:println(c * b); // @output -2

    io:println(d * a); // @output -2
    io:println(d * b); // @output -4
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where at least one operand is zero, for 
             user-defined subtype of int.
Labels: multiplicative-expr, union-type, singleton-type, DecimalNumber, unary-minus, module-type-defn

type Ints -2|-1|0|1|2;

function init() {
    Ints a = -2;
    Ints b = -1;
    Ints c = -0;
    Ints d = 0;
    Ints e = 1;
    Ints f = 2;

    io:println(a * c); // @output 0
    io:println(a * d); // @output 0

    io:println(b * c); // @output 0
    io:println(b * d); // @output 0

    io:println(c * a); // @output 0
    io:println(c * b); // @output 0
    io:println(c * c); // @output 0
    io:println(c * d); // @output 0
    io:println(c * e); // @output 0
    io:println(c * f); // @output 0

    io:println(d * a); // @output 0
    io:println(d * b); // @output 0
    io:println(d * c); // @output 0
    io:println(d * d); // @output 0
    io:println(d * e); // @output 0
    io:println(d * f); // @output 0

    io:println(e * c); // @output 0
    io:println(e * d); // @output 0

    io:println(f * c); // @output 0
    io:println(f * d); // @output 0
}

Test-Case: panic
Description: Test 1 for integer multiplication overflow, for user-defined subtype of int.
Labels: multiplicative-expr, union-type, DecimalNumber, unary-minus, module-type-defn

type Ints -2|-1|0|1|2;

function init() {
    int a = 4611686018427387904;
    Ints b = 2;    
    int _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: panic
Description: Test 2 for integer multiplication overflow, for user-defined subtype of int.
Labels: multiplicative-expr, union-type, singleton-type, DecimalNumber, unary-minus, module-type-defn

type Ints -2|-1|0|1|2;

function init() {
    Ints a = -2;
    int _ = a * 4611686018427387905; // @panic integer overflow on multiplication
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for optional positive non-zero integers.
Labels: multiplicative-expr, int, optional-type, DecimalNumber, nil-literal, value:toBalString, numeric-nil-lifting

function init() {
    int? a = 1;
    int? b = 2;
    int? c = 4611686018427387903;
    int? d = 6917529027641081853;
    int? e = 9223372036854775807;
    int? f = ();

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 4611686018427387903
    io:println(a * d); // @output 6917529027641081853
    io:println(a * e); // @output 9223372036854775807
    io:println((a * f).toBalString()); // @output ()

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 9223372036854775806
    io:println((b * f).toBalString()); // @output ()

    io:println(c * a); // @output 4611686018427387903
    io:println(c * b); // @output 9223372036854775806
    io:println((c * f).toBalString()); // @output ()

    io:println(d * a); // @output 6917529027641081853
    io:println((d * f).toBalString()); // @output ()

    io:println(e * a); // @output 9223372036854775807
    io:println((e * f).toBalString()); // @output ()

    io:println((f * a).toBalString()); // @output ()
    io:println((f * b).toBalString()); // @output ()
    io:println((f * c).toBalString()); // @output ()
    io:println((f * d).toBalString()); // @output ()
    io:println((f * e).toBalString()); // @output ()
    io:println((f * f).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for optional negative non-zero integers.
Labels: multiplicative-expr, int, optional-type, DecimalNumber, nil-literal, value:toBalString, unary-minus, numeric-nil-lifting

function init() {
    int? a = -1;
    int? b = -2;
    int? c = -4611686018427387903;
    int? d = -6917529027641081853;
    int? e = -9223372036854775807;
    int? f = ();

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 4611686018427387903
    io:println(a * d); // @output 6917529027641081853
    io:println(a * e); // @output 9223372036854775807
    io:println((a * f).toBalString()); // @output ()

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 9223372036854775806
    io:println((b * f).toBalString()); // @output ()

    io:println(c * a); // @output 4611686018427387903
    io:println(c * b); // @output 9223372036854775806
    io:println((c * f).toBalString()); // @output ()

    io:println(d * a); // @output 6917529027641081853
    io:println((d * f).toBalString()); // @output ()

    io:println(e * a); // @output 9223372036854775807
    io:println((e * f).toBalString()); // @output ()

    io:println((f * a).toBalString()); // @output ()
    io:println((f * b).toBalString()); // @output ()
    io:println((f * c).toBalString()); // @output ()
    io:println((f * d).toBalString()); // @output ()
    io:println((f * e).toBalString()); // @output ()
    io:println((f * f).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where one operand is negative 
             and the other is positive, with optional type-descriptors.
Labels: multiplicative-expr, int, optional-type, DecimalNumber, nil-literal, value:toBalString, unary-minus, numeric-nil-lifting, int:MIN_VALUE

function init() {
    int? a = int:MIN_VALUE;
    int? b = -1234;
    int? c = -1;
    int? d = 1;
    int? e = 60708;
    int? f = 9223372036854775807;
    int? g = ();

    io:println(a * d); // @output -9223372036854775808
    io:println((a * g).toBalString()); // @output ()

    io:println(b * d); // @output -1234
    io:println(b * e); // @output -74913672
    io:println((b * g).toBalString()); // @output ()

    io:println(c * d); // @output -1
    io:println(c * e); // @output -60708
    io:println(c * f); // @output -9223372036854775807
    io:println((c * g).toBalString()); // @output ()

    io:println(d * a); // @output -9223372036854775808
    io:println(d * b); // @output -1234
    io:println(d * c); // @output -1
    io:println((d * g).toBalString()); // @output ()

    io:println(e * b); // @output -74913672
    io:println(e * c); // @output -60708
    io:println((e * g).toBalString()); // @output ()

    io:println(f * c); // @output -9223372036854775807
    io:println((f * g).toBalString()); // @output ()

    io:println((g * a).toBalString()); // @output ()
    io:println((g * b).toBalString()); // @output ()
    io:println((g * c).toBalString()); // @output ()
    io:println((g * d).toBalString()); // @output ()
    io:println((g * e).toBalString()); // @output ()
    io:println((g * f).toBalString()); // @output ()
    io:println((g * g).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where at least one operand is zero,
             with optional type-descriptors.
Labels: multiplicative-expr, int, optional-type, DecimalNumber, nil-literal, value:toBalString, unary-minus, numeric-nil-lifting, int:MIN_VALUE

function init() {
    int? a = int:MIN_VALUE;
    int? b = -1234;
    int? c = -1;
    int? d = -0;
    int? e = 0;
    int? f = 1;
    int? g = 60708;
    int? h = 9223372036854775807;
    int? i = ();

    io:println(a * d); // @output 0
    io:println(a * e); // @output 0

    io:println(b * d); // @output 0
    io:println(b * e); // @output 0

    io:println(c * d); // @output 0
    io:println(c * e); // @output 0

    io:println(d * a); // @output 0
    io:println(d * b); // @output 0
    io:println(d * c); // @output 0
    io:println(d * d); // @output 0
    io:println(d * e); // @output 0
    io:println(d * f); // @output 0
    io:println(d * g); // @output 0
    io:println(d * h); // @output 0
    io:println((d * i).toBalString()); // @output ()

    io:println(e * a); // @output 0
    io:println(e * b); // @output 0
    io:println(e * c); // @output 0
    io:println(e * d); // @output 0
    io:println(e * e); // @output 0
    io:println(e * f); // @output 0
    io:println(e * g); // @output 0
    io:println(e * h); // @output 0
    io:println((e * i).toBalString()); // @output ()

    io:println(f * d); // @output 0
    io:println(f * e); // @output 0

    io:println(g * d); // @output 0
    io:println(g * e); // @output 0

    io:println(h * d); // @output 0
    io:println(h * e); // @output 0

    io:println((i * d).toBalString()); // @output ()
    io:println((i * e).toBalString()); // @output ()
}

Test-Case: panic
Description: Test 1 for integer multiplication overflow with optional type-descriptors.
Labels: multiplicative-expr, int, optional-type, DecimalNumber, numeric-nil-lifting

function init() {
    int? a = 9223372036854775807;
    int? b = 2;    
    int? _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for positive non-zero integers, 
             for optional int:Unsigned8.
Labels: multiplicative-expr, int:Unsigned8, optional-type, DecimalNumber, nil-literal, value:toBalString, numeric-nil-lifting

function init() {
    int:Unsigned8? a = 1;
    int:Unsigned8? b = 2;
    int:Unsigned8? c = 3;
    int:Unsigned8? d = 86;
    int:Unsigned8? e = 255;
    int:Unsigned8? f = ();

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 3
    io:println(a * d); // @output 86
    io:println(a * e); // @output 255
    io:println((a * f).toBalString()); // @output ()

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 6
    io:println(b * d); // @output 172
    io:println(b * e); // @output 510
    io:println((b * f).toBalString()); // @output ()

    io:println(c * a); // @output 3
    io:println(c * b); // @output 6
    io:println(c * c); // @output 9
    io:println(c * d); // @output 258
    io:println(c * e); // @output 765
    io:println((c * f).toBalString()); // @output ()

    io:println(d * a); // @output 86
    io:println(d * b); // @output 172
    io:println(d * c); // @output 258
    io:println(d * d); // @output 7396
    io:println(d * e); // @output 21930
    io:println((d * f).toBalString()); // @output ()

    io:println(e * a); // @output 255
    io:println(e * b); // @output 510
    io:println(e * c); // @output 765
    io:println(e * d); // @output 21930
    io:println(e * e); // @output 65025
    io:println((e * f).toBalString()); // @output ()

    io:println((f * a).toBalString()); // @output ()
    io:println((f * b).toBalString()); // @output ()
    io:println((f * c).toBalString()); // @output ()
    io:println((f * d).toBalString()); // @output ()
    io:println((f * e).toBalString()); // @output ()
    io:println((f * f).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where at least one operand is zero, 
             for optional int:Unsigned8.
Labels: multiplicative-expr, int:Unsigned8, optional-type, DecimalNumber, nil-literal, value:toBalString, numeric-nil-lifting

function init() {
    int:Unsigned8? a = 0;
    int:Unsigned8? b = 1;
    int:Unsigned8? c = 128;
    int:Unsigned8? d = 255;
    int:Unsigned8? e = ();

    io:println(a * a); // @output 0

    io:println(a * b); // @output 0
    io:println(a * c); // @output 0
    io:println(a * d); // @output 0
    io:println((a * e).toBalString()); // @output ()

    io:println(b * a); // @output 0
    io:println(c * a); // @output 0
    io:println(d * a); // @output 0
    io:println((e * a).toBalString()); // @output ()
}

Test-Case: panic
Description: Test 1 for integer multiplication overflow, where one operand is of type optional int:Unsigned8.
Labels: multiplicative-expr, int:Unsigned8, optional-type, DecimalNumber, value:toBalString, numeric-nil-lifting

function init() {
    int:Unsigned8? a = 255;
    int b = 36170086419038337;    
    int? _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: panic
Description: Test 2 for integer multiplication overflow, where one operand is of type optional int:Unsigned8.
Labels: multiplicative-expr, int:Unsigned8, optional-type, DecimalNumber, value:toBalString, numeric-nil-lifting

function init() {
    int? a = -461168601842738791;
    int:Unsigned8? b = 20;  
    int? _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for positive non-zero integers, for optional byte.
Labels: multiplicative-expr, byte, optional-type, DecimalNumber, nil-literal, value:toBalString, numeric-nil-lifting

function init() {
    byte? a = 1;
    byte? b = 2;
    byte? c = 3;
    byte? d = 86;
    byte? e = 255;
    byte? f = ();

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 3
    io:println(a * d); // @output 86
    io:println(a * e); // @output 255
    io:println((a * f).toBalString()); // @output ()

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 6
    io:println(b * d); // @output 172
    io:println(b * e); // @output 510
    io:println((b * f).toBalString()); // @output ()

    io:println(c * a); // @output 3
    io:println(c * b); // @output 6
    io:println(c * c); // @output 9
    io:println(c * d); // @output 258
    io:println(c * e); // @output 765
    io:println((c * f).toBalString()); // @output ()

    io:println(d * a); // @output 86
    io:println(d * b); // @output 172
    io:println(d * c); // @output 258
    io:println(d * d); // @output 7396
    io:println(d * e); // @output 21930
    io:println((d * f).toBalString()); // @output ()

    io:println(e * a); // @output 255
    io:println(e * b); // @output 510
    io:println(e * c); // @output 765
    io:println(e * d); // @output 21930
    io:println(e * e); // @output 65025
    io:println((e * f).toBalString()); // @output ()

    io:println((f * a).toBalString()); // @output ()
    io:println((f * b).toBalString()); // @output ()
    io:println((f * c).toBalString()); // @output ()
    io:println((f * d).toBalString()); // @output ()
    io:println((f * e).toBalString()); // @output ()
    io:println((f * f).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where at least one operand is zero, for optional byte.
Labels: multiplicative-expr, byte, optional-type, DecimalNumber, nil-literal, value:toBalString, numeric-nil-lifting

function init() {
    byte? a = 0;
    byte? b = 1;
    byte? c = 128;
    byte? d = 255;
    byte? e = ();

    io:println(a * a); // @output 0

    io:println(a * b); // @output 0
    io:println(a * c); // @output 0
    io:println(a * d); // @output 0
    io:println((a * e).toBalString()); // @output ()

    io:println(b * a); // @output 0
    io:println(c * a); // @output 0
    io:println(d * a); // @output 0
    io:println((e * a).toBalString()); // @output ()
}

Test-Case: panic
Description: Test 1 for integer multiplication overflow, where one operand is of type optional byte.
Labels: multiplicative-expr, int, byte, optional-type, DecimalNumber, numeric-nil-lifting

function init() {
    byte? a = 255;
    int b = 36170086419038337;    
    int? _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: panic
Description: Test 2 for integer multiplication overflow, where one operand is of type optional byte.
Labels: multiplicative-expr, int, byte, optional-type, DecimalNumber, numeric-nil-lifting

function init() {
    int? a = -461168601842738791;
    byte? b = 20;  
    int? _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for positive non-zero integers, for optional int:Unsigned16.
Labels: multiplicative-expr, int:Unsigned16, optional-type, DecimalNumber, nil-literal, value:toBalString, numeric-nil-lifting

function init() {
    int:Unsigned16? a = 1;
    int:Unsigned16? b = 2;
    int:Unsigned16? c = 5;
    int:Unsigned16? d = 40123;
    int:Unsigned16? e = 65535;
    int:Unsigned16? f = ();

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 5
    io:println(a * d); // @output 40123
    io:println(a * e); // @output 65535
    io:println((a * f).toBalString()); // @output ()

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 10
    io:println(b * d); // @output 80246
    io:println(b * e); // @output 131070
    io:println((b * f).toBalString()); // @output ()

    io:println(c * a); // @output 5
    io:println(c * b); // @output 10
    io:println(c * c); // @output 25
    io:println(c * d); // @output 200615
    io:println(c * e); // @output 327675
    io:println((c * f).toBalString()); // @output ()

    io:println(d * a); // @output 40123
    io:println(d * b); // @output 80246
    io:println(d * c); // @output 200615
    io:println(d * d); // @output 1609855129
    io:println(d * e); // @output 2629460805
    io:println((d * f).toBalString()); // @output ()

    io:println(e * a); // @output 65535
    io:println(e * b); // @output 131070
    io:println(e * c); // @output 327675
    io:println(e * d); // @output 2629460805
    io:println(e * e); // @output 4294836225
    io:println((e * f).toBalString()); // @output ()

    io:println((f * a).toBalString()); // @output ()
    io:println((f * b).toBalString()); // @output ()
    io:println((f * c).toBalString()); // @output ()
    io:println((f * d).toBalString()); // @output ()
    io:println((f * e).toBalString()); // @output ()
    io:println((f * f).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where at least one operand is zero, for optional int:Unsigned16.
Labels: multiplicative-expr, int:Unsigned16, optional-type, DecimalNumber, nil-literal, value:toBalString, numeric-nil-lifting

function init() {
    int:Unsigned16? a = 0;
    int:Unsigned16? b = 1;
    int:Unsigned16? c = 128;
    int:Unsigned16? d = 255;
    int:Unsigned16? e = ();

    io:println(a * a); // @output 0

    io:println(a * b); // @output 0
    io:println(a * c); // @output 0
    io:println(a * d); // @output 0
    io:println((a * e).toBalString()); // @output ()

    io:println(b * a); // @output 0
    io:println(c * a); // @output 0
    io:println(d * a); // @output 0
    io:println((e * a).toBalString()); // @output ()
}

Test-Case: panic
Description: Test 1 for integer multiplication overflow, where one operand is of type optional int:Unsigned16.
Labels: multiplicative-expr, int:Unsigned16, optional-type, DecimalNumber, numeric-nil-lifting

function init() {
    int:Unsigned16? a = 65534;
    int? b = 140741783453701;    
    int? _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: panic
Description: Test 2 for integer multiplication overflow, where one operand is of type optional int:Unsigned16.
Labels: multiplicative-expr, int:Unsigned16, optional-type, DecimalNumber, value:toBalString, unary-minus, numeric-nil-lifting

function init() {
    int a = -30744573456182586;
    int:Unsigned16? b = 301;  
    int? _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for positive non-zero integers, for optional int:Unsigned32.
Labels: multiplicative-expr, int:Unsigned32, optional-type, DecimalNumber, nil-literal, value:toBalString, numeric-nil-lifting

function init() {
    int:Unsigned32? a = 1;
    int:Unsigned32? b = 2;
    int:Unsigned32? c = 10;
    int:Unsigned32? d = 12034;
    int:Unsigned32? e = 429496729;
    int:Unsigned32? f = ();

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 10
    io:println(a * d); // @output 12034
    io:println(a * e); // @output 429496729
    io:println((a * f).toBalString()); // @output ()

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 20
    io:println(b * d); // @output 24068
    io:println(b * e); // @output 858993458
    io:println((b * f).toBalString()); // @output ()

    io:println(c * a); // @output 10
    io:println(c * b); // @output 20
    io:println(c * c); // @output 100
    io:println(c * d); // @output 120340
    io:println(c * e); // @output 4294967290
    io:println((c * f).toBalString()); // @output ()

    io:println(d * a); // @output 12034
    io:println(d * b); // @output 24068
    io:println(d * c); // @output 120340
    io:println(d * d); // @output 144817156
    io:println(d * e); // @output 5168563636786
    io:println((d * f).toBalString()); // @output ()

    io:println(e * a); // @output 429496729
    io:println(e * b); // @output 858993458
    io:println(e * c); // @output 4294967290
    io:println(e * d); // @output 5168563636786
    io:println(e * e); // @output 184467440221699441
    io:println((e * f).toBalString()); // @output ()

    io:println((f * a).toBalString()); // @output ()
    io:println((f * b).toBalString()); // @output ()
    io:println((f * c).toBalString()); // @output ()
    io:println((f * d).toBalString()); // @output ()
    io:println((f * e).toBalString()); // @output ()
    io:println((f * f).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where at least one operand is zero, for optional int:Unsigned32.
Labels: multiplicative-expr, int:Unsigned32, optional-type, DecimalNumber, nil-literal, value:toBalString, numeric-nil-lifting

function init() {
    int:Unsigned32? a = 0;
    int:Unsigned32? b = 1;
    int:Unsigned32? c = 1259273;
    int:Unsigned32? d = 4294967295;
    int:Unsigned32? e = ();

    io:println(a * a); // @output 0

    io:println(a * b); // @output 0
    io:println(a * c); // @output 0
    io:println(a * d); // @output 0
    io:println((a * e).toBalString()); // @output ()

    io:println(b * a); // @output 0
    io:println(c * a); // @output 0
    io:println(d * a); // @output 0
    io:println((e * a).toBalString()); // @output ()
}

Test-Case: panic
Description: Test 1 for integer multiplication overflow, where one operand is of type optional int:Unsigned32.
Labels: multiplicative-expr, int:Unsigned32, optional-type, DecimalNumber, numeric-nil-lifting

function init() {
    int:Unsigned32? a = 4294127249;
    int b = 2147903754;
    int? _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: panic
Description: Test 2 for integer multiplication overflow, where one operand is of type optional int:Unsigned32.
Labels: multiplicative-expr, int:Unsigned32, optional-type, DecimalNumber, unary-minus, numeric-nil-lifting

function init() {
    int? a = -140737488355328;
    int:Unsigned32? b = 65537;
    int? _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: panic
Description: Test 3 for integer multiplication overflow, where both operands are of type optional int:Unsigned32.
Labels: multiplicative-expr, int:Unsigned32, optional-type, DecimalNumber, numeric-nil-lifting

function init() {
    int:Unsigned32? a = 4294967295;
    int? _ = a * a; // @panic integer overflow on multiplication
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for positive non-zero integers, for optional int:Signed8.
Labels: multiplicative-expr, int:Signed8, optional-type, DecimalNumber, nil-literal, value:toBalString, numeric-nil-lifting

function init() {
    int:Signed8? a = 1;
    int:Signed8? b = 2;
    int:Signed8? c = 10;
    int:Signed8? d = 100;
    int:Signed8? e = 127;
    int:Signed8? f = ();

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 10
    io:println(a * d); // @output 100
    io:println(a * e); // @output 127
    io:println((a * f).toBalString()); // @output ()

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 20
    io:println(b * d); // @output 200
    io:println(b * e); // @output 254
    io:println((b * f).toBalString()); // @output ()

    io:println(c * a); // @output 10
    io:println(c * b); // @output 20
    io:println(c * c); // @output 100
    io:println(c * d); // @output 1000
    io:println(c * e); // @output 1270
    io:println((c * f).toBalString()); // @output ()

    io:println(d * a); // @output 100
    io:println(d * b); // @output 200
    io:println(d * c); // @output 1000
    io:println(d * d); // @output 10000
    io:println(d * e); // @output 12700
    io:println((d * f).toBalString()); // @output ()

    io:println(e * a); // @output 127
    io:println(e * b); // @output 254
    io:println(e * c); // @output 1270
    io:println(e * d); // @output 12700
    io:println(e * e); // @output 16129
    io:println((e * f).toBalString()); // @output ()

    io:println((f * a).toBalString()); // @output ()
    io:println((f * b).toBalString()); // @output ()
    io:println((f * c).toBalString()); // @output ()
    io:println((f * d).toBalString()); // @output ()
    io:println((f * e).toBalString()); // @output ()
    io:println((f * f).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for negative non-zero integers, for optional int:Signed8.
Labels: multiplicative-expr, int:Signed8, optional-type, DecimalNumber, nil-literal, value:toBalString, unary-minus, numeric-nil-lifting

function init() {
    int:Signed8? a = -1;
    int:Signed8? b = -2;
    int:Signed8? c = -100;
    int:Signed8? d = -120;
    int:Signed8? e = -128;
    int:Signed8? f = ();

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 100
    io:println(a * d); // @output 120
    io:println(a * e); // @output 128
    io:println((a * f).toBalString()); // @output ()

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 200
    io:println(b * d); // @output 240
    io:println(b * e); // @output 256
    io:println((b * f).toBalString()); // @output ()

    io:println(c * a); // @output 100
    io:println(c * b); // @output 200
    io:println(c * c); // @output 10000
    io:println(c * d); // @output 12000
    io:println(c * e); // @output 12800
    io:println((c * f).toBalString()); // @output ()

    io:println(d * a); // @output 120
    io:println(d * b); // @output 240
    io:println(d * c); // @output 12000
    io:println(d * d); // @output 14400
    io:println(d * e); // @output 15360
    io:println((d * f).toBalString()); // @output ()

    io:println(e * a); // @output 128
    io:println(e * b); // @output 256
    io:println(e * c); // @output 12800
    io:println(e * d); // @output 15360
    io:println(e * e); // @output 16384
    io:println((e * f).toBalString()); // @output ()

    io:println((f * a).toBalString()); // @output ()
    io:println((f * b).toBalString()); // @output ()
    io:println((f * c).toBalString()); // @output ()
    io:println((f * d).toBalString()); // @output ()
    io:println((f * e).toBalString()); // @output ()
    io:println((f * f).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where one operand is negative
             and the other is positive, for optional int:Signed8.
Labels: multiplicative-expr, int:Signed8, optional-type, DecimalNumber, unary-minus, numeric-nil-lifting

function init() {
    int:Signed8? a = -128;
    int:Signed8? b = -100;
    int:Signed8? c = -1;
    int:Signed8? d = 1;
    int:Signed8? e = 100;
    int:Signed8? f = 127;

    io:println(a * d); // @output -128
    io:println(a * e); // @output -12800
    io:println(a * f); // @output -16256

    io:println(b * d); // @output -100
    io:println(b * e); // @output -10000
    io:println(b * f); // @output -12700

    io:println(c * d); // @output -1
    io:println(c * e); // @output -100
    io:println(c * f); // @output -127

    io:println(d * a); // @output -128
    io:println(d * b); // @output -100
    io:println(d * c); // @output -1

    io:println(e * a); // @output -12800
    io:println(e * b); // @output -10000
    io:println(e * c); // @output -100

    io:println(f * a); // @output -16256
    io:println(f * b); // @output -12700
    io:println(f * c); // @output -127
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where at least one operand is zero, for optional int:Signed8.
Labels: multiplicative-expr, int:Signed8, optional-type, DecimalNumber, nil-literal, value:toBalString, unary-minus, numeric-nil-lifting

function init() {
    int:Signed8? a = -128;
    int:Signed8? b = -100;
    int:Signed8? c = -1;
    int:Signed8? d = -0;
    int:Signed8? e = 0;
    int:Signed8? f = 1;
    int:Signed8? g = 100;
    int:Signed8? h = 127;
    int:Signed8? i = ();

    io:println(a * d); // @output 0
    io:println(a * e); // @output 0

    io:println(b * d); // @output 0
    io:println(b * e); // @output 0

    io:println(c * d); // @output 0
    io:println(c * e); // @output 0

    io:println(d * a); // @output 0
    io:println(d * b); // @output 0
    io:println(d * c); // @output 0
    io:println(d * d); // @output 0
    io:println(d * e); // @output 0
    io:println(d * f); // @output 0
    io:println(d * g); // @output 0
    io:println(d * h); // @output 0
    io:println((d * i).toBalString()); // @output ()

    io:println(e * a); // @output 0
    io:println(e * b); // @output 0
    io:println(e * c); // @output 0
    io:println(e * d); // @output 0
    io:println(e * e); // @output 0
    io:println(e * f); // @output 0
    io:println(e * g); // @output 0
    io:println(e * h); // @output 0
    io:println((e * i).toBalString()); // @output ()

    io:println(f * d); // @output 0
    io:println(f * e); // @output 0

    io:println(g * d); // @output 0
    io:println(g * e); // @output 0

    io:println(h * d); // @output 0
    io:println(h * e); // @output 0

    io:println((i * d).toBalString()); // @output ()
    io:println((i * e).toBalString()); // @output ()
}

Test-Case: panic
Description: Test 1 for integer multiplication overflow, for optional int:Signed8.
Labels: multiplicative-expr, int:Signed8, optional-type, DecimalNumber, numeric-nil-lifting

function init() {
    int? a = 72624976668147842;
    int:Signed8? b = 127;
    int? _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: panic
Description: Test 2 for integer multiplication overflow, for optional int:Signed8.
Labels: multiplicative-expr, int:Signed8, optional-type, DecimalNumber, unary-minus, numeric-nil-lifting

function init() {
    int:Signed8? a = -128;
    int? _ = 72057594037927937 * a; // @panic integer overflow on multiplication
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for positive non-zero integers, for optional int:Signed16.
Labels: multiplicative-expr, int:Signed16, optional-type, DecimalNumber, nil-literal, value:toBalString, numeric-nil-lifting

function init() {
    int:Signed16? a = 1;
    int:Signed16? b = 2;
    int:Signed16? c = 10;
    int:Signed16? d = 12345;
    int:Signed16? e = 32767;
    int:Signed16? f = ();

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 10
    io:println(a * d); // @output 12345
    io:println(a * e); // @output 32767
    io:println((a * f).toBalString()); // @output ()

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 20
    io:println(b * d); // @output 24690
    io:println(b * e); // @output 65534
    io:println((b * f).toBalString()); // @output ()

    io:println(c * a); // @output 10
    io:println(c * b); // @output 20
    io:println(c * c); // @output 100
    io:println(c * d); // @output 123450
    io:println(c * e); // @output 327670
    io:println((c * f).toBalString()); // @output ()

    io:println(d * a); // @output 12345
    io:println(d * b); // @output 24690
    io:println(d * c); // @output 123450
    io:println(d * d); // @output 152399025
    io:println(d * e); // @output 404508615
    io:println((d * f).toBalString()); // @output ()

    io:println(e * a); // @output 32767
    io:println(e * b); // @output 65534
    io:println(e * c); // @output 327670
    io:println(e * d); // @output 404508615
    io:println(e * e); // @output 1073676289
    io:println((e * f).toBalString()); // @output ()

    io:println((f * a).toBalString()); // @output ()
    io:println((f * b).toBalString()); // @output ()
    io:println((f * c).toBalString()); // @output ()
    io:println((f * d).toBalString()); // @output ()
    io:println((f * e).toBalString()); // @output ()
    io:println((f * f).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for negative non-zero integers, for optional int:Signed16.
Labels: multiplicative-expr, int:Signed16, optional-type, DecimalNumber, nil-literal, value:toBalString, unary-minus, numeric-nil-lifting

function init() {
    int:Signed16? a = -1;
    int:Signed16? b = -2;
    int:Signed16? c = -100;
    int:Signed16? d = -20000;
    int:Signed16? e = -32768;
    int:Signed16? f = ();

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 100
    io:println(a * d); // @output 20000
    io:println(a * e); // @output 32768
    io:println((a * f).toBalString()); // @output ()

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 200
    io:println(b * d); // @output 40000
    io:println(b * e); // @output 65536
    io:println((b * f).toBalString()); // @output ()

    io:println(c * a); // @output 100
    io:println(c * b); // @output 200
    io:println(c * c); // @output 10000
    io:println(c * d); // @output 2000000
    io:println(c * e); // @output 3276800
    io:println((c * f).toBalString()); // @output ()

    io:println(d * a); // @output 20000
    io:println(d * b); // @output 40000
    io:println(d * c); // @output 2000000
    io:println(d * d); // @output 400000000
    io:println(d * e); // @output 655360000
    io:println((d * f).toBalString()); // @output ()

    io:println(e * a); // @output 32768
    io:println(e * b); // @output 65536
    io:println(e * c); // @output 3276800
    io:println(e * d); // @output 655360000
    io:println(e * e); // @output 1073741824
    io:println((e * f).toBalString()); // @output ()

    io:println((f * a).toBalString()); // @output ()
    io:println((f * b).toBalString()); // @output ()
    io:println((f * c).toBalString()); // @output ()
    io:println((f * d).toBalString()); // @output ()
    io:println((f * e).toBalString()); // @output ()
    io:println((f * f).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where one operand is negative
             and the other is positive, for optional int:Signed16.
Labels: multiplicative-expr, int:Signed16, optional-type, DecimalNumber, unary-minus, numeric-nil-lifting

function init() {
    int:Signed16? a = -32768;
    int:Signed16? b = -200;
    int:Signed16? c = -1;
    int:Signed16? d = 1;
    int:Signed16? e = 200;
    int:Signed16? f = 32767;

    io:println(a * d); // @output -32768
    io:println(a * e); // @output -6553600
    io:println(a * f); // @output -1073709056

    io:println(b * d); // @output -200
    io:println(b * e); // @output -40000
    io:println(b * f); // @output -6553400

    io:println(c * d); // @output -1
    io:println(c * e); // @output -200
    io:println(c * f); // @output -32767

    io:println(d * a); // @output -32768
    io:println(d * b); // @output -200
    io:println(d * c); // @output -1

    io:println(e * a); // @output -6553600
    io:println(e * b); // @output -40000
    io:println(e * c); // @output -200

    io:println(f * a); // @output -1073709056
    io:println(f * b); // @output -6553400
    io:println(f * c); // @output -32767
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where at least one operand is zero, for optional int:Signed16.
Labels: multiplicative-expr, int:Signed16, optional-type, DecimalNumber, nil-literal, value:toBalString, unary-minus, numeric-nil-lifting

function init() {
    int:Signed16? a = -32768;
    int:Signed16? b = -100;
    int:Signed16? c = -1;
    int:Signed16? d = -0;
    int:Signed16? e = 0;
    int:Signed16? f = 1;
    int:Signed16? g = 1100;
    int:Signed16? h = 32767;
    int:Signed16? i = ();

    io:println(a * d); // @output 0
    io:println(a * e); // @output 0

    io:println(b * d); // @output 0
    io:println(b * e); // @output 0

    io:println(c * d); // @output 0
    io:println(c * e); // @output 0

    io:println(d * a); // @output 0
    io:println(d * b); // @output 0
    io:println(d * c); // @output 0
    io:println(d * d); // @output 0
    io:println(d * e); // @output 0
    io:println(d * f); // @output 0
    io:println(d * g); // @output 0
    io:println(d * h); // @output 0
    io:println((d * i).toBalString()); // @output ()

    io:println(e * a); // @output 0
    io:println(e * b); // @output 0
    io:println(e * c); // @output 0
    io:println(e * d); // @output 0
    io:println(e * e); // @output 0
    io:println(e * f); // @output 0
    io:println(e * g); // @output 0
    io:println(e * h); // @output 0
    io:println((e * i).toBalString()); // @output ()

    io:println(f * d); // @output 0
    io:println(f * e); // @output 0

    io:println(g * d); // @output 0
    io:println(g * e); // @output 0

    io:println(h * d); // @output 0
    io:println(h * e); // @output 0

    io:println((i * d).toBalString()); // @output ()
    io:println((i * e).toBalString()); // @output ()
}

Test-Case: panic
Description: Test 1 for integer multiplication overflow, for optional int:Signed16.
Labels: multiplicative-expr, int:Signed16, optional-type, DecimalNumber, value:toBalString, numeric-nil-lifting

function init() {
    int? a = 281483566907401;
    int:Signed16? b = 32767;
    int? _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: panic
Description: Test 2 for integer multiplication overflow, for optional int:Signed16.
Labels: multiplicative-expr, DecimalNumber, int:Signed16, numeric-nil-lifting

function init() {
    int:Signed16? a = -32768;
    int b = 281474976710666;
    int? _ = b * a; // @panic integer overflow on multiplication
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for positive non-zero integers, for optional int:Signed32.
Labels: multiplicative-expr, int:Signed32, optional-type, DecimalNumber, nil-literal, value:toBalString, unary-minus, numeric-nil-lifting

function init() {
    int:Signed32? a = 1;
    int:Signed32? b = 2;
    int:Signed32? c = 10;
    int:Signed32? d = 1000;
    int:Signed32? e = 2147483647;
    int:Signed32? f = ();

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 10
    io:println(a * d); // @output 1000
    io:println(a * e); // @output 2147483647
    io:println((a * f).toBalString()); // @output ()

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 20
    io:println(b * d); // @output 2000
    io:println(b * e); // @output 4294967294
    io:println((b * f).toBalString()); // @output ()

    io:println(c * a); // @output 10
    io:println(c * b); // @output 20
    io:println(c * c); // @output 100
    io:println(c * d); // @output 10000
    io:println(c * e); // @output 21474836470
    io:println((c * f).toBalString()); // @output ()

    io:println(d * a); // @output 1000
    io:println(d * b); // @output 2000
    io:println(d * c); // @output 10000
    io:println(d * d); // @output 1000000
    io:println(d * e); // @output 2147483647000
    io:println((d * f).toBalString()); // @output ()

    io:println(e * a); // @output 2147483647
    io:println(e * b); // @output 4294967294
    io:println(e * c); // @output 21474836470
    io:println(e * d); // @output 2147483647000
    io:println(e * e); // @output 4611686014132420609
    io:println((e * f).toBalString()); // @output ()

    io:println((f * a).toBalString()); // @output ()
    io:println((f * b).toBalString()); // @output ()
    io:println((f * c).toBalString()); // @output ()
    io:println((f * d).toBalString()); // @output ()
    io:println((f * e).toBalString()); // @output ()
    io:println((f * f).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for negative non-zero integers, for optional int:Signed32.
Labels: multiplicative-expr, int:Signed32, optional-type, DecimalNumber, nil-literal, value:toBalString, unary-minus, numeric-nil-lifting

function init() {
    int:Signed32? a = -1;
    int:Signed32? b = -2;
    int:Signed32? c = -100;
    int:Signed32? d = -20000;
    int:Signed32? e = -2147483648;
    int:Signed32? f = ();

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println(a * c); // @output 100
    io:println(a * d); // @output 20000
    io:println(a * e); // @output 2147483648
    io:println((a * f).toBalString()); // @output ()

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println(b * c); // @output 200
    io:println(b * d); // @output 40000
    io:println(b * e); // @output 4294967296
    io:println((b * f).toBalString()); // @output ()

    io:println(c * a); // @output 100
    io:println(c * b); // @output 200
    io:println(c * c); // @output 10000
    io:println(c * d); // @output 2000000
    io:println(c * e); // @output 214748364800
    io:println((c * f).toBalString()); // @output ()

    io:println(d * a); // @output 20000
    io:println(d * b); // @output 40000
    io:println(d * c); // @output 2000000
    io:println(d * d); // @output 400000000
    io:println(d * e); // @output 42949672960000
    io:println((d * f).toBalString()); // @output ()

    io:println(e * a); // @output 2147483648
    io:println(e * b); // @output 4294967296
    io:println(e * c); // @output 214748364800
    io:println(e * d); // @output 42949672960000
    io:println(e * e); // @output 4611686018427387904
    io:println((e * f).toBalString()); // @output ()

    io:println((f * a).toBalString()); // @output ()
    io:println((f * b).toBalString()); // @output ()
    io:println((f * c).toBalString()); // @output ()
    io:println((f * d).toBalString()); // @output ()
    io:println((f * e).toBalString()); // @output ()
    io:println((f * f).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where one operand is negative
             and the other is positive, for optional int:Signed32.
Labels: multiplicative-expr, int:Signed32, optional-type, DecimalNumber, unary-minus, numeric-nil-lifting

function init() {
    int:Signed32? a = -2147483648;
    int:Signed32? b = -200;
    int:Signed32? c = -1;
    int:Signed32? d = 1;
    int:Signed32? e = 200;
    int:Signed32? f = 2147483647;

    io:println(a * d); // @output -2147483648
    io:println(a * e); // @output -429496729600
    io:println(a * f); // @output -4611686016279904256

    io:println(b * d); // @output -200
    io:println(b * e); // @output -40000
    io:println(b * f); // @output -429496729400

    io:println(c * d); // @output -1
    io:println(c * e); // @output -200
    io:println(c * f); // @output -2147483647

    io:println(d * a); // @output -2147483648
    io:println(d * b); // @output -200
    io:println(d * c); // @output -1

    io:println(e * a); // @output -429496729600
    io:println(e * b); // @output -40000
    io:println(e * c); // @output -200

    io:println(f * a); // @output -4611686016279904256
    io:println(f * b); // @output -429496729400
    io:println(f * c); // @output -2147483647
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where at least one operand is zero, for optional int:Signed32.
Labels: multiplicative-expr, int:Signed32, optional-type, DecimalNumber, nil-literal, value:toBalString, unary-minus, numeric-nil-lifting

function init() {
    int:Signed32? a = -2147483648;
    int:Signed32? b = -12342340;
    int:Signed32? c = -1;
    int:Signed32? d = -0;
    int:Signed32? e = 0;
    int:Signed32? f = 1;
    int:Signed32? g = 139456264;
    int:Signed32? h = 2147483647;
    int:Signed32? i = ();

    io:println(a * d); // @output 0
    io:println(a * e); // @output 0

    io:println(b * d); // @output 0
    io:println(b * e); // @output 0

    io:println(c * d); // @output 0
    io:println(c * e); // @output 0

    io:println(d * a); // @output 0
    io:println(d * b); // @output 0
    io:println(d * c); // @output 0
    io:println(d * d); // @output 0
    io:println(d * e); // @output 0
    io:println(d * f); // @output 0
    io:println(d * g); // @output 0
    io:println(d * h); // @output 0
    io:println((d * i).toBalString()); // @output ()

    io:println(e * a); // @output 0
    io:println(e * b); // @output 0
    io:println(e * c); // @output 0
    io:println(e * d); // @output 0
    io:println(e * e); // @output 0
    io:println(e * f); // @output 0
    io:println(e * g); // @output 0
    io:println(e * h); // @output 0
    io:println((e * i).toBalString()); // @output ()

    io:println(f * d); // @output 0
    io:println(f * e); // @output 0

    io:println(g * d); // @output 0
    io:println(g * e); // @output 0

    io:println(h * d); // @output 0
    io:println(h * e); // @output 0

    io:println((i * d).toBalString()); // @output ()
    io:println((i * e).toBalString()); // @output ()
}

Test-Case: panic
Description: Test 1 for integer multiplication overflow, for optional int:Signed32.
Labels: multiplicative-expr, int:Signed32, optional-type, DecimalNumber, numeric-nil-lifting

function init() {
    int? a = 4294967399;
    int:Signed32? b = 2147483646;
    int? _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: panic
Description: Test 2 for integer multiplication overflow, for optional int:Signed32.
Labels: multiplicative-expr, int:Signed32, optional-type, DecimalNumber, unary-minus, numeric-nil-lifting

function init() {
    int:Signed32? a = -2147483648;
    int? _ = a * 4294967297; // @panic integer overflow on multiplication
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for positive non-zero integers,
             for user-defined subtype of int.
Labels: multiplicative-expr, union-type, singleton-type, optional-type, DecimalNumber, nil-literal, module-type-defn, unary-minus, value:toBalString, numeric-nil-lifting

type Ints -2|-1|0|1|2;

function init() {
    Ints? a = 1;
    Ints? b = 2;
    Ints? c = ();

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println((a * c).toBalString()); // @output ()

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println((b * c).toBalString()); // @output ()

    io:println((c * a).toBalString()); // @output ()
    io:println((c * b).toBalString()); // @output ()
    io:println((c * c).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, for negative non-zero integers,
             for user-defined subtype of int.
Labels: multiplicative-expr, union-type, optional-type, DecimalNumber, nil-literal, module-type-defn, unary-minus, value:toBalString, numeric-nil-lifting

type Ints -2|-1|0|1|2;

function init() {
    Ints? a = -1;
    Ints? b = -2;
    Ints? c = ();

    io:println(a * a); // @output 1
    io:println(a * b); // @output 2
    io:println((a * c).toBalString()); // @output ()

    io:println(b * a); // @output 2
    io:println(b * b); // @output 4
    io:println((b * c).toBalString()); // @output ()

    io:println((c * a).toBalString()); // @output ()
    io:println((c * b).toBalString()); // @output ()
    io:println((c * c).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where one operand is negative
             and the other is positive, for user-defined subtype of int.
Labels: multiplicative-expr, union-type, singleton-type, optional-type, DecimalNumber, module-type-defn, unary-minus, numeric-nil-lifting

type Ints -2|-1|0|1|2;

function init() {
    Ints? a = -1;
    Ints? b = -2;
    Ints? c = 1;
    Ints? d = 2;

    io:println(a * c); // @output -1
    io:println(a * d); // @output -2

    io:println(b * c); // @output -2
    io:println(b * d); // @output -4

    io:println(c * a); // @output -1
    io:println(c * b); // @output -2

    io:println(d * a); // @output -2
    io:println(d * b); // @output -4
}

Test-Case: output
Description: Test integer multiplication non-overflow scenarios, where at least one operand is zero, for
             user-defined subtype of int.
Labels: multiplicative-expr, union-type, singleton-type, optional-type, DecimalNumber, nil-literal, module-type-defn, unary-minus, value:toBalString, numeric-nil-lifting

type Ints -2|-1|0|1|2;

function init() {
    Ints? a = -2;
    Ints? b = -1;
    Ints? c = -0;
    Ints? d = 0;
    Ints? e = 1;
    Ints? f = 2;
    Ints? g = ();

    io:println(a * c); // @output 0
    io:println(a * d); // @output 0

    io:println(b * c); // @output 0
    io:println(b * d); // @output 0

    io:println(c * a); // @output 0
    io:println(c * b); // @output 0
    io:println(c * c); // @output 0
    io:println(c * d); // @output 0
    io:println(c * e); // @output 0
    io:println(c * f); // @output 0
    io:println((c * g).toBalString()); // @output ()

    io:println(d * a); // @output 0
    io:println(d * b); // @output 0
    io:println(d * c); // @output 0
    io:println(d * d); // @output 0
    io:println(d * e); // @output 0
    io:println(d * f); // @output 0
    io:println((d * g).toBalString()); // @output ()

    io:println(e * c); // @output 0
    io:println(e * d); // @output 0

    io:println(f * c); // @output 0
    io:println(f * d); // @output 0

    io:println((g * c).toBalString()); // @output ()
    io:println((g * d).toBalString()); // @output ()
}

Test-Case: panic
Description: Test 1 for integer multiplication overflow, for user-defined subtype of int.
Labels: multiplicative-expr, int, union-type, optional-type, DecimalNumber, module-type-defn, unary-minus, numeric-nil-lifting

type Ints -2|-1|0|1|2;

function init() {
    int? a = 4611686018427387904;
    Ints? b = 2;
    int? _ = a * b; // @panic integer overflow on multiplication
}

Test-Case: panic
Description: Test 2 for integer multiplication overflow, for user-defined subtype of int.
Labels: multiplicative-expr, int, union-type, singleton-type, optional-type, DecimalNumber, module-type-defn, unary-minus, numeric-nil-lifting

type Ints -2|-1|0|1|2;
type NilableInts Ints?;

function init() {
    NilableInts a = -2;
    int? _ = a * 4611686018427387905; // @panic integer overflow on multiplication
}

Test-Case: output
Description: Test variable reference as integer multiplication operands.
Labels: multiplicative-expr, int, DecimalNumber, variable-reference-expr, numeric-nil-lifting

function init() {
    int a = 2;
    int b = a * a;
    io:println(b); // @output 4
}

Test-Case: output
Description: Test field and member access as integer multiplication operands.
Labels: multiplicative-expr, int, DecimalNumber, record-type, mapping-constructor-expr, array-type, list-constructor-expr, module-type-defn

function init() {
    Record c = {x: 10};
    int[] d = [30, 40];
    int e = c.x * d[0];
    io:println(e); // @output 300
}

type Record record {
    int x;
};

Test-Case: output
Description: Test function and method call as integer multiplication operands.
Labels: multiplicative-expr, int, DecimalNumber, function-call-expr, module-class-defn, explicit-new-expr, method-call-expr 

function init() {
    Class f = new Class();
    int g = f.getInt() * getInt();
    io:println(g); // @output 360
}

function getInt() returns int {
    return 2 * 3;
}

class Class {
    function getInt() returns int {
        return 60;
    }
}

Test-Case: output
Description: Test let expression in integer multiplication operands.
Labels: multiplicative-expr, int, DecimalNumber, let-expr 

function init() {
    int h = (let int h1 = 3 * 4 in h1) * 5;
    io:println(h); // @output 60
}

Test-Case: output
Description: Test type cast expression in integer multiplication operands.
Labels: multiplicative-expr, int, DecimalNumber, type-cast-expr

function init() {
    int i = <int> 6 * 7;
    io:println(i); // @output 42
}

Test-Case: output
Description: Test unary expressions in integer multiplication operands.
Labels: multiplicative-expr, int, DecimalNumber, unary-plus, unary-minus, unary-complement 

function init() {
    int k = +4 * -3;
    io:println(k); // @output -12

    int l = -(-2 * 5);
    io:println(l); // @output 10

    int m = ~(2 * 5);
    io:println(m); // @output -11

    int n = ~2 * 5;
    io:println(n); // @output -15
}

Test-Case: output
Description: Test 1 for multiplicative expression in integer multiplication operands.
Labels: multiplicative-expr, int, DecimalNumber

function init() {
    int o = 2 * 404 % 10 / 4;
    io:println(o); // @output 2
}

Test-Case: output
Description: Test 2 for multiplicative expression in integer multiplication operands.
Labels: multiplicative-expr, int, DecimalNumber

function init() {
    int o = 2 * (404 % 10 / 4);
    io:println(o); // @output 2
}

Test-Case: output
Description: Test additive expressions as integer multiplication operands.
Labels: multiplicative-expr, int, DecimalNumber, additive-expr 

function init() {
    int p = (1 + 2) * (3 + 4);
    io:println(p); // @output 21
}

Test-Case: output
Description: Test shift expressions as integer multiplication operands.
Labels: multiplicative-expr, int, DecimalNumber, shift-expr 

function init() {
    int p = (1 << 2) * (100 >> 4);
    io:println(p); // @output 24
}

Test-Case: output
Description: Test binary bitwise expressions as integer multiplication operands.
Labels: multiplicative-expr, int, DecimalNumber, binary-bitwise-expr 

function init() {
    int p = (2 & 6) * (2 ^ 6);
    io:println(p); // @output 8
}

Test-Case: output
Description: Test conditional expressions as integer multiplication operands.
Labels: multiplicative-expr, int, DecimalNumber, nil-literal, ternary-conditional-expr, binary-conditional-expr, union-type, error, optional-type

function init() {
    int|error a = 12;
    int? b = ();
    int c = (a is error ? 2 : a) * (b ?: 13);
    io:println(c); // @output 156
}

Test-Case: output
Description: Test checking expressions as integer multiplication operands.
Labels: multiplicative-expr, int, DecimalNumber, check, checkpanic, union-type, error

function init() returns error? {
    int|error a = 12;
    int c = check a * checkpanic a;
    io:println(c); // @output 144
}

Test-Case: output
Description: Test integer multiplication with operands of different int subtypes.
Labels: multiplicative-expr, int, DecimalNumber, byte, int:Signed8, int:Signed16,
        int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32, module-type-defn, union-type, singleton-type

type Ints -9|9;

function init() returns error? {
    int a = -1;
    byte b = 2;
    int:Signed8 c = -3;
    int:Signed16 d = 4;
    int:Signed32 e = -5;
    int:Unsigned8 f = 6;
    int:Unsigned16 g = 7;
    int:Unsigned32 h = 8;
    Ints i = -9;

    int v = a * b;
    io:println(v); // @output -2

    v = a * c;
    io:println(v); // @output 3

    v = a * d;
    io:println(v); // @output -4

    v = a * e;
    io:println(v); // @output 5

    v = a * f;
    io:println(v); // @output -6

    v = a * g;
    io:println(v); // @output -7

    v = a * h;
    io:println(v); // @output -8

    v = a * i;
    io:println(v); // @output 9

    v = b * a;
    io:println(v); // @output -2

    v = b * c;
    io:println(v); // @output -6

    v = b * d;
    io:println(v); // @output 8

    v = b * e;
    io:println(v); // @output -10

    v = b * f;
    io:println(v); // @output 12

    v = b * g;
    io:println(v); // @output 14

    v = b * h;
    io:println(v); // @output 16

    v = b * i;
    io:println(v); // @output -18

    v = c * a;
    io:println(v); // @output 3

    v = c * b;
    io:println(v); // @output -6

    v = c * d;
    io:println(v); // @output -12

    v = c * e;
    io:println(v); // @output 15

    v = c * f;
    io:println(v); // @output -18

    v = c * g;
    io:println(v); // @output -21

    v = c * h;
    io:println(v); // @output -24

    v = c * i;
    io:println(v); // @output 27

    v = d * a;
    io:println(v); // @output -4

    v = d * b;
    io:println(v); // @output 8

    v = d * c;
    io:println(v); // @output -12

    v = d * e;
    io:println(v); // @output -20

    v = d * f;
    io:println(v); // @output 24

    v = d * g;
    io:println(v); // @output 28

    v = d * h;
    io:println(v); // @output 32

    v = d * i;
    io:println(v); // @output -36

    v = e * a;
    io:println(v); // @output 5

    v = e * b;
    io:println(v); // @output -10

    v = e * c;
    io:println(v); // @output 15

    v = e * d;
    io:println(v); // @output -20

    v = e * f;
    io:println(v); // @output -30

    v = e * g;
    io:println(v); // @output -35

    v = e * h;
    io:println(v); // @output -40

    v = e * i;
    io:println(v); // @output 45

    v = f * a;
    io:println(v); // @output -6

    v = f * b;
    io:println(v); // @output 12

    v = f * c;
    io:println(v); // @output -18

    v = f * d;
    io:println(v); // @output 24

    v = f * e;
    io:println(v); // @output -30

    v = f * g;
    io:println(v); // @output 42

    v = f * h;
    io:println(v); // @output 48

    v = f * i;
    io:println(v); // @output -54

    v = g * a;
    io:println(v); // @output -7

    v = g * b;
    io:println(v); // @output 14

    v = g * c;
    io:println(v); // @output -21

    v = g * d;
    io:println(v); // @output 28

    v = g * e;
    io:println(v); // @output -35

    v = g * f;
    io:println(v); // @output 42

    v = g * h;
    io:println(v); // @output 56

    v = g * i;
    io:println(v); // @output -63

    v = h * a;
    io:println(v); // @output -8

    v = h * b;
    io:println(v); // @output 16

    v = h * c;
    io:println(v); // @output -24

    v = h * d;
    io:println(v); // @output 32

    v = h * e;
    io:println(v); // @output -40

    v = h * f;
    io:println(v); // @output 48

    v = h * g;
    io:println(v); // @output 56

    v = h * i;
    io:println(v); // @output -72

    v = i * a;
    io:println(v); // @output 9

    v = i * b;
    io:println(v); // @output -18

    v = i * c;
    io:println(v); // @output 27

    v = i * d;
    io:println(v); // @output -36

    v = i * e;
    io:println(v); // @output 45

    v = i * f;
    io:println(v); // @output -54

    v = i * g;
    io:println(v); // @output -63

    v = i * h;
    io:println(v); // @output -72
}

Test-Case: output
Description: Test 1 for integer multiplication with operands of different optional int subtypes.
Labels: multiplicative-expr, int, DecimalNumber, byte, int:Signed8, int:Signed16,
        int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32, nil-literal, module-type-defn, union-type, singleton-type, numeric-nil-lifting

type Ints -9|9;

function init() returns error? {
    int? a = -1;
    byte? b = 2;
    int:Signed8? c = -3;
    int:Signed16? d = 4;
    int:Signed32? e = -5;
    int:Unsigned8? f = 6;
    int:Unsigned16? g = 7;
    int:Unsigned32? h = 8;
    Ints i = -9;
    int? j = ();

    int? v = a * b;
    io:println(v); // @output -2

    v = a * c;
    io:println(v); // @output 3

    v = a * d;
    io:println(v); // @output -4

    v = a * e;
    io:println(v); // @output 5

    v = a * f;
    io:println(v); // @output -6

    v = a * g;
    io:println(v); // @output -7

    v = a * h;
    io:println(v); // @output -8

    v = a * i;
    io:println(v); // @output 9

    v = a * j;
    io:println(v.toBalString()); // @output ()

    v = b * a;
    io:println(v); // @output -2

    v = b * c;
    io:println(v); // @output -6

    v = b * d;
    io:println(v); // @output 8

    v = b * e;
    io:println(v); // @output -10

    v = b * f;
    io:println(v); // @output 12

    v = b * g;
    io:println(v); // @output 14

    v = b * h;
    io:println(v); // @output 16

    v = b * i;
    io:println(v); // @output -18

    v = b * j;
    io:println(v.toBalString()); // @output ()

    v = c * a;
    io:println(v); // @output 3

    v = c * b;
    io:println(v); // @output -6

    v = c * d;
    io:println(v); // @output -12

    v = c * e;
    io:println(v); // @output 15

    v = c * f;
    io:println(v); // @output -18

    v = c * g;
    io:println(v); // @output -21

    v = c * h;
    io:println(v); // @output -24

    v = c * i;
    io:println(v); // @output 27

    v = c * j;
    io:println(v.toBalString()); // @output ()

    v = d * a;
    io:println(v); // @output -4

    v = d * b;
    io:println(v); // @output 8

    v = d * c;
    io:println(v); // @output -12

    v = d * e;
    io:println(v); // @output -20

    v = d * f;
    io:println(v); // @output 24

    v = d * g;
    io:println(v); // @output 28

    v = d * h;
    io:println(v); // @output 32

    v = d * i;
    io:println(v); // @output -36

    v = d * j;
    io:println(v.toBalString()); // @output ()

    v = e * a;
    io:println(v); // @output 5

    v = e * b;
    io:println(v); // @output -10

    v = e * c;
    io:println(v); // @output 15

    v = e * d;
    io:println(v); // @output -20

    v = e * f;
    io:println(v); // @output -30

    v = e * g;
    io:println(v); // @output -35

    v = e * h;
    io:println(v); // @output -40

    v = e * i;
    io:println(v); // @output 45

    v = e * j;
    io:println(v.toBalString()); // @output ()
}

Test-Case: output
Description: Test 2 for integer multiplication with operands of different optional int subtypes.
Labels: multiplicative-expr, int, DecimalNumber, byte, int:Signed8, int:Signed16,
        int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32, nil-literal, module-type-defn, union-type, numeric-nil-lifting

type Ints -9|9;

function init() returns error? {
    int? a = -1;
    byte? b = 2;
    int:Signed8? c = -3;
    int:Signed16? d = 4;
    int:Signed32? e = -5;
    int:Unsigned8? f = 6;
    int:Unsigned16? g = 7;
    int:Unsigned32? h = 8;
    Ints? i = -9;
    int? j = ();

    int? v = f * a;
    io:println(v); // @output -6

    v = f * b;
    io:println(v); // @output 12

    v = f * c;
    io:println(v); // @output -18

    v = f * d;
    io:println(v); // @output 24

    v = f * e;
    io:println(v); // @output -30

    v = f * g;
    io:println(v); // @output 42

    v = f * h;
    io:println(v); // @output 48

    v = f * i;
    io:println(v); // @output -54

    v = f * j;
    io:println(v.toBalString()); // @output ()

    v = g * a;
    io:println(v); // @output -7

    v = g * b;
    io:println(v); // @output 14

    v = g * c;
    io:println(v); // @output -21

    v = g * d;
    io:println(v); // @output 28

    v = g * e;
    io:println(v); // @output -35

    v = g * f;
    io:println(v); // @output 42

    v = g * h;
    io:println(v); // @output 56

    v = g * i;
    io:println(v); // @output -63

    v = g * j;
    io:println(v.toBalString()); // @output ()

    v = h * a;
    io:println(v); // @output -8

    v = h * b;
    io:println(v); // @output 16

    v = h * c;
    io:println(v); // @output -24

    v = h * d;
    io:println(v); // @output 32

    v = h * e;
    io:println(v); // @output -40

    v = h * f;
    io:println(v); // @output 48

    v = h * g;
    io:println(v); // @output 56

    v = h * i;
    io:println(v); // @output -72

    v = h * j;
    io:println(v.toBalString()); // @output ()

    v = i * a;
    io:println(v); // @output 9

    v = i * b;
    io:println(v); // @output -18

    v = i * c;
    io:println(v); // @output 27

    v = i * d;
    io:println(v); // @output -36

    v = i * e;
    io:println(v); // @output 45

    v = i * f;
    io:println(v); // @output -54

    v = i * g;
    io:println(v); // @output -63

    v = i * h;
    io:println(v); // @output -72

    v = i * j;
    io:println(v.toBalString()); // @output ()

    v = j * a;
    io:println(v.toBalString()); // @output ()

    v = j * b;
    io:println(v.toBalString()); // @output ()

    v = j * c;
    io:println(v.toBalString()); // @output ()

    v = j * d;
    io:println(v.toBalString()); // @output ()

    v = j * e;
    io:println(v.toBalString()); // @output ()

    v = j * f;
    io:println(v.toBalString()); // @output ()

    v = j * g;
    io:println(v.toBalString()); // @output ()

    v = j * h;
    io:println(v.toBalString()); // @output ()

    v = j * i;
    io:println(v.toBalString()); // @output ()
}

Test-Case: output
Description: Test integer multiplication where at least one operand is of an int subtype union.
Fail-Issue: ballerina-platform/ballerina-lang#32912
Labels: multiplicative-expr, int, DecimalNumber, byte, int:Signed8, int:Signed16,
        int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32, module-type-defn, union-type, singleton-type

type T1 1|2;

type T2 int:Signed16|int:Signed32|int:Unsigned8|int:MAX_VALUE;

type T3 int:Unsigned16|int:Unsigned32|byte|int:Signed8;

type T4 T1|T2;

function init() {
    T1 a = 1;
    T2 b = 2;
    T3 c = 3;
    T4 d = 4;

    int v = 2 * a;
    io:println(v); // @output 2

    v = 2 * b;
    io:println(v); // @output 4

    v = 2 * c;
    io:println(v); // @output 6

    v = 2 * d;
    io:println(v); // @output 8

    v = a * a;
    io:println(v); // @output 1

    v = a * b;
    io:println(v); // @output 2

    v = a * c;
    io:println(v); // @output 3

    v = a * d;
    io:println(v); // @output 4

    v = b * b;
    io:println(v); // @output 4

    v = b * c;
    io:println(v); // @output 6

    v = b * d;
    io:println(v); // @output 8

    v = c * c;
    io:println(v); // @output 9

    v = c * d;
    io:println(v); // @output 12

    v = d * d;
    io:println(v); // @output 16
}

Test-Case: output
Description: Test integer multiplication with optional int operand's type written in different ways.
Labels: multiplicative-expr, int, DecimalNumber, nil-literal, optional-type, module-type-defn, union-type, singleton-type, value:toBalString

type T1 1|()|2;

type T2 1|2?;

function init() {
    T1 a = 1;
    T2 b = 2;
    ()|int c = ();

    int? v = a * a;
    io:println(v); // @output 1

    v = a * b;
    io:println(v); // @output 2

    v = a * c;
    io:println(v.toBalString()); // @output ()

    v = b * b;
    io:println(v); // @output 4

    v = b * c;
    io:println(v.toBalString()); // @output ()

    v = c * c;
    io:println(v.toBalString()); // @output ()
}

Test-Case: output
Description: Test integer multiplication with HexIntLiterals.
Labels: multiplicative-expr, int, DecimalNumber, HexIntLiteral

function init() {
    int a = 0xdef;
    int b = a * 0x12;
    io:println(b); // @output 64206
    io:println(a * 18); // @output 64206
    io:println(0Xdef * 18); // @output 64206
}

Test-Case: output
Description: Test integer multiplication non-panic scenarios at module-level.
Labels: multiplicative-expr, int, DecimalNumber

int a = 10;
int b = 2;
int c = a * b;
int d = a * 3;
int e = 21 * 3;

function init() {
    io:println(c); // @output 20
    io:println(d); // @output 30
    io:println(e); // @output 63
}

Test-Case: panic
Description: Test integer multiplication panic at module-level.
Labels: multiplicative-expr, int:MIN_VALUE, DecimalNumber, unary-minus

int a = 9223372036854775802 * 2; // @panic integer overflow on multiplication

Test-Case: output
Description: Test multiplication scenarios for different decimal values.
Labels: multiplicative-expr, DecimalFloatingPointNumber

public function init() {
     decimal a = 2.5E-17;
     decimal b = 2.5E+17;
     decimal c = b * a;
     io:println(c); // @output 6.25
     io:println(2.5E+17d * 2.5E-17d); // @output 6.25

     a = 1.423223E6d;
     b = 2.34413E2d;
     c = a * b;
     io:println(c); // @output 333621973.099
     io:println(1.423223E6d * 2.34413E2d); // @output 333621973.099

     a = 25.E1742d;
     b = 1.0d;
     c = a * b;
     io:println(c); // @output 2.5E+1743
     io:println(25.E1742d * 1.0d); // @output 2.5E+1743

     a = 25.E1742d;
     b = 0.0d;
     c = a * b;
     io:println(c); // @output 0
     io:println(25.E1742d * 0.0d); // @output 0

     a = 25.E17d;
     b = 0.9E-10;
     c = a * b;
     io:println(c); // @output 2.25E+8
     io:println(25.E17d * 0.9E-10d); // @output 2.25E+8

     a = -25.E17d;
     b = 0.9E-10;
     c = a * b;
     io:println(c); // @output -2.25E+8
     io:println(-25.E17d * 0.9E-10d); // @output -2.25E+8

     a = 17.E12d;
     b = 0.0d;
     c = a * b;
     io:println(c); // @output 0
     io:println(17.E12d * 0.0d); // @output 0

     a = -17.E12d;
     b = 0.0d;
     c = a * b;
     io:println(c); // @output 0
     io:println(-17.E12d * 0.0d); // @output 0

     a = 11.E12d;
     b = -0.0d;
     c = a * b;
     io:println(c); // @output 0
     io:println(11.E12d * -0.0d); // @output 0

     a = 17.E1290d;
     b = 13.E1521d;
     c = a * b;
     io:println(c); // @output 2.21E+2813
     io:println(17.E1290d * 13.E1521d); // @output 2.21E+2813

     a = 0.0d;
     b = 0.0d;
     c = a * b;
     io:println(c); // @output 0
     io:println(0.0d * 0.0d); // @output 0

     a = -0.0d;
     b = 0.0d;
     c = a * b;
     io:println(c); // @output 0
     io:println(-0.0d * 0.0d); // @output 0
}

Test-Case: output
Description: Test multiplication scenarios for different nillable decimal values.
Labels: multiplicative-expr, DecimalFloatingPointNumber

public function init() {
     decimal? a = 2.5E-17;
     decimal? b = 2.5E+17;
     decimal? c = b * a;
     io:println(c); // @output 6.25

     a = 1.423223E6d;
     b = 2.34413E2d;
     c = a * b;
     io:println(c); // @output 333621973.099

     a = 25.E1742d;
     b = 1.0d;
     c = a * b;
     io:println(c); // @output 2.5E+1743

     a = 25.E1742d;
     b = 0.0d;
     c = a * b;
     io:println(c); // @output 0

     a = 25.E17d;
     b = 0.9E-10;
     c = a * b;
     io:println(c); // @output 2.25E+8

     a = -25.E17d;
     b = 0.9E-10;
     c = a * b;
     io:println(c); // @output -2.25E+8

     a = 17.E12d;
     b = 0.0d;
     c = a * b;
     io:println(c); // @output 0

     a = -17.E12d;
     b = 0.0d;
     c = a * b;
     io:println(c); // @output 0

     a = 11.E12d;
     b = -0.0d;
     c = a * b;
     io:println(c); // @output 0

     a = 17.E1290d;
     b = 13.E1521d;
     c = a * b;
     io:println(c); // @output 2.21E+2813

     a = 0.0d;
     b = 0.0d;
     c = a * b;
     io:println(c); // @output 0

     a = -0.0d;
     b = 0.0d;
     c = a * b;
     io:println(c); // @output 0

     a = -0.0d;
     b = ();
     c = a * b;
     io:println(c.toBalString()); // @output ()

     a = ();
     b = 0.0d;
     c = a * b;
     io:println(c.toBalString()); // @output ()
}

Test-Case: output
Description: Test multiplication scenarios for different float values.
Labels: multiplicative-expr, DecimalFloatingPointNumber

public function init() {
     float a = 2.5E-17;
     float b = 2.5E+17;
     float c = b * a;
     io:println(c); // @output 6.25
     io:println(2.5E+17 * 2.5E-17); // @output 6.25

     a = 1.423223E6;
     b = 2.34413E2;
     c = a * b;
     io:println(c); // @output 3.3362197309900004E8
     io:println(1.423223E6 * 2.34413E2); // @output 3.3362197309900004E8

     a = 25.E1742f;
     b = 1.0f;
     c = a * b;
     io:println(c); // @output Infinity
     io:println(25.E1742f * 1.0f); // @output Infinity

     a = 1.7976931348623157e+308;
     b = 1.7976931348623157e+308;
     c = a * b;
     io:println(c); // @output Infinity
     io:println(1.7976931348623157e+308 * 1.7976931348623157e+308); // @output Infinity

     a = -1.7976931348623157e+308;
     b = 1.7976931348623157e+308;
     c = a * b;
     io:println(c); // @output -Infinity
     io:println(-1.7976931348623157e+308 * 1.7976931348623157e+308); // @output -Infinity

     a = 25.E1742f;
     b = 0.0f;
     c = a * b;
     io:println(c); // @output NaN
     io:println(25.E1742f * 0.0f); // @output NaN

     a = 25.E17f;
     b = 0.9E-10f;
     c = a * b;
     io:println(c); // @output 2.25E8
     io:println(25.E17f * 0.9E-10); // @output 2.25E8

     a = -25.E17f;
     b = 0.9E-10f;
     c = a * b;
     io:println(c); // @output -2.25E8
     io:println(-25.E17f * 0.9E-10); // @output -2.25E8

     a = 17.E12f;
     b = 0.0f;
     c = a * b;
     io:println(c); // @output 0.0
     io:println(17.E12f * 0.0f); // @output 0.0

     a = -17.E12f;
     b = 0.0f;
     c = a * b;
     io:println(c); // @output -0.0
     io:println(-17.E12f * 0.0f); // @output -0.0

     a = 11.E12f;
     b = -0.0f;
     c = a * b;
     io:println(c); // @output -0.0
     io:println(11.E12f * -0.0f); // @output -0.0

     a = 17.E1290f;
     b = 13.E1521f;
     c = a * b;
     io:println(c); // @output Infinity
     io:println(17.E1290f * 13.E1521f); // @output Infinity

     a = 0.0f;
     b = 0.0f;
     c = a * b;
     io:println(c); // @output 0.0
     io:println(0.0f * 0.0f); // @output 0.0

     a = -0.0f;
     b = 0.0f;
     c = a * b;
     io:println(c); // @output -0.0
     io:println(-0.0f * 0.0f); // @output -0.0
}

Test-Case: output
Description: Test multiplication scenarios for different nillable float values.
Labels: multiplicative-expr, DecimalFloatingPointNumber

public function init() {
     float? a = 2.5E-17;
     float? b = 2.5E+17;
     float? c = b * a;
     io:println(c); // @output 6.25

     a = 1.423223E6;
     b = 2.34413E2;
     c = a * b;
     io:println(c); // @output 3.3362197309900004E8

     a = 25.E1742f;
     b = 1.0f;
     c = a * b;
     io:println(c); // @output Infinity

     a = 1.7976931348623157e+308;
     b = 1.7976931348623157e+308;
     c = a * b;
     io:println(c); // @output Infinity

     a = -1.7976931348623157e+308;
     b = 1.7976931348623157e+308;
     c = a * b;
     io:println(c); // @output -Infinity

     a = 25.E1742f;
     b = 0.0f;
     c = a * b;
     io:println(c); // @output NaN

     a = 25.E17f;
     b = 0.9E-10f;
     c = a * b;
     io:println(c); // @output 2.25E8

     a = -25.E17f;
     b = 0.9E-10f;
     c = a * b;
     io:println(c); // @output -2.25E8

     a = 17.E12f;
     b = 0.0f;
     c = a * b;
     io:println(c); // @output 0.0

     a = -17.E12f;
     b = 0.0f;
     c = a * b;
     io:println(c); // @output -0.0

     a = 11.E12f;
     b = -0.0f;
     c = a * b;
     io:println(c); // @output -0.0

     a = 17.E1290f;
     b = 13.E1521f;
     c = a * b;
     io:println(c); // @output Infinity

     a = 0.0f;
     b = 0.0f;
     c = a * b;
     io:println(c); // @output 0.0

     a = -0.0f;
     b = 0.0f;
     c = a * b;
     io:println(c); // @output -0.0

     a = ();
     b = 0.0f;
     c = a * b;
     io:println(c.toBalString()); // @output ()

     a = -0.0f;
     b = ();
     c = a * b;
     io:println(c.toBalString()); // @output ()
}

Test-Case: output
Description: Test multiplication by NaN for different float values.
Labels: multiplicative-expr, DecimalFloatingPointNumber

public function init() {
     float a = 1321.32f;
     float b = float:NaN;
     float c = a * b;
     io:println(c); // @output NaN
     io:println(1321.32f * float:NaN); // @output NaN
     io:println(b * a); // @output NaN
     io:println(float:NaN * 1321.32f); // @output NaN

     a = float:NaN;
     b = float:NaN;
     c = a * b;
     io:println(c); // @output NaN
     io:println(a * b); // @output NaN

     a = float:Infinity;
     b = float:NaN;
     c = a * b;
     io:println(c); // @output NaN
     io:println(a * b); // @output NaN

     a = -float:Infinity;
     b = float:NaN;
     c = a * b;
     io:println(c); // @output NaN
     io:println(a * b); // @output NaN

     a = -0.0f;
     b = float:NaN;
     c = a * b;
     io:println(c); // @output NaN
     io:println(-0.0f * b); // @output NaN

     a = 0.0f;
     b = float:NaN;
     c = a * b;
     io:println(c); // @output NaN
     io:println(0.0f * b); // @output NaN
}

Test-Case: output
Description: Test multiplication by NaN for different nillable float values.
Labels: multiplicative-expr, DecimalFloatingPointNumber

public function init() {
     float? a = 1321.32f;
     float? b = float:NaN;
     float? c = a * b;
     io:println(c); // @output NaN

     a = float:NaN;
     b = float:NaN;
     c = a * b;
     io:println(c); // @output NaN

     a = float:Infinity;
     b = float:NaN;
     c = a * b;
     io:println(c); // @output NaN

     a = -float:Infinity;
     b = float:NaN;
     c = a * b;
     io:println(c); // @output NaN

     a = -0.0f
     b = float:NaN;
     c = a * b;
     io:println(c); // @output NaN

     a = 0.0f
     b = float:NaN;
     c = a * b;
     io:println(c); // @output NaN

     a = ();
     b = float:NaN;
     c = a * b;
     io:println(c.toBalString()); // @output ())
}

Test-Case: output
Description: Test multiplication by infinity for different float values.
Labels: multiplicative-expr, DecimalFloatingPointNumber

public function init() {
     float a = 1321.32f;
     float b = float:Infinity;
     float c = a * b;
     io:println(c); // @output Infinity
     io:println(1321.32f * float:Infinity); // @output Infinity
     io:println(b * a); // @output Infinity
     io:println(float:Infinity * 1321.32f); // @output Infinity

     a = float:Infinity;
     b = float:Infinity;
     c = a * b;
     io:println(c); // @output Infinity
     io:println(a * b); // @output Infinity

     a = float:Infinity;
     b = float:NaN;
     c = a * b;
     io:println(c); // @output NaN
     io:println(a * b); // @output NaN

     a = -float:Infinity;
     b = float:NaN;
     c = a * b;
     io:println(c); // @output NaN
     io:println(a * b); // @output NaN

     a = -0.0f
     b = float:Infinity;
     c = a * b;
     io:println(c); // @output NaN
     io:println(-0.0f * float:Infinity); // @output NaN

     a = 0.0f
     b = float:Infinity;
     c = a * b;
     io:println(c); // @output Infinity
     io:println(0.0f * float:Infinity); // @output NaN
}

Test-Case: output
Description: Test multiplication by infinity for different nillable float values.
Labels: multiplicative-expr, DecimalFloatingPointNumber

public function init() {
     float? a = 1321.32f;
     float? b = float:Infinity;
     float? c = a * b;
     io:println(c); // @output Infinity

     a = float:Infinity;
     b = float:Infinity;
     c = a * b;
     io:println(c); // @output Infinity

     a = float:Infinity;
     b = float:NaN;
     c = a * b;
     io:println(c); // @output NaN

     a = -float:Infinity;
     b = float:NaN;
     c = a * b;
     io:println(c); // @output NaN

     a = -0.0f
     b = float:Infinity;
     c = a * b;
     io:println(c); // @output NaN

     a = 0.0f
     b = float:Infinity;
     c = a * b;
     io:println(c); // @output Infinity

     a = ();
     b = float:Infinity;
     c = a * b;
     io:println(c.toBalString()); // @output ()
}

Test-Case: output
Description: Test float multiplication scenarios for user-defined subtypes of float.
Labels: multiplicative-expr, float-literal, module-type-defn

type Floats -2.0f|-1.0f|0.0f|1.0f|2.0f;

public function init() {
    Floats a = 1.0;
    Floats b = 2.0;
    float c = a * a;

    float d = a * b;

    io:println(c); // @output 1.0
    io:println(a * a); // @output 1.0
    io:println(d); //@output 2.0
    io:println(a * b); // @output 2.0

    io:println(b * a); // @output 2.0
    io:println(b * b); // @output 4.0
}

Test-Case: output
Description: Test decimal multiplication scenarios for user-defined subtypes of decimal.
Labels: multiplicative-expr, decimal-literal, module-type-defn

type Decimals -2.0d|-1.0d|0.0d|1.0d|2.0d;

public function init() {
    Decimals a = 1.0d;
    Decimals b = 2.0d;
    decimal c = a * a;
    decimal d = a * b;

    io:println(a * a); // @output 1.0
    io:println(c); // @output 1.0
    io:println(a * b); // @output 2.0
    io:println(d); // @output 2.0

    io:println(b * a); // @output 2.0
    io:println(b * b); // @output 4.0
}

Test-Case: output
Description: Test float multiplication scenarios for union types of user-defined subtypes of float.
Fail-Issue: ballerina-platform/ballerina-lang#33265
Labels: multiplicative-expr, float-literal, module-type-defn, union-type, float, FloatTypeSuffix

const A = 1.0f;
const B = 2.0f;

type Floats1 -2.0f|-1.0f|0.0f|1.0f|2.0f;

type Floats2 A|B;

type Floats3 Floats1|Floats2;

public function init() {
    Floats2 a = 1.0;
    B b = 2.0;
    Floats1|Floats2 c = 2.0f;
    float|Floats1 d = 20f;

    io:println(a * b); // @output 2.0
    io:println(a * c); // @output 2.0

    io:println(b * c); // @output 4.0

    io:println(a * d); // @output 20.0
    io:println(d * a); //@output 20.0
}

Test-Case: output
Description: Test decimal multiplication scenarios for union types of user-defined subtypes of decimal.
Fail-Issue: ballerina-platform/ballerina-lang#33265
Labels: multiplicative-expr, decimal-literal, module-type-defn, union-type, decimal, DecimalTypeSuffix

const A = 1.0d;
const B = 2.0d;

type Decimals1 -2.0d|-1.0d|0.0d|1.0d|2.0d;

type Decimals2 A|B;

type Decimals3 Decimals1|Decimals2;

public function init() {
    Decimals2 a = 1.0;
    Decimals2 b = 2.0;
    Decimals1|Decimals2 c = 2.0d;
    decimal|Decimals1 d = 20.0d;

    io:println(a * b); // @output 2.0
    io:println(a * c); // @output 2.0

    io:println(b * c); // @output 4.0

    io:println(a * d); // @output 20.0
    io:println(d * a); //@output 20.0
}

Test-Case: output
Description: Test float multiplication scenarios for user-defined nilable subtypes of float.
Fail-Issue: ballerina-platform/ballerina-lang#31701
Labels: multiplicative-expr, float-literal, module-type-defn, float, FloatTypeSuffix, unary-minus, unary-plus, optional-type

type Floats -2.0f|-1.0f|0.0f|1.0f|2.0f;

public function init() {
    Floats? a = 1.0;
    Floats? b = 2.0;
    float? c = a * a;
    float? d = a * b;

    io:println(c); // @output 1.0
    io:println(a * a); // @output 1.0
    io:println(d); //@output 2.0
    io:println(a * b); // @output 2.0

    io:println(b * a); // @output 2.0
    io:println(b * b); // @output 4.0

    a = -0.0;
    b = +0.0;
    Floats? e = 2.0f;
    io:println(e * a); // @output -0.0
    io:println(e * b); // @output 0.0
}

Test-Case: output
Description: Test decimal multiplication scenarios for user-defined nilable subtypes of decimal.
Fail-Issue: ballerina-platform/ballerina-lang#31701
Labels: multiplicative-expr, decimal-literal, module-type-defn, decimal, DecimalTypeSuffix, optional-type

type Decimals -2.0d|-1.0d|0.0d|1.0d|2.0d;

public function init() {
    Decimals? a = 1.0d;
    Decimals? b = 2.0d;
    decimal? c = a * a;
    decimal? d = a * b;

    io:println(a * a); // @output 1.0
    io:println(c); // @output 1.0
    io:println(a * b); // @output 2.0
    io:println(d); // @output 2.0

    io:println(b * a); // @output 2.0
    io:println(b * b); // @output 4.0
}
