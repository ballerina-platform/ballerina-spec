Test-Case: output
Description: Test less than expression for positive integers.
Labels: DecimalFloatingPointNumber, DecimalNumber, int, relational-expr

function init() {
   int a = 1;
   int b = 101;
   int c = 0;
   int d = 9223372036854775807;
   io:println(a < b); // @output true
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output false
   io:println(b < d); // @output true
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression for negative integers.
Labels: DecimalFloatingPointNumber, DecimalNumber, int, relational-expr, unary-minus

function init() {
   int a = -1;
   int b = -101;
   int c = -10;
   int d = -9223372036854775807;
   io:println(a < b); // @output false
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output true
   io:println(b < d); // @output false
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression where one operand is negative integer and other one is positive integer.
Labels: DecimalFloatingPointNumber, DecimalNumber, int, relational-expr, unary-minus

function init() {
   int a = -1;
   int b = 101;
   int c = -10;
   int d = 9223372036854775807;
   io:println(a < b); // @output true
   io:println(b < a); // @output false
   io:println(d < c); // @output false
   io:println(c < d); // @output true
   io:println(a < d); // @output true
   io:println(d < a); // @output false
}

Test-Case: output
Description: Test less than expression using HexIntLiteral.
Labels: HexIntLiteral, relational-expr

function init() {
   io:println(0xABF5 < 0xAB55); // @output false
   io:println(0xAB55 < 0xABF5); // @output true
   io:println(0xDBF5 < 0xAB55); // @output false
   io:println(0xAB55 < 0xDBF5); // @output true
}

Test-Case: output
Description: Test less than expression for int:Unsigned8.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Unsigned8, relational-expr

function init() {
   int:Unsigned8 a = 1;
   int:Unsigned8 b = 2;
   int:Unsigned8 c = 0;
   int:Unsigned8 d = 255;
   io:println(a < b); // @output true
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output false
   io:println(b < d); // @output true
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression for byte.
Labels: byte, DecimalFloatingPointNumber, DecimalNumber, relational-expr

function init() {
   byte a = 1;
   byte b = 2;
   byte c = 0;
   byte d = 255;
   io:println(a < b); // @output true
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output false
   io:println(b < d); // @output true
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression for int:Unsigned16.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Unsigned16, relational-expr

function init() {
   int:Unsigned16 a = 1;
   int:Unsigned16 b = 2;
   int:Unsigned16 c = 0;
   int:Unsigned16 d = 65535;
   io:println(a < b); // @output true
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output false
   io:println(b < d); // @output true
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression for int:Unsigned32.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Unsigned32, relational-expr

function init() {
   int:Unsigned32 a = 1;
   int:Unsigned32 b = 2;
   int:Unsigned32 c = 0;
   int:Unsigned32 d = 429496729;
   io:println(a < b); // @output true
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output false
   io:println(b < d); // @output true
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression for positive int:Signed8.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Signed8, relational-expr

function init() {
   int:Signed8 a = 1;
   int:Signed8 b = 2;
   int:Signed8 c = 0;
   int:Signed8 d = 127;
   io:println(a < b); // @output true
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output false
   io:println(b < d); // @output true
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression for negative int:Signed8.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Signed8, relational-expr, unary-minus

function init() {
   int:Signed8 a = -1;
   int:Signed8 b = -101;
   int:Signed8 c = -10;
   int:Signed8 d = -127;
   io:println(a < b); // @output false
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output true
   io:println(b < d); // @output false
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression where one operand is negative int:Signed8 and other one is positive int:Signed8.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Signed8, relational-expr, unary-minus

function init() {
   int:Signed8 a = -1;
   int:Signed8 b = 101;
   int:Signed8 c = -10;
   int:Signed8 d = 127;
   io:println(a < b); // @output true
   io:println(b < a); // @output false
   io:println(d < c); // @output false
   io:println(c < d); // @output true
   io:println(a < d); // @output true
   io:println(d < a); // @output false
}

Test-Case: output
Description: Test less than expression for positive int:Signed16.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Signed16, relational-expr

function init() {
   int:Signed16 a = 1;
   int:Signed16 b = 2;
   int:Signed16 c = 0;
   int:Signed16 d = 32767;
   io:println(a < b); // @output true
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output false
   io:println(b < d); // @output true
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression for negative int:Signed16.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Signed16, relational-expr, unary-minus

function init() {
   int:Signed16 a = -1;
   int:Signed16 b = -1010;
   int:Signed16 c = -100;
   int:Signed16 d = -32768;
   io:println(a < b); // @output false
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output true
   io:println(b < d); // @output false
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression where one operand is negative int:Signed16 and other one is positive
             int:Signed16.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Signed16, relational-expr, unary-minus

function init() {
   int:Signed16 a = -1;
   int:Signed16 b = 101;
   int:Signed16 c = -32768;
   int:Signed16 d = 32767;
   io:println(a < b); // @output true
   io:println(b < a); // @output false
   io:println(d < c); // @output false
   io:println(c < d); // @output true
   io:println(a < d); // @output true
   io:println(d < a); // @output false
}

Test-Case: output
Description: Test less than expression for positive int:Signed32.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Signed32, relational-expr

function init() {
   int:Signed32 a = 1;
   int:Signed32 b = 2;
   int:Signed32 c = 0;
   int:Signed32 d = 2147483647;
   io:println(a < b); // @output true
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output false
   io:println(b < d); // @output true
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression for negative int:Signed32.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Signed32, relational-expr, unary-minus

function init() {
   int:Signed32 a = -1;
   int:Signed32 b = -2324;
   int:Signed32 c = -1073;
   int:Signed32 d = -2147483648;
   io:println(a < b); // @output false
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output true
   io:println(b < d); // @output false
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression where one operand is negative int:Signed16 and other one is positive
             int:Signed16.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Signed16, relational-expr, unary-minus

function init() {
   int:Signed32 a = -1;
   int:Signed32 b = 2;
   int:Signed32 c = -40123;
   int:Signed32 d = 2147483647;
   io:println(a < b); // @output true
   io:println(b < a); // @output false
   io:println(d < c); // @output false
   io:println(c < d); // @output true
   io:println(a < d); // @output true
   io:println(d < a); // @output false
}

Test-Case: output
Description: Test less than expression for user defined sub types of positive int.
Labels: DecimalFloatingPointNumber, DecimalNumber, module-type-defn, relational-expr, singleton-type, union-type

type Ints -2|-1|0|1|2;

function init() {
   Ints a = 1;
   Ints b = 2;
   Ints c = 0;

   io:println(a < b); // @output true
   io:println(b < a); // @output false
   io:println(a < c); // @output false
   io:println(c < a); // @output true
   io:println(b < c); // @output false
   io:println(c < b); // @output true
}

Test-Case: output
Description: Test less than expression for user defined sub types of negative int.
Labels: DecimalFloatingPointNumber, DecimalNumber, module-type-defn, relational-expr, singleton-type, unary-minus,
        union-type

type Ints -2|-1|-3|1|2;

function init() {
   Ints a = -1;
   Ints b = -2;
   Ints c = -3;

   io:println(a < b); // @output false
   io:println(b < a); // @output true
   io:println(a < c); // @output false
   io:println(c < a); // @output true
   io:println(b < c); // @output false
   io:println(c < b); // @output true
}

Test-Case: output
Description: Test less than expression for user defined sub types where one operand is positive int anf other one is
             negative int.
Labels: DecimalFloatingPointNumber, DecimalNumber, module-type-defn, relational-expr, singleton-type, unary-minus,
        union-type

type Ints -2|-1|0|1|2;

function init() {
   Ints a = 1;
   Ints b = 2;
   Ints c = -1;
   Ints d = -2;

   io:println(a < c); // @output false
   io:println(c < a); // @output true
   io:println(b < c); // @output false
   io:println(c < b); // @output true
   io:println(a < d); // @output false
   io:println(d < a); // @output true
   io:println(d < b); // @output true
   io:println(b < d); // @output false
}

Test-Case: output
Description: Test less than expression for user defined sub types of integer built in sub types.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Signed8, int:Unsigned32, module-type-defn, relational-expr,
        union-type

type Ints int:Signed8|int:Unsigned32;

function init() {
   Ints a = 12;
   int:Signed8|int:Unsigned32 b = 13;

   io:println(a < b); // @output true
   io:println(b < a); // @output false
}

Test-Case: output
Description: Test less than expression for different user defined sub types of int.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Signed8, int:Unsigned32, module-const-decl, module-type-defn, relational-expr,
        union-type

const ONE = 1;
const TWO = 2;
type OneOrTwo ONE|TWO;
type Ints int:Signed8|int:Unsigned32;

function init() {
   int:Signed16 a = 12;
   int:Signed8|int:Unsigned32 b = 13;
   Ints c = -23;
   OneOrTwo d = 1;

   io:println(a < b); // @output true
   io:println(a < c); // @output false
   io:println(a < d); // @output false
   io:println(b < a); // @output false
   io:println(b < c); // @output false
   io:println(b < d); // @output false
   io:println(c < a); // @output true
   io:println(c < b); // @output true
   io:println(c < d); // @output true
   io:println(d < a); // @output true
   io:println(d < b); // @output true
   io:println(d < c); // @output false
}

Test-Case: output
Description: Test less than expression for positive optional integers.
Labels: DecimalFloatingPointNumber, DecimalNumber, int, optional-type, relational-expr

function init() {
   int? a = 1;
   int? b = 101;
   int? c = 0;
   int? d = 9223372036854775807;
   io:println(a < b); // @output true
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output false
   io:println(b < d); // @output true
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression for optional negative integers.
Labels: DecimalFloatingPointNumber, DecimalNumber, int, optional-type, relational-expr, unary-minus

function init() {
   int? a = -1;
   int? b = -101;
   int? c = -10;
   int? d = -9223372036854775807;
   io:println(a < b); // @output false
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output true
   io:println(b < d); // @output false
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression where one operand is negative integer and other one is positive integer, with
             optional type-descriptors.
Labels: DecimalFloatingPointNumber, DecimalNumber, int, optional-type, relational-expr, unary-minus

function init() {
   int? a = -1;
   int? b = 101;
   int? c = -10;
   int? d = 9223372036854775807;
   io:println(a < b); // @output true
   io:println(b < a); // @output false
   io:println(d < c); // @output false
   io:println(c < d); // @output true
   io:println(a < d); // @output true
   io:println(d < a); // @output false
}

Test-Case: output
Description: Test less than expression where one operand is an optional integer and other operand is non optional
             integer.
Fail-Issue: ballerina-platform/ballerina-lang#35195
Labels: DecimalFloatingPointNumber, DecimalNumber, int, optional-type, relational-expr

function init() {
   int? a = 1;
   int b = 101;
   int? c = 0;
   int d = 9223372036854775807;
   io:println(a < b); // @output true
   io:println(a < d); // @output true
   io:println(b < c); // @output false
   io:println(d < c); // @output false
}

Test-Case: output
Description: Test less than expression for optional int:Unsigned8.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Unsigned8, optional-type, relational-expr

function init() {
   int:Unsigned8? a = 1;
   int:Unsigned8? b = 2;
   int:Unsigned8? c = 0;
   int:Unsigned8? d = 255;
   io:println(a < b); // @output true
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output false
   io:println(b < d); // @output true
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression where one operand is optional int:Unsigned8 and other is not.
Fail-Issue: ballerina-platform/ballerina-lang#35195
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Unsigned8, optional-type, relational-expr

function init() {
   int:Unsigned8? a = 1;
   int:Unsigned8 b = 2;
   int:Unsigned8? c = 0;
   int:Unsigned8 d = 255;
   io:println(a < b); // @output true
   io:println(a < d); // @output true
   io:println(b < c); // @output false
   io:println(d < c); // @output false
}

Test-Case: output
Description: Test less than expression for optional byte.
Labels: byte, DecimalFloatingPointNumber, DecimalNumber, optional-type, relational-expr

function init() {
   byte? a = 1;
   byte? b = 2;
   byte? c = 0;
   byte? d = 255;
   io:println(a < b); // @output true
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output false
   io:println(b < d); // @output true
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression where one operand is optional byte and other is not.
Fail-Issue: ballerina-platform/ballerina-lang#35195
Labels: byte, DecimalFloatingPointNumber, DecimalNumber, optional-type, relational-expr

function init() {
   byte? a = 1;
   byte b = 2;
   byte? c = 0;
   byte d = 255;
   io:println(a < b); // @output true
   io:println(a < d); // @output true
   io:println(b < c); // @output false
   io:println(d < c); // @output false
}

Test-Case: output
Description: Test less than expression for optional int:Unsigned16.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Unsigned16, optional-type, relational-expr

function init() {
   int:Unsigned16? a = 1;
   int:Unsigned16? b = 2;
   int:Unsigned16? c = 0;
   int:Unsigned16? d = 65535;
   io:println(a < b); // @output true
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output false
   io:println(b < d); // @output true
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression where one operand is optional int:Unsigned16 and other is not.
Fail-Issue: ballerina-platform/ballerina-lang#35195
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Unsigned16, optional-type, relational-expr

function init() {
   int:Unsigned16? a = 1;
   int:Unsigned16 b = 2;
   int:Unsigned16? c = 0;
   int:Unsigned16 d = 65535;
   io:println(a < b); // @output true
   io:println(a < d); // @output true
   io:println(b < c); // @output false
   io:println(d < c); // @output false
}

Test-Case: output
Description: Test less than expression for optional int:Unsigned32.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Unsigned32, optional-type, relational-expr

function init() {
   int:Unsigned32? a = 1;
   int:Unsigned32? b = 2;
   int:Unsigned32? c = 0;
   int:Unsigned32? d = 429496729;
   io:println(a < b); // @output true
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output false
   io:println(b < d); // @output true
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression where one operand is optional int:Unsigned32 and other is not.
Fail-Issue: ballerina-platform/ballerina-lang#35195
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Unsigned32, optional-type, relational-expr

function init() {
   int:Unsigned32? a = 1;
   int:Unsigned32 b = 2;
   int:Unsigned32? c = 0;
   int:Unsigned32 d = 429496729;
   io:println(a < b); // @output true
   io:println(a < d); // @output true
   io:println(b < c); // @output false
   io:println(d < c); // @output false
}

Test-Case: output
Description: Test less than expression for positive optional int:Signed8.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Signed8, optional-type, relational-expr

function init() {
   int:Signed8? a = 1;
   int:Signed8? b = 2;
   int:Signed8? c = 0;
   int:Signed8? d = 127;
   io:println(a < b); // @output true
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output false
   io:println(b < d); // @output true
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression for negative optional int:Signed8.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Signed8, optional-type, relational-expr, unary-minus

function init() {
   int:Signed8? a = -1;
   int:Signed8? b = -101;
   int:Signed8? c = -10;
   int:Signed8? d = -127;
   io:println(a < b); // @output false
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output true
   io:println(b < d); // @output false
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression where one operand is negative int:Signed8 and other one is positive int:Signed8.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Signed8, optional-type, relational-expr, unary-minus

function init() {
   int:Signed8? a = -1;
   int:Signed8? b = 101;
   int:Signed8? c = -10;
   int:Signed8? d = 127;
   io:println(a < b); // @output true
   io:println(b < a); // @output false
   io:println(d < c); // @output false
   io:println(c < d); // @output true
   io:println(a < d); // @output true
   io:println(d < a); // @output false
}

Test-Case: output
Description: Test less than expression where one operand is optional int:Signed8 and other is not.
Fail-Issue: ballerina-platform/ballerina-lang#35195
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Signed8, optional-type, relational-expr

function init() {
   int:Signed8? a = 1;
   int:Signed8? b = 2;
   int:Signed8? c = 0;
   int:Signed8? d = 127;
   io:println(a < b); // @output true
   io:println(a < d); // @output true
   io:println(b < c); // @output false
   io:println(d < c); // @output false
}

Test-Case: output
Description: Test less than expression for optional positive int:Signed16.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Signed16, optional-type, relational-expr

function init() {
   int:Signed16? a = 1;
   int:Signed16? b = 2;
   int:Signed16? c = 0;
   int:Signed16? d = 32767;
   io:println(a < b); // @output true
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output false
   io:println(b < d); // @output true
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression for negative optional int:Signed16.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Signed16, optional-type, relational-expr, unary-minus

function init() {
   int:Signed16? a = -1;
   int:Signed16? b = -1010;
   int:Signed16? c = -100;
   int:Signed16? d = -32768;
   io:println(a < b); // @output false
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output true
   io:println(b < d); // @output false
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression where one operand is optional negative int:Signed16 and other one is optional
             positive int:Signed16.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Signed16, optional-type, relational-expr, unary-minus

function init() {
   int:Signed16? a = -1;
   int:Signed16? b = 101;
   int:Signed16? c = -32768;
   int:Signed16? d = 32767;
   io:println(a < b); // @output true
   io:println(b < a); // @output false
   io:println(d < c); // @output false
   io:println(c < d); // @output true
   io:println(a < d); // @output true
   io:println(d < a); // @output false
}

Test-Case: output
Description: Test less than expression for optional positive int:Signed32.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Signed32, optional-type, relational-expr

function init() {
   int:Signed32? a = 1;
   int:Signed32? b = 2;
   int:Signed32? c = 0;
   int:Signed32? d = 2147483647;
   io:println(a < b); // @output true
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output false
   io:println(b < d); // @output true
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression for negative optional int:Signed32.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Signed32, optional-type, relational-expr, unary-minus

function init() {
   int:Signed32? a = -1;
   int:Signed32? b = -2324;
   int:Signed32? c = -1073;
   int:Signed32? d = -2147483648;
   io:println(a < b); // @output false
   io:println(c < a); // @output true
   io:println(a < c); // @output false
   io:println(d < a); // @output true
   io:println(b < d); // @output false
   io:println(a < a); // @output false
}

Test-Case: output
Description: Test less than expression where one operand is optional negative int:Signed16 and other one is optional
             positive int:Signed16.
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Signed16, optional-type, relational-expr, unary-minus

function init() {
   int:Signed32? a = -1;
   int:Signed32? b = 2;
   int:Signed32? c = -40123;
   int:Signed32? d = 2147483647;
   io:println(a < b); // @output true
   io:println(b < a); // @output false
   io:println(d < c); // @output false
   io:println(c < d); // @output true
   io:println(a < d); // @output true
   io:println(d < a); // @output false
}

Test-Case: output
Description: Test less than expression for user defined sub types of positive optional int.
Labels: DecimalFloatingPointNumber, DecimalNumber, module-type-defn, optional-type, relational-expr, singleton-type,
        union-type

type Ints -2|-1|0|1|2;

function init() {
   Ints? a = 1;
   Ints? b = 2;
   Ints? c = 0;

   io:println(a < b); // @output true
   io:println(b < a); // @output false
   io:println(a < c); // @output false
   io:println(c < a); // @output true
   io:println(b < c); // @output false
   io:println(c < b); // @output true
}

Test-Case: output
Description: Test less than expression for user defined sub types of negative optional int.
Labels: DecimalFloatingPointNumber, DecimalNumber, module-type-defn, optional-type, relational-expr, singleton-type,
        unary-minus, union-type

type Ints -2|-1|-3|1|2;

function init() {
   Ints? a = -1;
   Ints? b = -2;
   Ints? c = -3;

   io:println(a < b); // @output false
   io:println(b < a); // @output true
   io:println(a < c); // @output false
   io:println(c < a); // @output true
   io:println(b < c); // @output false
   io:println(c < b); // @output true
}

Test-Case: output
Description: Test less than expression for user defined sub types where one operand is optional positive int and other one is optional negative int.
Labels: DecimalFloatingPointNumber, DecimalNumber, module-type-defn, optional-type, relational-expr, singleton-type,
        unary-minus, union-type

type Ints -2|-1|0|1|2;

function init() {
   Ints? a = 1;
   Ints? b = 2;
   Ints? c = -1;
   Ints? d = -2;

   io:println(a < c); // @output false
   io:println(c < a); // @output true
   io:println(b < c); // @output false
   io:println(c < b); // @output true
   io:println(a < d); // @output false
   io:println(d < a); // @output true
   io:println(d < b); // @output true
   io:println(b < d); // @output false
}

Test-Case: output
Description: Test less than expression for different optional user defined sub types of int.
Fail-Issue: ballerina-platform/ballerina-lang#35657
Labels: DecimalFloatingPointNumber, DecimalNumber, int:Signed8, int:Unsigned32, module-const-decl, module-type-defn, optional-type,
        relational-expr, union-type

const ONE = 1;
const TWO = 2;
type OneOrTwo ONE|TWO;
type Ints int:Signed8|int:Unsigned32;

function init() {
   int:Signed16? a = 12;
   int:Signed8|int:Unsigned32? b = 13;
   Ints? c = -23;
   OneOrTwo? d = 1;

   io:println(a < b); // @output true
   io:println(a < c); // @output false
   io:println(a < d); // @output false
   io:println(b < a); // @output false
   io:println(b < c); // @output false
   io:println(b < d); // @output false
   io:println(c < a); // @output true
   io:println(c < b); // @output true
   io:println(c < d); // @output true
   io:println(d < a); // @output true
   io:println(d < b); // @output true
   io:println(d < c); // @output false
}

Test-Case: output
Description: Test less than expression when either or both operands are nil-literal.
Labels: nil-literal, optional-type, relational-expr

function init() {
   int? a = ();
   int? b = 5;

   io:println(a < b); // @output false
   io:println(b < a); // @output false
   io:println(() < ()); // @output false
}

Test-Case: output
Description: Test less than expression when both operands are boolean.
Labels: boolean, relational-expr

function init() {
   boolean a = false;
   boolean b = true;
   io:println(a < b); // @output true
   io:println(b < a); // @output false
   io:println(a < a); // @output false
   io:println(b < b); // @output false
}

Test-Case: output
Description: Test less than expression when both operands are optional boolean.
Labels: boolean, optional-type, relational-expr

function init() {
   boolean? a = false;
   boolean? b = true;
   io:println(a < b); // @output true
   io:println(b < a); // @output false
   io:println(a < a); // @output false
   io:println(b < b); // @output false
}

Test-Case: output
Description: Test less than expression when one operand optional boolean and other one is not.
Fail-Issue: ballerina-platform/ballerina-lang#35195
Labels: boolean, optional-type, relational-expr

function init() {
   boolean a = false;
   boolean? b = true;
   io:println(a < b); // @output true
   io:println(b < a); // @output false
}

Test-Case: output
Description: Test less than expression when either or both operands are string.
Labels: relational-expr, string

function init() {
   string a = "ABCD";
   string b = "ABCDE";
   string c = "DCBA";
   io:println(a < b); // @output true
   io:println(b < a); // @output false
   io:println(a < c); // @output true
   io:println(c < a); // @output false
   io:println(c < c); // @output false
}

Test-Case: output
Description: Test less than expression when one operand is optional string.
Fail-Issue: ballerina-platform/ballerina-lang#35195
Labels: relational-expr, optional-type, string

function init() {
   string? a = "ABCD";
   string b = "ABCDE";
   string? c = "DCBA";
   io:println(a < b); // @output true
   io:println(b < a); // @output false
}

Test-Case: output
Description: Test less than expression when both operands are optional string.
Labels: relational-expr, optional-type, string

function init() {
   string? a = "ABCD";
   string? b = "ABCDE";
   string? c = "DCBA";
   io:println(a < b); // @output true
   io:println(b < a); // @output false
   io:println(a < c); // @output true
   io:println(c < a); // @output false
   io:println(c < c); // @output false
}

Test-Case: output
Description: Test less than expression when both operands are positive decimals.
Labels: decimal, DecimalFloatingPointNumber, DecimalNumber, relational-expr

function init() {
   decimal a = 32.45;
   decimal b = 32;
   decimal c = 3.12345678888888888888888888888889999999;
   decimal d = 3.1234567888888888888888888888888999999900000000000000000000000000000000000000000000001;
   io:println(a < b); // @output false
   io:println(b < a); // @output true
   io:println(c < d); // @output false
   io:println(d < c); // @output false
}

Test-Case: output
Description: Test less than expression when both operands are negative decimals.
Labels: decimal, DecimalFloatingPointNumber, DecimalNumber, relational-expr, unary-minus

function init() {
   decimal a = -32.45;
   decimal b = -32;
   decimal c = -3.12345678888888888888888888888889999999;
   decimal d = -3.1234567888888888888888888888888999999900000000000000000000000000000000000000000000001;
   io:println(a < b); // @output true
   io:println(b < a); // @output false
   io:println(c < d); // @output false
   io:println(d < c); // @output false
}

Test-Case: output
Description: Test less than expression when one operand is positive decimal and other one is negative.
Labels: decimal, DecimalFloatingPointNumber, DecimalNumber, relational-expr, unary-minus

function init() {
   decimal a = -32.45;
   decimal b = 32;
   decimal c = -3.12345678888888888888888888888889999999;
   decimal d = 3.1234567888888888888888888888888999999900000000000000000000000000000000000000000000001;
   io:println(a < b); // @output true
   io:println(b < a); // @output false
   io:println(c < d); // @output true
   io:println(d < c); // @output false
}

Test-Case: output
Description: Test less than expression when both operands are positive floats.
Labels: DecimalFloatingPointNumber, DecimalNumber, float, multiplicative-expr, relational-expr

function init() {
   float a = 0/0;
   float b = 2.0;
   float c = 343545.45;
   float d = 32345.54;
   io:println(a < b); // @output false
   io:println(b < a); // @output false
   io:println(c < d); // @output false
   io:println(d < c); // @output true
}

Test-Case: output
Description: Test less than expression when both operands are negative floats.
Labels: DecimalFloatingPointNumber, DecimalNumber, float, multiplicative-expr, relational-expr, unary-minus

function init() {
   float a = -0/0;
   float b = -2.0;
   float c = -343545.45;
   float d = -32345.54;
   io:println(a < b); // @output false
   io:println(b < a); // @output false
   io:println(c < d); // @output true
   io:println(d < c); // @output false
}

Test-Case: output
Description: Test less than expression when one operand is positive and other one is negative.
Labels: DecimalFloatingPointNumber, DecimalNumber, float, multiplicative-expr, relational-expr, unary-minus, unary-plus

function init() {
   float a = -0/0;
   float b = 2.0;
   float c = -343545.45;
   float d = 32345.54;
   float e = +0;
   float f = -0;
   io:println(a < b); // @output false
   io:println(b < a); // @output false
   io:println(c < d); // @output true
   io:println(d < c); // @output false
   io:println(e < f); // @output false
   io:println(f < e); // @output false
}

Test-Case: output
Description: Test less than expression when both operands are positive optional floats.
Labels: DecimalFloatingPointNumber, DecimalNumber, float, optional-type, multiplicative-expr, relational-expr

function init() {
   float? a = 0/0;
   float? b = 2.0;
   float? c = 343545.45;
   float? d = 32345.54;
   io:println(a < b); // @output false
   io:println(b < a); // @output false
   io:println(c < d); // @output false
   io:println(d < c); // @output true
}

Test-Case: output
Description: Test less than expression when both operands are negative optional floats.
Labels: DecimalFloatingPointNumber, DecimalNumber, float, optional-type, multiplicative-expr, relational-expr, unary-minus

function init() {
   float? a = -0/0;
   float? b = -2.0;
   float? c = -343545.45;
   float? d = -32345.54;
   io:println(a < b); // @output false
   io:println(b < a); // @output false
   io:println(c < d); // @output true
   io:println(d < c); // @output false
}

Test-Case: output
Description: Test less than expression when one operand is optional positive and other one is optional negative float.
Labels: DecimalFloatingPointNumber, DecimalNumber, float, optional-type, multiplicative-expr, relational-expr,
        unary-minus, unary-plus

function init() {
   float? a = -0/0;
   float? b = 2.0;
   float? c = -343545.45;
   float? d = 32345.54;
   float? e = +0;
   float? f = -0;
   io:println(a < b); // @output false
   io:println(b < a); // @output false
   io:println(c < d); // @output true
   io:println(d < c); // @output false
   io:println(e < f); // @output false
   io:println(f < e); // @output false
}

Test-Case: output
Description: Test field and member access as less than expression operands.
Labels: array-type, DecimalFloatingPointNumber, DecimalNumber, field-access-expr, int, list-constructor-expr, 
        mapping-constructor-expr, member-access-expr, module-type-defn, record-type, relational-expr

type Record record {
   int x;
};

function init() {
   Record c = {x: 10};
   int[] d = [30, 40];
   io:println(d[0] < c.x); // @output false
}

Test-Case: output
Description: Test function call as less than expression operand.
Labels: DecimalFloatingPointNumber, DecimalNumber, function-call-expr, int, relational-expr

function init() {
   io:println(getIntOne() < getIntTwo()); // @output true
}

function getIntOne() returns int {
   return 5;
}

function getIntTwo() returns int {
   return 6;
}

Test-Case: output
Description: Test assignability result of less than expression to any.
Labels: any, DecimalFloatingPointNumber, DecimalNumber, int, relational-expr

function init() {
   int a = 1;
   int b = 2;
   any c = a < b;
   io:println(c); // @output true
}

Test-Case: output
Description: Test assignability result of less than expression to union type.
Labels: DecimalFloatingPointNumber, DecimalNumber, int, relational-expr, string, union-type

function init() {
   int a = 5;
   int b = 6;
   boolean|string c = a < b;
   io:println(c); // @output true
}

Test-Case: output
Description: Test type cast expression as less than expression operands.
Labels: DecimalFloatingPointNumber, DecimalNumber, int, relational-expr, type-cast-expr

function init() {
   boolean i = <int> 6 < <int> 7.5;
   io:println(i); // @output true
}

Test-Case: output
Description: Test shift expressions as less than expression operands.
Labels: DecimalFloatingPointNumber, DecimalNumber, int, relational-expr, shift-expr

function init() {
   boolean p = (1 << 2) < 6;
   io:println(p); // @output true
}

Test-Case: output
Description: Test binary bitwise expressions as less than expression operands.
Labels: binary-bitwise-expr, DecimalFloatingPointNumber, DecimalNumber, int, relational-expr

function init() {
   boolean a = (2 & 6) < (2 ^ 6);
   io:println(a); // @output true
}

Test-Case: output
Description: Test if block with less than expression condition.
Labels: binary-bitwise-expr, DecimalFloatingPointNumber, DecimalNumber, int, relational-expr

function init() {
   if (5 < 6) {
       io:println("True"); // @output True
   }
}

Test-Case: output
Description: Test binary conditional expressions with less than expression condition.
Labels: ternary-conditional-expr, DecimalNumber, int, relational-expr

function init() {
   int a = 12;
   int b = 15;
   int c = a < b ? 2 : a;
   io:println(c); // @output 2
}

Test-Case: output
Description: Test less than expression, var as operands.
Labels: DecimalNumber, relational-expr, var

function init() {
   var a = 12;
   var b = 15;
   io:println(a < b); // @output true
}

Test-Case: output
Description: Test less than expression in module level.
Labels: DecimalNumber, module-init-var-decl, relational-expr, var

var a = 12;
var b = 15;
boolean c = a < b;

function init() {
   io:println(c); // @output true
}

Test-Case: output
Description: Test the result type of less than expression is boolean.
Labels: boolean, DecimalNumber, relational-expr, var

function init() {
   var a = 1 < 2;
   boolean b = a;
   io:println(b); // @output true
}

Test-Case: output
Description: Test the operator precedence of less than expression.
Labels: additive-expr, function-call-expr, int, multiplicative-expr, relational-expr

function init() {
   int a = 4;
   int b = 5;
   int c = 6;
   io:println(a + b < (getOne() + c) * b); // @output true
   io:println(a / b < (getOne() - c) / b); // @output false
   io:println((a + b) * getOne() < (getOne() + c) * b); // @output true
   io:println(a + b * getTwo() < (a + b) * getTwo()); // @output true
}

function getOne() returns int{
    return 1;
}

function getTwo() returns int{
    return 2;
}
Test-Case: output
Description: Test less than expression with list as operands.
Labels: array-type, decimal, DecimalFloatingPointNumber, DecimalNumber, int, float,
        list-constructor-expr, nil-literal, optional-type, relational-expr, string

function init() {
   int[] a = [12, 100, 2000000];
   int[] b = [13, 3];
   int[] c = [];
   int[] d = [];
   string?[] e = ["Hello", "World!", (), "to", "Ballerina"];
   string?[] f = ["Hello", "World!", (), "from", "Ballerina"];
   float?[] g = [12.5, 43, ()];
   float?[] h = [12.5, 43, 4];
   decimal?[] i = [45, 23.54232, 44];
   decimal?[] j = [45, 23.54232, 44, ()];

   io:println(a < b); // @output true
   io:println(c < d); // @output false
   io:println(c < b); // @output true
   io:println(e < f); // @output false
   io:println(h < g); // @output false
   io:println(i < j); // @output true
}

Test-Case: output
Description: Test less than expression with tuple as operands.
Labels: decimal, DecimalFloatingPointNumber, DecimalNumber, int, float,
        list-constructor-expr, nil-literal, relational-expr, string, tuple-type

function init() {
   [int, string, float] a = [1, "AB", 33.33];
   [int, string, float] b = [1, "AB", 34];

   io:println(b < a); // @output false

   [string, string, int?, string] c = ["Hello", "World!", (), "to"];
   [string, string, int?, string] d = ["Hello", "World!", (), "from"];

   io:println(c < d); // @output false

   [int, float] e = [59215, (0.0 / 0.0)];
   [int, float] f = [59215, 123.432];

   io:println(e < f); // @output false

   [int, decimal?] g = [59215, 4354.323];
   [int, decimal?] h = [59215, ()];

   io:println(g < h); // @output false

   [int, decimal...] i = [59215, 4354.323, 432, 543];
   [int, decimal...] j = [59215, 23, 32.45, 234];

   io:println(i < j); // @output false

   [int, string...] k = [59215, "abc", "cde", "543"];
   [int, string...] l = [59215, "abc", "cde", "234"];

   io:println(k < l); // @output false

   [int, float...] m = [59215, 4354.323, 432, 543];
   [int, float...] n = [59215, 23, 32.45, 234];

   io:println(m < n); // @output false
}

Test-Case: error
Description: Test the static type of operands belonging to non ordered type with respect to one operand resulting in an error in less than expression.
Labels: array-type, boolean, decimal, DecimalNumber, DecimalFloatingPointNumber, float, int, int:Signed8,
        int:Unsigned32, module-type-defn, relational-expr, string, union-type

type Strings "A"|"B";
type Ints int:Unsigned32|int:Signed8;
type Floats 1.5|2.4;
type decimals 3.54|2;

function errorFunction(string a, int b, float c, decimal d, boolean e, int[] f, float[] g, Strings h, Ints i, Floats j, decimals k, int|string m, int n) {
   boolean _ = a < b; // @error < is not allowed with operands of string and int types
   boolean _ = b < c; // @error < is not allowed with operands of float and int types
   boolean _ = c < d; // @error < is not allowed with operands of float and decimal types
   boolean _ = b < e; // @error < is not allowed with operands of int and boolean types
   boolean _ = f < g; // @error < is not allowed with operands of int[] and int float[]
   boolean _ = h < i; // @error < is not allowed with operands of user defined string types and int types
   boolean _ = i < j; // @error < is not allowed with operands of user defined int types and float types
   boolean _ = j < k; // @error < is not allowed with operands of user defined float types and decimal types
   boolean _ = m < n; // @error < is not allowed with operands of int|string and int types
   boolean _ = m < m; // @error < is not allowed with operands of int|string and int|string types
}

Test-Case: error
Description: Test the static type of less than expression being boolean.
Labels: boolean, decimal, float, int, relational-expr, string

function errorFunction(string a, string b, int c, int d, float e, float f, decimal g, decimal h) {
   string _ = a < b; // @error static type of less than expression is boolean
   int _ = c < d; // @error static type of less than expression is boolean
   float _ = e < f; // @error static type of less than expression is boolean
   decimal _ = g < h; // @error static type of less than expression is boolean
}
