Test-Case: output
Description: Test xml-required-attribute-access-expr when xml-attribute-name is an identifier and
             expression is a variable reference which refer to xml root element.
Labels: local-init-var-decl-stmt, string, xml, xml-required-attribute-access-expr, xml:Element

function init() {
    xml x = xml `<root attr="attr-val"></root>`;
    io:println(x.attr); // @output attr-val

    x = xml `<root attr="attr-val"/>`;
    io:println(x.attr); // @output attr-val

    x = xml `<root attr='attr-val'></root>`;
    io:println(x.attr); // @output attr-val

    xml:Element x1 = xml `<root attr='attr-val'></root>`;
    io:println(x1.attr); // @output attr-val

    xml<xml:Element> x2 = xml `<root attr='attr-val'></root>`;
    io:println(x2.attr); // @output attr-val

    xml<xml<xml:Element>> x3 = xml `<root attr='attr-val'></root>`;
    io:println(x3.attr); // @output attr-val
}

Test-Case: output
Description: Test xml-required-attribute-access-expr when xml-attribute-name is an identifier and
             expression is a filter expression which starts from xml root element.
Labels: local-init-var-decl-stmt, string, xml, xml-filter-expr, xml-required-attribute-access-expr

function init() {
    xml x = xml `<root attr="attr-val"></root>`;
    io:println(x.<root>.attr); // @output attr-val
}

Test-Case: output
Description: Test xml-required-attribute-access-expr when xml-attribute-name is a qualified-identifier and
             expression is a variable reference which refer to xml root element.
Labels: local-init-var-decl-stmt, string, xml, xml-required-attribute-access-expr

function init() {
    xml x = xml `<root xml:space="attr-val"></root>`;
    io:println(x.xml:space); // @output attr-val

    x = xml `<root xml:space="attr-val"/>`;
    io:println(x.xml:space); // @output attr-val

    x = xml `<root xml:space='attr-val'></root>`;
    io:println(x.xml:space); // @output attr-val
}

Test-Case: output
Description: Test xml-required-attribute-access-expr when xml-attribute-name is a qualified-identifier and
             expression is a filter expression which starts from xml root element.
Labels: local-init-var-decl-stmt, string, xml, xml-filter-expr, xml-required-attribute-access-expr

function init() {
    xml x = xml `<root xml:space="attr-val"></root>`;
    io:println(x.<root>.xml:space); // @output attr-val

    x = xml `<root xml:space="attr-val"/>`;
    io:println(x.xml:space); // @output attr-val

    x = xml `<root xml:space='attr-val'></root>`;
    io:println(x.xml:space); // @output attr-val
}

Test-Case: output
Description: Test xml-required-attribute-access-expr when xml-attribute-name is an identifier and
             expression has only a root element with multiple attributes.
Labels: local-init-var-decl-stmt, xml, xml-required-attribute-access-expr

function init() {
    xml x = xml `<root id1='10' id2='11'/>`;
    io:println(x.id1); // @output 10
}

Test-Case: output
Description: Test xml-required-attribute-access-expr when xml-attribute-name is an identifier and
             expression is a variable reference.
Labels: local-init-var-decl-stmt, string, xml, xml-required-attribute-access-expr

function init() {
    xml x = xml `<messages id="10">
                    <note id="11">
                        <to>Tove</to>
                    </note>
                    <note id="12">
                        <to>Jani</to>
                    </note>
                </messages>`;
    io:println(x.id); // @output 10

    x = xml `<messages id1="10" id2="101" id3="102">
                    <note id1="11">
                        <to>Tove</to>
                    </note>
                    <note id2="12">
                        <to>Jani</to>
                    </note>
                    <note id3="13">
                        <to>Jan</to>
                    </note>
                </messages>`;
    io:println(x.id3); // @output 102
}

Test-Case: output
Description: Test xml-required-attribute-access-expr when xml-attribute-name is an identifier and
             expression is a filter expression.
Labels: local-init-var-decl-stmt, string, xml, xml-filter-expr, xml-required-attribute-access-expr

function init() {
    xml x = xml `<messages id="10">
                    <note id="11">
                        <to>Tove</to>
                    </note>
                    <note id="12">
                        <to>Jani</to>
                    </note>
                </messages>`;
    io:println(x.<messages>.id); // @output 10

    x = xml
        `<items id='9'>
            <book id='10'>
                <name>A Study in Scarlet</name>
                <author id='11'><name>Arthur Conan Doyle<Date id='12'></Date></name></author>
            </book>
            <planner id='13'>Daily Planner<kind id='14'>day</kind><pages id='15'>365</pages></planner>
            <book id='20'>
                <name>The Sign of Four</name>
                <author><name>Arthur Conan Doyle</name></author>
            </book>
            <pen><kind>marker</kind><color id='21'>blue</color></pen>
        </items>`;
    io:println(x.<items>.id); // @output 9
}

Test-Case: output
Description: Test xml-required-attribute-access-expr when xml-attribute-name is an identifier and
             expression is a xml-step-expr.
Labels: local-init-var-decl-stmt, string, xml, xml-filter-expr, xml-qualified-name, xml-required-attribute-access-expr, xml-step-expr

function init() {
    xml x = xml `<messages id="10">
                    <note id="11">
                        <to>Tove</to>
                    </note>
                    <note id="12">
                        <to>Jani</to>
                    </note>
                </messages>`;
    io:println(x/*.<note>[0].id); // @output 11

    x = xml `<messages>
                    <note id="11">
                        <to>Tove</to>
                    </note>
                </messages>`;
    io:println(x/<note>.id); // @output 11

    x = xml `<messages>
                    <note id="11">
                        <to>Tove</to>
                    </note>
                    <note id="12">
                        <to>Jane</to>
                    </note>
                </messages>`;
    io:println(x/<note>[0].id); // @output 11
    io:println(x/<note>[1].id); // @output 12

    x = xml
        `<items id='9'>
            <book id='10'>
                <name>A Study in Scarlet</name>
                <author id='11'><name>Arthur Conan Doyle<Date id='12'></Date></name></author>
            </book>
            <planner id='13'>Daily Planner<kind id='14'>day</kind><pages id='15'>365</pages></planner>
            <book id='20'>
                <name>The Sign of Four</name>
                <author><name>Arthur Conan Doyle</name></author>
            </book>
            <pen><kind>marker</kind><color id='21'>blue</color></pen>
        </items>`;
    io:println(x.<items>/<book>[0].id); // @output 10
    io:println(x.<items>/<book>[1].id); // @output 20
    io:println(x.<items>/<book>[0]/<author>.id); // @output 11
    io:println(x.<items>/<book>[0]/<author>/<name>/<Date>.id); // @output 12
    io:println(x.<items>/<planner>/<pages>.id); // @output 15
    io:println(x.<items>/<pen>/<color>.id); // @output 21
    io:println(x/*.<book>[0].id); // @output 10
    io:println(x/*.<book>[0]/<author>.id); // @output 11
    io:println(x/*.<pen>/<color>.id); // @output 21
    io:println(x/<*>.<book>[1].id); // @output 20
    io:println(x/<*>.<planner>/<kind>.id); // @output 14
    io:println(x/<*>.<pen>/<color>.id); // @output 21
    io:println(x/**/<items>/<book>[0]/<author>/<name>/<Date>.id); // @output 12
    io:println(x/**/<items>/<book>[1].id); // @output 20
    io:println(x/**/<items>/<planner>/<kind>.id); // @output 14
    io:println(x/**/<items>/<pen>/<color>.id); // @output 21
    io:println(x/**/<items>/<book>[0]/<author>/<name>/<Date>.id); // @output 12
}

Test-Case: output
Description: Test xml-required-attribute-access-expr when xml-attribute-name is a xml-qualified-name and
             expression is a variable reference which refer to xml root element.
Labels: local-init-var-decl-stmt, string, xml, xmlns-decl, xml-filter-expr, xml-qualified-name, xml-required-attribute-access-expr

xmlns "NSURL" as ns;

function init() {
    xml x = xml `<root ns:attr="attr-val"></root>`;
    io:println(x.ns:attr); // @output attr-val

    x = xml `<root ns:attr="attr-val"/>`;
    io:println(x.ns:attr); // @output attr-val

    x = xml `<root ns:attr='attr-val'></root>`;
    io:println(x.ns:attr); // @output attr-val
}

Test-Case: output
Description: Test xml-required-attribute-access-expr when xml-attribute-name is a xml-qualified-name and
             expression is a filter expression which starts from xml root element.
Labels: local-init-var-decl-stmt, string, xml, xmlns-decl, xml-filter-expr, xml-qualified-name, xml-required-attribute-access-expr

xmlns "NSURL" as ns;

function init() {
    xml x = xml `<root ns:attr="attr-val"></root>`;
    io:println(x.<root>.ns:attr); // @output attr-val
}

Test-Case: output
Description: Test xml-required-attribute-access-expr when xml-attribute-name is a xml-qualified-name and
             expression has only a root element with multiple attributes.
Labels: local-init-var-decl-stmt, xml, xmlns-decl, xml-qualified-name, xml-required-attribute-access-expr

xmlns "NSURL" as ns;

function init() {
    xml x = xml `<root ns:id1='10' ns:id2='11'/>`;
    io:println(x.ns:id1); // @output 10
}

Test-Case: output
Description: Test xml-required-attribute-access-expr when xml-attribute-name is a xml-qualified-name and
             expression is a variable reference.
Labels: local-init-var-decl-stmt, string, xml, xmlns-decl, xml-filter-expr, xml-qualified-name, xml-required-attribute-access-expr, xml-step-expr

xmlns "NSURL" as ns;

function init() {
    xml x = xml `<messages ns:id="10">
                    <note ns:id="11">
                        <to>Tove</to>
                    </note>
                    <note ns:id="12">
                        <to>Jani</to>
                    </note>
                </messages>`;
    io:println(x.ns:id); // @output 10

    x = xml `<messages ns:id1="10" ns:id2="101" ns:id3="102">
                    <note ns:id1="11">
                        <to>Tove</to>
                    </note>
                    <note ns:id2="12">
                        <to>Jani</to>
                    </note>
                    <note ns:id3="13">
                        <to>Jan</to>
                    </note>
                </messages>`;
    io:println(x.ns:id3); // @output 102
}

Test-Case: output
Description: Test xml-required-attribute-access-expr when xml-attribute-name is a xml-qualified-name and
             expression is a filter expression.
Labels: local-init-var-decl-stmt, string, xml, xmlns-decl, xml-filter-expr, xml-qualified-name, xml-required-attribute-access-expr

xmlns "NSURL" as ns;

function init() {
    xml x = xml `<messages ns:id="10">
                    <note ns:id="11">
                        <to>Tove</to>
                    </note>
                    <note ns:id="12">
                        <to>Jani</to>
                    </note>
                </messages>`;
    io:println(x.<messages>.ns:id); // @output 10

    x = xml
        `<items ns:id='9'>
            <book ns:id='10'>
                <name>A Study in Scarlet</name>
                <author ns:id='11'><name>Arthur Conan Doyle<Date ns:id='12'></Date></name></author>
            </book>
            <planner ns:id='13'>Daily Planner<kind ns:id='14'>day</kind><pages ns:id='15'>365</pages></planner>
            <book id='20'>
                <name>The Sign of Four</name>
                <author><name>Arthur Conan Doyle</name></author>
            </book>
            <pen><kind>marker</kind><color ns:id='21'>blue</color></pen>
        </items>`;
    io:println(x.<items>.ns:id); // @output 9
}

Test-Case: output
Description: Test xml-required-attribute-access-expr when xml-attribute-name is a xml-qualified-name and
             expression is a xml-step-expr.
Labels: local-init-var-decl-stmt, string, xml, xmlns-decl, xml-qualified-name, xml-required-attribute-access-expr, xml-step-expr

xmlns "NSURL" as ns;

function init() {
    xml x = xml `<messages ns:id="10">
                    <note ns:id="11">
                        <to>Tove</to>
                    </note>
                    <note ns:id="12">
                        <to>Jani</to>
                    </note>
                </messages>`;
    io:println(x/*.<note>[0].ns:id); // @output 11

    x = xml `<messages>
                    <note ns:id="11">
                        <to>Tove</to>
                    </note>
                </messages>`;
    io:println(x/<note>.ns:id); // @output 11

    x = xml `<messages>
                    <note ns:id="11">
                        <to>Tove</to>
                    </note>
                    <note ns:id="12">
                        <to>Jane</to>
                    </note>
                </messages>`;
    io:println(x/<note>[0].ns:id); // @output 11
    io:println(x/<note>[1].ns:id); // @output 12

    x = xml
        `<items ns:id='9'>
            <book ns:id='10'>
                <name>A Study in Scarlet</name>
                <author ns:id='11'><name>Arthur Conan Doyle<Date ns:id='12'></Date></name></author>
            </book>
            <planner ns:id='13'>Daily Planner<kind ns:id='14'>day</kind><pages ns:id='15'>365</pages></planner>
            <book id='20'>
                <name>The Sign of Four</name>
                <author><name>Arthur Conan Doyle</name></author>
            </book>
            <pen><kind>marker</kind><color ns:id='21'>blue</color></pen>
        </items>`;
    io:println(x.<items>/<book>[0].ns:id); // @output 10
    io:println(x.<items>/<book>[1].id); // @output 20
    io:println(x.<items>/<book>[0]/<author>.ns:id); // @output 11
    io:println(x.<items>/<book>[0]/<author>/<name>/<Date>.ns:id); // @output 12
    io:println(x.<items>/<planner>/<pages>.ns:id); // @output 15
    io:println(x.<items>/<pen>/<color>.ns:id); // @output 21
    io:println(x/*.<book>[0].ns:id); // @output 10
    io:println(x/*.<book>[0]/<author>.ns:id); // @output 11
    io:println(x/*.<pen>/<color>.ns:id); // @output 21
    io:println(x/<*>.<book>[1].id); // @output 20
    io:println(x/<*>.<planner>/<kind>.ns:id); // @output 14
    io:println(x/<*>.<pen>/<color>.ns:id); // @output 21
    io:println(x/**/<items>/<book>[0]/<author>/<name>/<Date>.ns:id); // @output 12
    io:println(x/**/<items>/<book>[1].id); // @output 20
    io:println(x/**/<items>/<planner>/<kind>.ns:id); // @output 14
    io:println(x/**/<items>/<pen>/<color>.ns:id); // @output 21
    io:println(x/**/<items>/<book>[0]/<author>/<name>/<Date>.ns:id); // @output 12
}

Test-Case: error
Description: Test xml-required-attribute-access-expr when value is not a singleton xml element.
Labels: local-init-var-decl-stmt, xml, xml-required-attribute-access-expr

function errorFunction() {
    xml x = xml `xml text=text`;
    _ = x.text; // @error error("{ballerina/lang.xml}XMLOperationError",message="invalid xml attribute access on xml text")
    x = xml `<!--I am a comment=comment-->`;
    _ = x.comment; // @error error("{ballerina/lang.xml}XMLOperationError",message="invalid xml attribute access on xml comment")
    x = xml `<?target data=data?>`;
    _ = x.data; // @error error("{ballerina/lang.xml}XMLOperationError",message="invalid xml attribute access on xml pi")
}

Test-Case: error
Description: Test xml-required-attribute-access-expr when value is empty
Fail-Issue: ballerina-platform/ballerina-lang#35139
Labels: local-init-var-decl-stmt, string, xml, xml-required-attribute-access-expr, xml-filter-expr, xml-step-expr

function errorFunction() {
    xml x = xml `<message id="10">
                        <note id="11">
                            <to>Tove</to>
                        </note>
                        <note id="12">
                            <to>Jani</to>
                        </note>
                    </message>`;
    _ = x.<messages>.id; // @error incompatible types: expected 'any', found '(string|error)'
    _ = x.<message>/<notes>[0].id; // @error incompatible types: expected 'any', found '(string|error)'
    _ = x.<message>/<notes>[1].id; // @error incompatible types: expected 'any', found '(string|error)'
}

Test-Case: error
Description: Test xml-required-attribute-access-expr when attribute name does not exist.
Labels: local-init-var-decl-stmt, string, xml, xml-filter-expr, xml-required-attribute-access-expr, xml-step-expr

function errorFunction() {
    xml x = xml `<message id="10">
                        <note id="11">
                            <to>Tove</to>
                        </note>
                        <note id="12">
                            <to>Jani</to>
                        </note>
                    </message>`;
    _ = x.<message>.ids; // @error error("{ballerina/lang.xml}XMLOperationError",message="attribute 'ids' not found")
    _ = x.<message>/<note>[0].ids; // @error error("{ballerina/lang.xml}XMLOperationError",message="attribute 'ids' not found")
    _ = x.<message>/<note>[1].ids; // @error error("{ballerina/lang.xml}XMLOperationError",message="attribute 'ids' not found")
}

Test-Case: output
Description: The static type of an xml-required-attribute-access-expr is string|error.
Labels: local-init-var-decl-stmt, error-type, nil-type, is-expr, string, xml, xml-required-attribute-access-expr

function init() {
    xml x = xml `<root attr='attr-val'></root>`;
    io:println(x.attr is string); // @output true
    io:println(x.attrs is error); // @output true
}

Test-Case: error
Description: The static type of an xml-required-attribute-access-expr is string|error.
Labels: local-init-var-decl-stmt, error-type, nil-type, is-expr, string, xml, xml-required-attribute-access-expr

function init() {
    xml x = xml `<root attr='attr-val'></root>`;
    string _ = x.attr; // @error static type of an xml-required-attribute-access-expr is string|error
    error e = x.attrs; // @error static type of an xml-required-attribute-access-expr is string|error
}

Test-Case: error
Description: Test xml-attribute-access-expr when static type of expression is not a subtype of xml.
Labels: int, local-init-var-decl-stmt, string, union-type, xml:Text, xml, xml-required-attribute-access-expr

function errorFunction() {
    xml|int x1 = xml `<root attr="attr-val"></root>`;
    _ = x1.attr; // @error invalid operation: type '(xml|int)' does not support field access
    xml|xml:Text x2 = xml `<root attr="attr-val"></root>`;
    _ = x2.attr; // @error invalid operation: type '(xml|xml:Text)' does not support field access
    _ = x2?.attr1; // @error invalid operation: type '(xml|xml:Text)' does not support optional field access
}

Test-Case: output
Description: The static type of an xml-required-attribute-access-expr is built-in subtypes of xml.
Labels: error-type, local-init-var-decl-stmt, string, string-literal, xml, xml:Element, xml-required-attribute-access-expr

function init() {
    xml:Element x = xml `<e name = "ballerina"></e>`;
    io:println(x?.name); // @output ballerina
}

Test-Case: output
Description: Test the xml-required-attribute-access-expr when expression is defined in module level.
Labels: module-init-var-decl, string-literal, xml, xml-required-attribute-access-expr

xml x = xml `<root attr="attr-val"></root>`;

function init() {
    io:println(x.attr); // @output attr-val
    io:println(x.attrs is error); // @output true
}
