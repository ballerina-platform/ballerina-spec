Test-Case: output
Description: Test regular expression with valid ReLiteralChar
Labels: ReLiteralChar, ReSequence, RegExp

function init() {
    _ = re `abcdefghijklmnopqrstuvwxyz`;
    _ = re `ABCDEFGHIJKLMNOPQRSTUVWXYZ`;
    _ = re `0123456789`;
    _ = re ``;
    _ = re `~!@#%&_-=:;''""/<>,`;
}

Test-Case: output
Description: Test regular expression with valid ReAssertion.
Labels: ReAssertion, ReLiteralChar, ReSequence, RegExp

function init() {
    _ = re `$`;
    _ = re `^`;
    _ = re `end$`;
    _ = re `^the`;
    _ = re `(the$|^is)`;
    _ = re `^$`;
}

Test-Case: output
Description: Test regular expression with valid NumericEscape.
Labels: NumericEscape, ReEscape, RegExp

function init() {
    _ = re `\u{0}`;
    _ = re `\u{0111}`;
    _ = re `\u{0AAB}`;
    _ = re `\u{CDEF}`;
}

Test-Case: output
Description: Test regular expression with valid ControlEscape.
Labels: ControlEscape, ReEscape, RegExp

function init() {
    _ = re `\r`;
    _ = re `\n`;
    _ = re `\t`;
    _ = re `int\nstring`;
    _ = re `name:\tjames`;
}

Test-Case: output
Description:  Test regular expression with valid ReQuoteEscape.
Labels: ReEscape, ReQuoteEscape, RegExp

function init() {
    _ = re `\^`;
    _ = re `\$`;
    _ = re `\\`;
    _ = re `\.`;
    _ = re `\*`;
    _ = re `\+`;
    _ = re `\?`;
    _ = re `\(`;
    _ = re `\)`;
    _ = re `\[`;
    _ = re `\]`;
    _ = re `\{`;
    _ = re `\}`;
    _ = re `\|`;
}

Test-Case: output
Description: Test regular expression with valid ReSimpleCharClassEscape.
Labels: ReEscape, ReSimpleCharClassEscape, RegExp

function init(){
    _ = re `\d`;
    _ = re `\D`;
    _ = re `\s`;
    _ = re `\S`;
    _ = re `\w`;
    _ = re `\W`;
}

Test-Case: output
Description: Test regular expression matching unicode script.
Labels: ReEscape, ReUnicodePropertyEscape, ReUnicodePropertyValue, RegExp

function init(){
    _ = re `\p{sc=_}`;
    _ = re `\p{sc=_1}`;
    _ = re `\p{sc=123Abc}`;
    _ = re `\p{sc=abcd12}`;
    _ = re `\P{sc=_}`;
    _ = re `\P{sc=_1}`;
    _ = re `\P{sc=123Abc}`;
    _ = re `\P{sc=abcd12}`;
}

Test-Case: output
Description: Test 1 for regular expression matching unicode general category.
Labels: ReEscape, ReUnicodeGeneralCategory, ReUnicodePropertyEscape, RegExp

function init() {
    _ = re `\p{L}`;
    _ = re `\p{Lu}`;
    _ = re `\p{Ll}`;
    _ = re `\p{Lt}`;
    _ = re `\p{Lm}`;
    _ = re `\p{Lo}`;

    _ = re `\p{M}`;
    _ = re `\p{Mn}`;
    _ = re `\p{Mc}`;
    _ = re `\p{Me}`;

    _ = re `\p{N}`;
    _ = re `\p{Nd}`;
    _ = re `\p{Nl}`;
    _ = re `\p{No}`;

    _ = re `\p{S}`;
    _ = re `\p{Sm}`;
    _ = re `\p{Sc}`;
    _ = re `\p{Sk}`;
    _ = re `\p{So}`;

    _ = re `\p{Z}`;
    _ = re `\p{Zs}`;
    _ = re `\p{Zl}`;
    _ = re `\p{Zp}`;

    _ = re `\p{C}`;
    _ = re `\p{Cc}`;
    _ = re `\p{Cf}`;
    _ = re `\p{Co}`;
    _ = re `\p{Cn}`;
}

Test-Case: output
Fail-Issue: 
Description: Test 2 for regular expression matching unicode general category.
Labels: ReEscape, ReUnicodeGeneralCategory, ReUnicodePropertyEscape, RegExp

function init() {
    _ = re `\p{P}`;
    _ = re `\p{Pc}`;
    _ = re `\p{Pd}`;
    _ = re `\p{Ps}`;
    _ = re `\p{Pe}`;
    _ = re `\p{Pi}`;
    _ = re `\p{Pf}`;
    _ = re `\p{Po}`;
}

Test-Case: output
Description: Test 3 for regular expression matching unicode general category.
Labels: ReEscape, ReUnicodeGeneralCategory, ReUnicodePropertyEscape, RegExp

function init() {
    _ = re `\p{gc=L}`;
    _ = re `\p{gc=Lu}`;
    _ = re `\p{gc=Ll}`;
    _ = re `\p{gc=Lt}`;
    _ = re `\p{gc=Lm}`;
    _ = re `\p{gc=Lo}`;

    _ = re `\p{gc=M}`;
    _ = re `\p{gc=Mn}`;
    _ = re `\p{gc=Mc}`;
    _ = re `\p{gc=Me}`;

    _ = re `\p{gc=N}`;
    _ = re `\p{gc=Nd}`;
    _ = re `\p{gc=Nl}`;
    _ = re `\p{gc=No}`;

    _ = re `\p{gc=S}`;
    _ = re `\p{gc=Sm}`;
    _ = re `\p{gc=Sc}`;
    _ = re `\p{gc=Sk}`;
    _ = re `\p{gc=So}`;

    _ = re `\p{gc=Z}`;
    _ = re `\p{gc=Zs}`;
    _ = re `\p{gc=Zl}`;
    _ = re `\p{gc=Zp}`;

    _ = re `\p{gc=C}`;
    _ = re `\p{gc=Cc}`;
    _ = re `\p{gc=Cf}`;
    _ = re `\p{gc=Co}`;
    _ = re `\p{gc=Cn}`;
}

Test-Case: output
Fail-Issue: 
Description: Test 4 for regular expression matching unicode general category.
Labels: ReEscape, ReUnicodeGeneralCategory, ReUnicodePropertyEscape, RegExp

function init() {
    _ = re `\p{gc=P}`;
    _ = re `\p{gc=Pc}`;
    _ = re `\p{gc=Pd}`;
    _ = re `\p{gc=Ps}`;
    _ = re `\p{gc=Pe}`;
    _ = re `\p{gc=Pi}`;
    _ = re `\p{gc=Pf}`;
    _ = re `\p{gc=Po}`;
}

Test-Case: output
Description: Test regular expression matches any character except line breaks.
Labels: ReAtom, ReSequence, RegExp

function init() {
    _ = re `.`;
}

Test-Case: output
Description: Test regular expression matches only a dot character.
Labels: ReAtom, ReEscape, RegExp

function init() {
    _ = re `\.`;
}

Test-Case: output
Description: Test regular expression with empty character set.
Labels: ReAtom ,RegExp, ReSequence

function init() {
    _ = re `[]`;
}

Test-Case: output
Description: Test regular expression matches dash character.
Labels: ReAtom, ReCharSetLiteralChar, RegExp

function init() {
    _ = re `-`;
    _ = re `[-]`;
    _ = re `[\-]`;
    _ = re `[--]`;
}

Test-Case: output
Description: Test regular expression matches all smaller alphabet characters.
Labels: ReAtom, ReCharSetLiteralChar, RegExp

function init() {
    _ = re `[abcdefghijklmnopqrstuvwxyz]`;
    _ = re `[a-z]`;
}

Test-Case: output
Description: Test regular expression matches all capital alphabet characters.
Labels: ReAtom, ReCharSetLiteralChar, RegExp

function init() {
    _ = re `[ABCDEFGHIJKLMNOPQRSTUVWXYZ]`;
    _ = re `[A-Z]`;
}

Test-Case: output
Description: Test regular expression matches all numeric characters.
Labels: ReAtom, ReCharSetLiteralChar, RegExp

function init() {
    _ = re `[0-9]`;
    _ = re `[0123456789]`;
}

Test-Case: output
Description: Test regular expression matches all alphabet characters.
Labels: ReAtom, ReCharSetLiteralChar, RegExp

function init() {
    _ = re `[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]`;
    _ = re `[a-zA-Z]`;
    _ = re `[A-Zabcdefghijklmnopqrstuvwxyz]`;
    _ = re `[ABCDEFGHIJKLMNOPQRSTUVWXYZa-z]`;
}

Test-Case: output
Description: Test regular expression matches all non alphabet characters.
Labels: ReAtom, ReCharSetLiteralChar, RegExp

function init() {
    _ = re `[-~!@#$%^&*()_+={}|[:;""''<>,.?/\]\\]`;
    _ = re `[~\-!@#$%^&*()_+={}|[:;""''<>,.?/\]\\]`;
    _ = re `[-~!@#\$%\^&\*\(\)_\+=\{\}\|\[:;""''<>,.\?/\]\\]`;
    _ = re `[~\-!@#\$%\^&\*\(\)_\+=\{\}\|\[:;""''<>,.\?/\]\\]`;
}

Test-Case: output
Description: Test regular expression matches all characters not in the set.
Labels: ReAtom, ReCharSetLiteralChar, RegExp

function init() {
    _ = re `[^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]`;
    _ = re `[^a-zA-Z0-9]`;
    _ = re `[^]`;
    _ = re `[^-]`;
    _ = re `[^-~!@#$%^&*()_+={}|[:;""''<>,.?/\]\\]`;
    _ = re `[^~\-!@#\$%\^&\*\(\)_\+=\{\}\|\[:;""''<>,.\?/\]\\]`;
}

Test-Case: output
Description: Test regular expression matches a character in the range "-" to "~".
Labels: ReAtom, ReCharSetLiteralChar, RegExp

function init() {
    _ = re `[--~]`;
    _ = re `[\--~]`;
}

Test-Case: output
Description: Test regular expression with ReAtom with ReCharSetRange.
Labels: ReAtom, ReCharSetRange, RegExp

function init() {
    _ = re `[^a-d]`;
    _ = re `[a-d]`;
    _ = re `[^A-D\-]`;
    _ = re `[^m-pr-u]`;
    _ = re `[^\u{41}-d\u{55}-\u{58}]`;
    _ = re `[^\u{41}-d\u{46}i]`;
    _ = re `[^AB-A]`;
    _ = re `[^ABCg-j]`;
}

Test-Case: output
Description: Test regular expression with valid groups contain flags.
Labels: ReDisjunction, ReFlagsOnOf, RegExp

function init() {
    _ = re `(?:)`;
    _ = re `(?:(?:(?:)))`;
    _ = re `(?m-m:)`;
}

Test-Case: output
Description: Test regular expression with the characters included by . in dotAll.
Labels: ReDisjunction, ReFlagsOnOf, RegExp

function init() {
    _ = re `(?s:^.$)`;
    _ = re `(?sm:^.$)`;
}

Test-Case: output
Description: Test regular expression without the dotAll flag.
Labels: ReDisjunction, ReFlagsOnOf, RegExp

function init() {
    _ = re `(^.$)`;
    _ = re `(?:^.$)`;
    _ = re `(?m:^.$)`;
}

Test-Case: output
Description: Test regular expression with ReflagsOnOff and ReDisjunction.
Labels: ReDisjunction, ReFlagsOnOf, RegExp

function init() {
    _ = re `(?msix:ABC)`;
    _ = re `(?m-six:[A-Z0-8]+?)`;
    _ = re `(?s-i:\n\d{3,7})`;
    _ = re `(?m:[ABC](?i:))`;
}

Test-Case: output
Description: Test regular expression with groups.
Labels: ReDisjunction, ReFlagsOnOf, RegExp

function init() {
    _ = re `(ABC)`;
    _ = re `(ABC)(?m-six:[A-Z0-8]+?)`;
    _ = re `([A-Z]+)(0|1)E`;
    _ = re `(?m:[ABC](?i:))(0|1|2)([a-z]*)`;
}

Test-Case: output
Description: Test regular expression with qualifiers.
Labels: ReQuantifier, ReTerm, RegExp

function init() {
    _ = re `A*`;
    _ = re `B+`;
    _ = re `AB?`;
    _ = re `A{2}`;
    _ = re `A{2,}`;
    _ = re `a{1,3}`;
    
    _ = re `A*?`;
    _ = re `B+?`;
    _ = re `AB??`;
    _ = re `A{2}?`;
    _ = re `A{2,}?`;
    _ = re `a{1,3}?`;
}

Test-Case: output
Description: Test regular expression with ReAtom with dot.
Labels: ReAtom, RegExp

function init() {
    _ = re `.`;
    _ = re `.A`;
    _ = re `AB.`;
    _ = re `A.^`;
    _ = re `A.$`;
    _ = re `A.+`;
    _ = re `A.{1,3}?`;
    _ = re `A.*`;
    _ = re `A.*?`;
    _ = re `A.$BC`;
    _ = re `A.[a-zA-Z]`;
    _ = re `A.(?msix:.[a-z])`;
}

Test-Case: output
Description: Test regular expression with valid ReCharSet and NumericEscape.
Labels: NumericEscape, ReAtom, ReCharSet, RegExp

function init() {
    _ = re `[\u{0}]`;
    _ = re `[^\u{0111}]`;
    _ = re `[\u{0AAB}]`;
    _ = re `[^\u{CDEF}]`;
}

Test-Case: output
Description: Test regular expression with ReCharSet with ControlEscape.
Labels: ControlEscape, ReAtom, ReCharSet, RegExp

function init() {
    _ = re `[^\r]`;
    _ = re `[^\n]`;
    _ = re `[^\t]`;
    _ = re `[\r]`;
    _ = re `[\n]`;
    _ = re `[\t]`;
}

Test-Case: output
Description: Test regular expression with ReCharSet with QuoteEscape.
Labels: QuoteEscape, ReAtom, ReCharSet, RegExp

function init() {
    _ = re `[^\^]`;
    _ = re `[^\$]`;
    _ = re `[^\\]`;
    _ = re `[^\.]`;
    _ = re `[\*]`;
    _ = re `[^\+]`;
    _ = re `[\?]`;
    _ = re `[\(]`;
    _ = re `[^\)]`;
    _ = re `[\[]`;
    _ = re `[^\]]`;
    _ = re `[\{]`;
    _ = re `[^\}]`;
    _ = re `[^\|]`;
}

Test-Case: output
Description: Test regular expression with ReCharSet with UnicodePropertyEscape.
Labels: ReAtom, ReCharSet, RegExp, UnicodePropertyEscape

function init() {
    _ = re `[^\p{sc=Latin}]`;
    _ = re `[^\P{sc=Latin}]`;
    _ = re `[\p{sc=Latin}]`;
    _ = re `[^\p{gc=Lu}]`;
    _ = re `[^\P{gc=Lu}]`;
    _ = re `[\p{gc=Lu}]`;
    _ = re `[^\p{Lu}]`;
    _ = re `[^\P{Lu}]`;
    _ = re `[\P{Lu}]`;
}

Test-Case: output
Description: Test regular expression with ReCharSet with SimpleCharClassEscape.
Labels: ReAtom, ReCharSet, RegExp, SimpleCharClassEscape

function init() {
    _ = re `[^\d]`;
    _ = re `[^\D]`;
    _ = re `[^\s]`;
    _ = re `[^\S]`;
    _ = re `[^\w]`;
    _ = re `[^\W]`;
    _ = re `[\d]`;
    _ = re `[\D]`;
    _ = re `[\s]`;
    _ = re `[\S]`;
    _ = re `[\w]`;
    _ = re `[\W]`;
}

Test-Case: output
Description: Test regular expression with ReCharSet with EscapedDash.
Labels: ReCharSet, ReCharSetAtomNoDash, RegExp

function init() {
    _ = re `[^\-]`;
    _ = re `[\-]`;
}

Test-Case: output
Description: Test regular expression with ReAtom with CharSetNoDash.
Labels: ReAtom, ReCharSet, ReCharSetNoDash, RegExp

function init() {
    _ = re `[^ad]`;
    _ = re `[ad]`;
    _ = re `[^ad-h]`;
    _ = re `[^\u{41d}-hM]`;
    _ = re `[^\u{41d}-hM-N]`;
    _ = re `[^\nd-hM-N\tQ-T]`;
    _ = re `[^\-d-hM-N\tQ-T]`;
    _ = re `[\-d-hM-N\tQ-T]`;
    _ = re `[^\-\tA]`;
    _ = re `[^\-\u{1234A}]`;
}

Test-Case: output
Description: Test regular expression with ReAtom without ReFlagsOnOff.
Labels: ReAtom, ReCharSet, ReFlagsOnOff, RegExp

function init() {
    _ = re `(AAD*)`;
    _ = re `([^\-d-hM-N\tQ-T])`;
    _ = re `(a{1,3})`;
    _ = re `(A.*?)`;
    _ = re `([^ABC{1,3}])`;
    _ = re `([\u{1234}])`;
    _ = re `([\t]*)`;
    _ = re `([\-d-hM-N\tQ-T])`;
    _ = re `([\-])`;
    _ = re `(x|y|z*)`;
}
