Test-Case: output
Description: Test integer subtraction with positive integers.
Labels: additive-expr, DecimalNumber, int

function init() {
    int a1 = 0;
    int a2 = 7;
    int a3 = 5363728;
    int a4 = 352612839171643627;
    int a5 = 9223372036854775800;

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output -7
    io:println(a1 - a3); // @output -5363728
    io:println(a1 - a4); // @output -352612839171643627
    io:println(a1 - a5); // @output -9223372036854775800

    io:println(a2 - a1); // @output 7
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output -5363721
    io:println(a2 - a4); // @output -352612839171643620
    io:println(a2 - a5); // @output -9223372036854775793

    io:println(a3 - a1); // @output 5363728
    io:println(a3 - a2); // @output 5363721
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output -352612839166279899

    io:println(a4 - a1); // @output 352612839171643627
    io:println(a4 - a2); // @output 352612839171643620
    io:println(a4 - a3); // @output 352612839166279899

    io:println(a5 - a1); // @output 9223372036854775800
    io:println(a5 - a2); // @output 9223372036854775793
}

Test-Case: output
Description: Test integer subtraction with negative integers.
Labels: additive-expr, DecimalNumber, int, unary-minus

function init() {
    int a1 = -0;
    int a2 = -8;
    int a3 = -5363728;
    int a4 = -352612839171643627;
    int a5 = -9223372036854775800;

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output 8
    io:println(a1 - a3); // @output 5363728
    io:println(a1 - a4); // @output 352612839171643627
    io:println(a1 - a5); // @output 9223372036854775800

    io:println(a2 - a1); // @output -8
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output 5363720
    io:println(a2 - a4); // @output 352612839171643619
    io:println(a2 - a5); // @output 9223372036854775792

    io:println(a3 - a1); // @output -5363728
    io:println(a3 - a2); // @output -5363720
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output 352612839166279899

    io:println(a4 - a1); // @output -352612839171643627
    io:println(a4 - a2); // @output -352612839171643619
    io:println(a4 - a3); // @output -352612839166279899

    io:println(a5 - a1); // @output -9223372036854775800
    io:println(a5 - a2); // @output -9223372036854775792
}

Test-Case: output
Description: Test integer subtraction when one operand is negative and the other is positive integer.
Labels: additive-expr, DecimalNumber, int, unary-minus

function init() {
    int a1 = -9223372036854775800;
    int a2 = -34562;
    int a3 = -1;
    int a4 = 7;
    int a5 = 6574;
    int a6 = 9223372036854775806;

    io:println(a1 - a4); // @output -9223372036854775807

    io:println(a2 - a4); // @output -34569
    io:println(a2 - a5); // @output -41136

    io:println(a3 - a4); // @output -8
    io:println(a3 - a5); // @output -6575
    io:println(a3 - a6); // @output -9223372036854775807

    io:println(a4 - a1); // @output 9223372036854775807
    io:println(a4 - a2); // @output 34569
    io:println(a4 - a3); // @output 8

    io:println(a5 - a2); // @output 41136
    io:println(a5 - a3); // @output 6575

    io:println(a6 - a3); // @output 9223372036854775807
}

Test-Case: output
Description: Test integer subtraction with hex int literals.
Labels: additive-expr, HexIntLiteral, int, unary-minus

function init() {
    int a1 = -0xfabd12;
    int a2 = -0x345;
    int a3 = -0x12a;
    int a4 = 0x0325;
    int a5 = 0xde;
    int a6 = 0xfffedf;

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output -16431565
    io:println(a1 - a3); // @output -16432104
    io:println(a1 - a4); // @output -16433207
    io:println(a1 - a5); // @output -16432624
    io:println(a1 - a6); // @output -33209329

    io:println(a2 - a1); // @output 16431565
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output -539
    io:println(a2 - a4); // @output -1642
    io:println(a2 - a5); // @output -1059
    io:println(a2 - a6); // @output -16777764

    io:println(a3 - a1); // @output 16432104
    io:println(a3 - a2); // @output 539
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output -1103
    io:println(a3 - a5); // @output -520
    io:println(a3 - a6); // @output -16777225

    io:println(a4 - a1); // @output 16433207
    io:println(a4 - a2); // @output 1642
    io:println(a4 - a3); // @output 1103
    io:println(a4 - a4); // @output 0
    io:println(a4 - a5); // @output 583
    io:println(a4 - a6); // @output -16776122

    io:println(a5 - a1); // @output 16432624
    io:println(a5 - a2); // @output 1059
    io:println(a5 - a3); // @output 520
    io:println(a5 - a4); // @output -583
    io:println(a5 - a5); // @output 0
    io:println(a5 - a6); // @output -16776705

    io:println(a6 - a1); // @output 33209329
    io:println(a6 - a2); // @output 16777764
    io:println(a6 - a3); // @output 16777225
    io:println(a6 - a4); // @output 16776122
    io:println(a6 - a5); // @output 16776705
    io:println(a6 - a6); // @output 0
}

Test-Case: output
Description: Test integer subtraction with int literals.
Labels: additive-expr, DecimalNumber, int, unary-minus

function init() {
    io:println(-9223372036854775800 - 7); // @output -9223372036854775807

    io:println(-34562 - 7); // @output -34569
    io:println(-34562 - 6574); // @output -41136

    io:println(-1 - 7); // @output -8
    io:println(-1 - 6574); // @output -6575
    io:println(-1 - 9223372036854775806); // @output -9223372036854775807

    io:println(7 - -9223372036854775800); // @output 9223372036854775807
    io:println(7 - -34562); // @output 34569
    io:println(7 - -1); // @output 8

    io:println(6574 - -34562); // @output 41136
    io:println(6574 - -1); // @output 6575

    io:println(9223372036854775806 - -1); // @output 9223372036854775807
}

Test-Case: output
Description: Test integer subtraction with hex int literals as operands.
Labels: additive-expr, HexIntLiteral, unary-minus

function init() {
    io:println(-0xfabd12 - -0xfabd12); // @output 0
    io:println(-0xfabd12 - -0x345); // @output -16431565
    io:println(-0xfabd12 - -0x12a); // @output -16432104
    io:println(-0xfabd12 - 0x0325); // @output -16433207
    io:println(-0xfabd12 - 0xde); // @output -16432624
    io:println(-0xfabd12 - 0xfffedf); // @output -33209329

    io:println(-0x345 - -0xfabd12); // @output 16431565
    io:println(-0x345 - -0x345); // @output 0
    io:println(-0x345 - -0x12a); // @output -539
    io:println(-0x345 - 0x0325); // @output -1642
    io:println(-0x345 - 0xde); // @output -1059
    io:println(-0x345 - 0xfffedf); // @output -16777764

    io:println(-0x12a - -0xfabd12); // @output 16432104
    io:println(-0x12a - -0x345); // @output 539
    io:println(-0x12a - -0x12a); // @output 0
    io:println(-0x12a - 0x0325); // @output -1103
    io:println(-0x12a - 0xde); // @output -520
    io:println(-0x12a - 0xfffedf); // @output -16777225

    io:println(0x0325 - -0xfabd12); // @output 16433207
    io:println(0x0325 - -0x345); // @output 1642
    io:println(0x0325 - -0x12a); // @output 1103
    io:println(0x0325 - 0x0325); // @output 0
    io:println(0x0325 - 0xde); // @output 583
    io:println(0x0325 - 0xfffedf); // @output -16776122

    io:println(0xde - -0xfabd12); // @output 16432624
    io:println(0xde - -0x345); // @output 1059
    io:println(0xde - -0x12a); // @output 520
    io:println(0xde - 0x0325); // @output -583
    io:println(0xde - 0xde); // @output 0
    io:println(0xde - 0xfffedf); // @output -16776705

    io:println(0xfffedf - -0xfabd12); // @output 33209329
    io:println(0xfffedf - -0x345); // @output 16777764
    io:println(0xfffedf - -0x12a); // @output 16777225
    io:println(0xfffedf - 0x0325); // @output 16776122
    io:println(0xfffedf - 0xde); // @output 16776705
    io:println(0xfffedf - 0xfffedf); // @output 0
}

Test-Case: panic
Description: Test integer subtraction overflow.
Labels: additive-expr, DecimalNumber, int, unary-minus

function init() {
    int a = 9223372036854775807;
    int b = -2;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow.
Labels: additive-expr, DecimalNumber, int, unary-minus

function init() {
    _ = 9223372036854775807 - -2; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow.
Labels: additive-expr, DecimalNumber, int, unary-minus

function init() {
    int a = -9223372036854775807;
    int b = 2;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow.
Labels: additive-expr, DecimalNumber, int, unary-minus

function init() {
    _ = -9223372036854775807 - 2; // @panic integer overflow
}

Test-Case: output
Description: Test integer subtraction with Unsigned8 integers.
Labels: additive-expr, DecimalNumber, int:Unsigned8

function init() {
    int:Unsigned8 a1 = 0;
    int:Unsigned8 a2 = 10;
    int:Unsigned8 a3 = 123;
    int:Unsigned8 a4 = 255;

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output -10
    io:println(a1 - a3); // @output -123
    io:println(a1 - a4); // @output -255

    io:println(a2 - a1); // @output 10
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output -113
    io:println(a2 - a4); // @output -245

    io:println(a3 - a1); // @output 123
    io:println(a3 - a2); // @output 113
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output -132

    io:println(a4 - a1); // @output 255
    io:println(a4 - a2); // @output 245
    io:println(a4 - a3); // @output 132
    io:println(a4 - a4); // @output 0
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Unsigned8.
Labels: additive-expr, DecimalNumber, int, int:Unsigned8, unary-minus

function init() {
    int:Unsigned8 a = 255;
    int b = -9223372036854775807;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Unsigned8.
Labels: additive-expr, DecimalNumber, int, int:Unsigned8, unary-minus

function init() {
    int:Unsigned8 a = 255;
    _ = a - -9223372036854775807; // @panic integer overflow
}

Test-Case: output
Description: Test integer subtraction with byte.
Labels: additive-expr, byte, DecimalNumber

function init() {
    byte a1 = 0;
    byte a2 = 10;
    byte a3 = 123;
    byte a4 = 255;

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output -10
    io:println(a1 - a3); // @output -123
    io:println(a1 - a4); // @output -255

    io:println(a2 - a1); // @output 10
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output -113
    io:println(a2 - a4); // @output -245

    io:println(a3 - a1); // @output 123
    io:println(a3 - a2); // @output 113
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output -132

    io:println(a4 - a1); // @output 255
    io:println(a4 - a2); // @output 245
    io:println(a4 - a3); // @output 132
    io:println(a4 - a4); // @output 0
}

Test-Case: panic
Description: Test integer subtraction overflow when one operand is of byte type.
Labels: additive-expr, byte, DecimalNumber, int, unary-minus

function init() {
    byte a = 255;
    int b = -9223372036854775807;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with byte.
Labels: additive-expr, byte, DecimalNumber, int, unary-minus

function init() {
    byte a = 255;
    _ = a - -9223372036854775807; // @panic integer overflow
}

Test-Case: output
Description: Test integer subtraction with Unsigned16 integers.
Labels: additive-expr, DecimalNumber, int:Unsigned16

function init() {
    int:Unsigned16 a1 = 0;
    int:Unsigned16 a2 = 10;
    int:Unsigned16 a3 = 4323;
    int:Unsigned16 a4 = 65535;

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output -10
    io:println(a1 - a3); // @output -4323
    io:println(a1 - a4); // @output -65535

    io:println(a2 - a1); // @output 10
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output -4313
    io:println(a2 - a4); // @output -65525

    io:println(a3 - a1); // @output 4323
    io:println(a3 - a2); // @output 4313
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output -61212

    io:println(a4 - a1); // @output 65535
    io:println(a4 - a2); // @output 65525
    io:println(a4 - a3); // @output 61212
    io:println(a4 - a4); // @output 0
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Unsigned16.
Labels: additive-expr, DecimalNumber, int, int:Unsigned16, unary-minus

function init() {
    int:Unsigned16 a = 255;
    int b = -9223372036854775807;
    _ = a - b; // @panic integer overflow
}


Test-Case: panic
Description: Test integer subtraction overflow with int:Unsigned16.
Labels: additive-expr, DecimalNumber, int, int:Unsigned16, unary-minus

function init() {
    int:Unsigned16 a = 255;
    _ = a - -9223372036854775807; // @panic integer overflow
}

Test-Case: output
Description: Test integer subtraction with Unsigned32 integers.
Labels: additive-expr, DecimalNumber, int:Unsigned32

function init() {
    int:Unsigned32 a1 = 0;
    int:Unsigned32 a2 = 10;
    int:Unsigned32 a3 = 435261;
    int:Unsigned32 a4 = 4294967295;

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output -10
    io:println(a1 - a3); // @output -435261
    io:println(a1 - a4); // @output -4294967295

    io:println(a2 - a1); // @output 10
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output -435251
    io:println(a2 - a4); // @output -4294967285

    io:println(a3 - a1); // @output 435261
    io:println(a3 - a2); // @output 435251
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output -4294532034

    io:println(a4 - a1); // @output 4294967295
    io:println(a4 - a2); // @output 4294967285
    io:println(a4 - a3); // @output 4294532034
    io:println(a4 - a4); // @output 0
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Unsigned32.
Labels: additive-expr, DecimalNumber, int, int:Unsigned32, unary-minus

function init() {
    int:Unsigned32 a = 255;
    int b = -9223372036854775807;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Unsigned32.
Labels: additive-expr, DecimalNumber, int, int:Unsigned32, unary-minus

function init() {
    int:Unsigned32 a = 255;
    _ = a - -9223372036854775807; // @panic integer overflow
}

Test-Case: output
Description: Test integer subtraction with positive int:Signed8 integers.
Labels: additive-expr, DecimalNumber, int:Signed8

function init() {
    int:Signed8 a1 = 0;
    int:Signed8 a2 = 2;
    int:Signed8 a3 = 57;
    int:Signed8 a4 = 127;

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output -2
    io:println(a1 - a3); // @output -57
    io:println(a1 - a4); // @output -127

    io:println(a2 - a1); // @output 2
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output -55
    io:println(a2 - a4); // @output -125

    io:println(a3 - a1); // @output 57
    io:println(a3 - a2); // @output 55
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output -70

    io:println(a4 - a1); // @output 127
    io:println(a4 - a2); // @output 125
    io:println(a4 - a3); // @output 70
    io:println(a4 - a4); // @output 0
}

Test-Case: output
Description: Test integer subtraction with negative int:Signed8 integers.
Labels: additive-expr, DecimalNumber, int:Signed8

function init() {
    int:Signed8 a1 = -0;
    int:Signed8 a2 = -2;
    int:Signed8 a3 = -57;
    int:Signed8 a4 = -128;

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output 2
    io:println(a1 - a3); // @output 57
    io:println(a1 - a4); // @output 128

    io:println(a2 - a1); // @output -2
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output 55
    io:println(a2 - a4); // @output 126

    io:println(a3 - a1); // @output -57
    io:println(a3 - a2); // @output -55
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output 71

    io:println(a4 - a1); // @output -128
    io:println(a4 - a2); // @output -126
    io:println(a4 - a3); // @output -71
    io:println(a4 - a4); // @output 0
}

Test-Case: output
Description: Test integer subtraction when one operand is negative and the other is positive Signed8 integer.
Labels: additive-expr, DecimalNumber, int:Signed8, unary-minus

function init() {
    int:Signed8 a1 = -128;
    int:Signed8 a2 = -100;
    int:Signed8 a3 = -1;
    int:Signed8 a4 = 1;
    int:Signed8 a5 = 100;
    int:Signed8 a6 = 127;

    io:println(a1 - a4); // @output -129
    io:println(a1 - a5); // @output -228
    io:println(a1 - a6); // @output -255

    io:println(a2 - a4); // @output -101
    io:println(a2 - a5); // @output -200
    io:println(a2 - a6); // @output -227

    io:println(a3 - a4); // @output -2
    io:println(a3 - a5); // @output -101
    io:println(a3 - a6); // @output -128

    io:println(a4 - a1); // @output 129
    io:println(a4 - a2); // @output 101
    io:println(a4 - a3); // @output 2

    io:println(a5 - a1); // @output 228
    io:println(a5 - a2); // @output 200
    io:println(a5 - a3); // @output 101

    io:println(a6 - a1); // @output 255
    io:println(a6 - a2); // @output 227
    io:println(a6 - a3); // @output 128
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Signed8.
Labels: additive-expr, DecimalNumber, int, int:Signed8, unary-minus

function init() {
    int a = 9223372036854775800;
    int:Signed8 b = -127;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Signed8.
Labels: additive-expr, DecimalNumber, int, int:Signed8, unary-minus

function init() {
    int:Signed8 a = -127;
    _ = 9223372036854775800 - a; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Signed8.
Labels: additive-expr, DecimalNumber, int, int:Signed8

function init() {
    int a = -9223372036854775806;
    int:Signed8 b = 10;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Signed8.
Labels: additive-expr, DecimalNumber, int, int:Signed8

function init() {
    int:Signed8 a = 10;
    _ = -9223372036854775806 - a; // @panic integer overflow
}

Test-Case: output
Description: Test integer subtraction with positive int:Signed16 integers.
Labels: additive-expr, DecimalNumber, int:Signed16

function init() {
    int:Signed16 a1 = 0;
    int:Signed16 a2 = 20;
    int:Signed16 a3 = 5463;
    int:Signed16 a4 = 32767;

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output -20
    io:println(a1 - a3); // @output -5463
    io:println(a1 - a4); // @output -32767

    io:println(a2 - a1); // @output 20
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output -5443
    io:println(a2 - a4); // @output -32747

    io:println(a3 - a1); // @output 5463
    io:println(a3 - a2); // @output 5443
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output -27304

    io:println(a4 - a1); // @output 32767
    io:println(a4 - a2); // @output 32747
    io:println(a4 - a3); // @output 27304
    io:println(a4 - a4); // @output 0
}

Test-Case: output
Description: Test integer subtraction with negative int:Signed16 integers.
Labels: additive-expr, DecimalNumber, int:Signed16

function init() {
    int:Signed16 a1 = -0;
    int:Signed16 a2 = -20;
    int:Signed16 a3 = -2313;
    int:Signed16 a4 = -32768;

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output 20
    io:println(a1 - a3); // @output 2313
    io:println(a1 - a4); // @output 32768

    io:println(a2 - a1); // @output -20
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output 2293
    io:println(a2 - a4); // @output 32748

    io:println(a3 - a1); // @output -2313
    io:println(a3 - a2); // @output -2293
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output 30455

    io:println(a4 - a1); // @output -32768
    io:println(a4 - a2); // @output -32748
    io:println(a4 - a3); // @output -30455
    io:println(a4 - a4); // @output 0
}

Test-Case: output
Description: Test integer subtraction when one operand is negative and the other is positive Signed16 integer.
Labels: additive-expr, DecimalNumber, int:Signed16, unary-minus

function init() {
    int:Signed16 a1 = -32768;
    int:Signed16 a2 = -2344;
    int:Signed16 a3 = -10;
    int:Signed16 a4 = 25;
    int:Signed16 a5 = 4536;
    int:Signed16 a6 = 32767;

    io:println(a1 - a4); // @output -32793
    io:println(a1 - a5); // @output -37304
    io:println(a1 - a6); // @output -65535

    io:println(a2 - a4); // @output -2369
    io:println(a2 - a5); // @output -6880
    io:println(a2 - a6); // @output -35111

    io:println(a3 - a4); // @output -35
    io:println(a3 - a5); // @output -4546
    io:println(a3 - a6); // @output -32777

    io:println(a4 - a1); // @output 32793
    io:println(a4 - a2); // @output 2369
    io:println(a4 - a3); // @output 35

    io:println(a5 - a1); // @output 37304
    io:println(a5 - a2); // @output 6880
    io:println(a5 - a3); // @output 4546

    io:println(a6 - a1); // @output 65535
    io:println(a6 - a2); // @output 35111
    io:println(a6 - a3); // @output 32777
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Signed16.
Labels: additive-expr, DecimalNumber, int, int:Signed16, unary-minus

function init() {
    int a = 9223372036854775800;
    int:Signed16 b = -127;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Signed16.
Labels: additive-expr, DecimalNumber, int, int:Signed16, unary-minus

function init() {
    int:Signed16 a = -127;
    _ = 9223372036854775800 - a; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Signed16.
Labels: additive-expr, DecimalNumber, int, int:Signed16, unary-minus

function init() {
    int a = -9223372036854775806;
    int:Signed16 b = 10;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Signed16.
Labels: additive-expr, DecimalNumber, int, int:Signed16, unary-minus

function init() {
    int:Signed16 a = 10;
    _ = -9223372036854775806 - a; // @panic integer overflow
}

Test-Case: output
Description: Test integer subtraction with positive int:Signed32 integers.
Labels: additive-expr, DecimalNumber, int:Signed32

function init() {
    int:Signed32 a1 = 0;
    int:Signed32 a2 = 253;
    int:Signed32 a3 = 2324152;
    int:Signed32 a4 = 2147483647;

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output -253
    io:println(a1 - a3); // @output -2324152
    io:println(a1 - a4); // @output -2147483647

    io:println(a2 - a1); // @output 253
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output -2323899
    io:println(a2 - a4); // @output -2147483394

    io:println(a3 - a1); // @output 2324152
    io:println(a3 - a2); // @output 2323899
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output -2145159495

    io:println(a4 - a1); // @output 2147483647
    io:println(a4 - a2); // @output 2147483394
    io:println(a4 - a3); // @output 2145159495
    io:println(a4 - a4); // @output 0
}

Test-Case: output
Description: Test integer subtraction with negative int:Signed32 integers.
Labels: additive-expr, DecimalNumber, int:Signed32

function init() {
    int:Signed32 a1 = -0;
    int:Signed32 a2 = -345;
    int:Signed32 a3 = -3425271;
    int:Signed32 a4 = -2147483648;

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output 345
    io:println(a1 - a3); // @output 3425271
    io:println(a1 - a4); // @output 2147483648

    io:println(a2 - a1); // @output -345
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output 3424926
    io:println(a2 - a4); // @output 2147483303

    io:println(a3 - a1); // @output -3425271
    io:println(a3 - a2); // @output -3424926
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output 2144058377

    io:println(a4 - a1); // @output -2147483648
    io:println(a4 - a2); // @output -2147483303
    io:println(a4 - a3); // @output -2144058377
    io:println(a4 - a4); // @output 0
}

Test-Case: output
Description: Test integer subtraction when one operand is negative and the other is positive Signed32 integer.
Labels: additive-expr, DecimalNumber, int:Signed32, unary-minus

function init() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = -23444;
    int:Signed32 a3 = -10;
    int:Signed32 a4 = 25;
    int:Signed32 a5 = 45363;
    int:Signed32 a6 = 2147483647;

    io:println(a1 - a4); // @output -2147483673
    io:println(a1 - a5); // @output -2147529011
    io:println(a1 - a6); // @output -4294967295

    io:println(a2 - a4); // @output -23469
    io:println(a2 - a5); // @output -68807
    io:println(a2 - a6); // @output -2147507091

    io:println(a3 - a4); // @output -35
    io:println(a3 - a5); // @output -45373
    io:println(a3 - a6); // @output -2147483657

    io:println(a4 - a1); // @output 2147483673
    io:println(a4 - a2); // @output 23469
    io:println(a4 - a3); // @output 35

    io:println(a5 - a1); // @output 2147529011
    io:println(a5 - a2); // @output 68807
    io:println(a5 - a3); // @output 45373

    io:println(a6 - a1); // @output 4294967295
    io:println(a6 - a2); // @output 2147507091
    io:println(a6 - a3); // @output 2147483657
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Signed32.
Labels: additive-expr, DecimalNumber, int, int:Signed32

function init() {
    int a = 9223372036854775800;
    int:Signed32 b = -4532;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Signed32.
Labels: additive-expr, DecimalNumber, int, int:Signed32

function init() {
    int:Signed32 a = -234;
    _ = 9223372036854775800 - a; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Signed32.
Labels: additive-expr, DecimalNumber, int, int:Signed32

function init() {
    int a = -9223372036854775806;
    int:Signed32 b = 3452;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Signed32.
Labels: additive-expr, DecimalNumber, int, int:Signed32

function init() {
    int:Signed32 a = 1234;
    _ = -9223372036854775806 - a; // @panic integer overflow
}

Test-Case: output
Description: Test integer subtraction with user-defined subtype of int.
Labels: additive-expr, DecimalNumber, module-type-defn, singleton-type, unary-minus, union-type

type IntType1 -2|-1|0|1|2;

type IntType2 int:Unsigned8|int:Signed32;

function init() {
    IntType1 a1 = 1;
    IntType1 a2 = -2;
    IntType2 a3 = -324;
    IntType2 a4 = 1123;

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output 3
    io:println(a1 - a3); // @output 325
    io:println(a1 - a4); // @output -1122

    io:println(a2 - a1); // @output -3
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output 322
    io:println(a2 - a4); // @output -1125

    io:println(a3 - a1); // @output -325
    io:println(a3 - a2); // @output -322
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output -1447

    io:println(a4 - a1); // @output 1122
    io:println(a4 - a2); // @output 1125
    io:println(a4 - a3); // @output 1447
    io:println(a4 - a4); // @output 0
}

Test-Case: output
Description: Test integer subtraction with user-defined subtype of int.
Labels: additive-expr, DecimalNumber, module-type-defn, singleton-type, unary-minus, union-type

type IntType1 -2|-1|0|1|2;

type IntType2 int:Unsigned8|int:Signed32;

type IntType3 IntType1|IntType2;

function init() {
    IntType1 a1 = 1;
    IntType1 a2 = -2;
    IntType2 a3 = -324;
    IntType2 a4 = 1123;
    IntType3 a5 = 0;
    IntType3 a6 = -12;

    io:println(a1 - a5); // @output 1
    io:println(a1 - a6); // @output 13

    io:println(a2 - a5); // @output -2
    io:println(a2 - a6); // @output 10

    io:println(a3 - a5); // @output -324
    io:println(a3 - a6); // @output -312

    io:println(a4 - a5); // @output 1123
    io:println(a4 - a6); // @output 1135

    io:println(a5 - a1); // @output -1
    io:println(a5 - a2); // @output 2
    io:println(a5 - a3); // @output 324
    io:println(a5 - a4); // @output -1123
    io:println(a5 - a5); // @output 0
    io:println(a5 - a6); // @output 12

    io:println(a6 - a1); // @output -13
    io:println(a6 - a2); // @output -10
    io:println(a6 - a3); // @output 312
    io:println(a6 - a4); // @output -1135
    io:println(a6 - a5); // @output -12
    io:println(a6 - a6); // @output 0
}

Test-Case: panic
Description: Test integer subtraction overflow with user-defined subtype of int.
Labels: additive-expr, DecimalNumber, module-type-defn, numeric-nil-lifting, optional-type, singleton-type, unary-minus,
        union-type

type IntType1 -2|-1|0|1|2;

function init() {
    int a = 9223372036854775807;
    IntType1 b = -2;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with user-defined subtype of int.
Labels: additive-expr, DecimalNumber, int:Signed32, int:Unsigned8, module-type-defn, numeric-nil-lifting, optional-type,
        union-type

type IntType2 int:Unsigned8|int:Signed32;

function init() {
    int a = 9223372036854775807;
    IntType2 b = -2;
    _ = a - b; // @panic integer overflown
}

Test-Case: panic
Description: Test integer subtraction overflow with user-defined subtype of int.
Labels: additive-expr, DecimalNumber, module-type-defn, singleton-type, unary-minus, union-type

type IntType1 -2|-1|0|1|2;

type IntType2 int:Unsigned8|int:Signed32;

type IntType3 IntType1|IntType2;

function init() {
    int a = 9223372036854775807;
    IntType3 b = -2;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with user-defined subtype of int.
Labels: additive-expr, DecimalNumber, module-type-defn, singleton-type, unary-minus, union-type

type IntType1 -2|-1|0|1|2;

function init() {
    IntType1 a = -2;
    _ = 9223372036854775807 - a; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with user-defined subtype of int.
Labels: additive-expr, DecimalNumber, module-type-defn, union-type

type IntType2 int:Unsigned8|int:Signed32;

function init() {
    IntType2 a = 2;
    _ = -9223372036854775807 - a; // @panic integer overflown
}

Test-Case: panic
Description: Test integer subtraction overflow with user-defined subtype of int.
Labels: additive-expr, DecimalNumber, module-type-defn, singleton-type, unary-minus, union-type

type IntType1 -2|-1|0|1|2;

type IntType2 int:Unsigned8|int:Signed32;

type IntType3 IntType1|IntType2;

function init() {
    IntType3 a = 2;
    _ = -9223372036854775807 - a; // @panic integer overflow
}

Test-Case: output
Description: Test integer subtraction with operands of different subtypes of int.
Labels: additive-expr, byte, DecimalNumber, int, int:Signed16, int:Signed32, int:Signed8, int:Unsigned16,
        int:Unsigned32, int:Unsigned8, module-type-defn, unary-minus, union-type

type IntType1 -1|1|0|2;

function init() {
    int a1 = -1;
    byte a2 = 2;
    int:Signed8 a3 = -3;
    int:Signed16 a4 = 4;
    int:Signed32 a5 = -5;
    int:Unsigned8 a6 = 6;
    int:Unsigned16 a7 = 7;
    int:Unsigned32 a8 = 8;
    IntType1 a9 = -1;
    int:Signed8|int:Signed32 a10 = 10;

    int a = a1 - a2;
    io:println(a); // @output -3

    a = a1 - a2;
    io:println(a); // @output -3

    a = a1 - a3;
    io:println(a); // @output 2

    a = a1 - a4;
    io:println(a); // @output -5

    a = a1 - a5;
    io:println(a); // @output 4

    a = a1 - a6;
    io:println(a); // @output -7

    a = a1 - a7;
    io:println(a); // @output -8

    a = a1 - a8;
    io:println(a); // @output -9

    a = a1 - a9;
    io:println(a); // @output 0

    a = a1 - a10;
    io:println(a); // @output -11

    a = a2 - a3;
    io:println(a); // @output 5

    a = a2 - a4;
    io:println(a); // @output -2

    a = a2 - a5;
    io:println(a); // @output 7

    a = a2 - a6;
    io:println(a); // @output -4

    a = a2 - a7;
    io:println(a); // @output -5

    a = a2 - a8;
    io:println(a); // @output -6

    a = a2 - a9;
    io:println(a); // @output 3

    a = a2 - a10;
    io:println(a); // @output -8

    a = a3 - a4;
    io:println(a); // @output -7

    a = a3 - a5;
    io:println(a); // @output 2

    a = a3 - a6;
    io:println(a); // @output -9

    a = a3 - a7;
    io:println(a); // @output -10

    a = a3 - a8;
    io:println(a); // @output -11

    a = a3 - a9;
    io:println(a); // @output -2

    a = a3 - a10;
    io:println(a); // @output -13

    a = a4 - a5;
    io:println(a); // @output 9

    a = a4 - a6;
    io:println(a); // @output -2

    a = a4 - a7;
    io:println(a); // @output -3

    a = a4 - a8;
    io:println(a); // @output -4

    a = a4 - a9;
    io:println(a); // @output 5

    a = a4 - a10;
    io:println(a); // @output -6

    a = a5 - a6;
    io:println(a); // @output -11

    a = a5 - a7;
    io:println(a); // @output -12

    a = a5 - a8;
    io:println(a); // @output -13

    a = a5 - a9;
    io:println(a); // @output -4

    a = a5 - a10;
    io:println(a); // @output -15

    a = a6 - a7;
    io:println(a); // @output -1

    a = a6 - a8;
    io:println(a); // @output -2

    a = a6 - a9;
    io:println(a); // @output 7

    a = a6 - a10;
    io:println(a); // @output -4

    a = a7 - a8;
    io:println(a); // @output -1

    a = a7 - a9;
    io:println(a); // @output 8

    a = a7 - a10;
    io:println(a); // @output -3

    a = a8 - a9;
    io:println(a); // @output 9

    a = a8 - a10;
    io:println(a); // @output -2

    a = a9 - a10;
    io:println(a); // @output -11
}

Test-Case: output
Description: Test integer subtraction with operands of different subtypes of int.
Labels: additive-expr, byte, DecimalNumber, int, int:Signed16, int:Signed32, int:Signed8, int:Unsigned16,
        int:Unsigned32, int:Unsigned8, module-type-defn, unary-minus, union-type

type IntType1 -1|1|0|2;

function init() {
    int a1 = -1;
    byte a2 = 2;
    int:Signed8 a3 = -3;
    int:Signed16 a4 = 4;
    int:Signed32 a5 = -5;
    int:Unsigned8 a6 = 6;
    int:Unsigned16 a7 = 7;
    int:Unsigned32 a8 = 8;
    IntType1 a9 = -1;
    int:Signed8|int:Signed32 a10 = 10;

    int a = a1 - a2 - a3 - a4 - a9;
    io:println(a); // @output -3

    a = a - a5 - a6 - a7 - a8 - a10;
    io:println(a); // @output -29
}

Test-Case: output
Description: Test assigning the result of an additive expression to a compatible type.
Labels: additive-expr, any, DecimalNumber, int, is-expr, string, union-type

function init() {
    int|string a = 20 - 10;
    io:println(a); // @output 10
    io:println(a is int); // @output true

    any b = 20 - 10;
    io:println(b); // @output 10
    io:println(b is int); // @output true
}

Test-Case: output
Description: Test assigning the result of an additive expression to var.
Labels: additive-expr, DecimalNumber, is-expr, var

function init() {
    var a = 20 - 10;
    io:println(a); // @output 10
    io:println(a is int); // @output true
}

Test-Case: output
Description: Test using additive expression at module level.
Labels: additive-expr, DecimalNumber, int, is-expr, module-const-decl, module-init-var-decl, var

var a = 20 - 10;

int b = 20 - 10;

const int c = 20 - 10;

function init() {
    io:println(a); // @output 10
    io:println(a is int); // @output true

    io:println(b); // @output 10

    io:println(c); // @output 10
}

Test-Case: panic
Description: Test integer subtraction overflow at module level.
Labels: additive-expr, DecimalNumber, int, int:MAX_VALUE, module-init-var-decl

int _ = int:MAX_VALUE - -1; // @panic integer overflow

Test-Case: panic
Description: Test integer subtraction overflow at module level.
Labels: additive-expr, DecimalNumber, int, int:MIN_VALUE, module-init-var-decl

int _ = int:MIN_VALUE - 1; // @panic integer overflow

Test-Case: output
Description: Test integer subtraction when at least one or both of the operands are positive integers or nil
             of type int?.
Labels: additive-expr, DecimalNumber, int, nil-literal, numeric-nil-lifting, optional-type, value:toBalString

function init() {
    int? a1 = 0;
    int? a2 = 7;
    int? a3 = 5363728;
    int? a4 = 352612839171643627;
    int? a5 = 9223372036854775800;
    int? a6 = ();

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output -7
    io:println(a1 - a3); // @output -5363728
    io:println(a1 - a4); // @output -352612839171643627
    io:println(a1 - a5); // @output -9223372036854775800
    io:println((a1 - a6).toBalString()); // @output ()

    io:println(a2 - a1); // @output 7
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output -5363721
    io:println(a2 - a4); // @output -352612839171643620
    io:println(a2 - a5); // @output -9223372036854775793
    io:println((a2 - a6).toBalString()); // @output ()

    io:println(a3 - a1); // @output 5363728
    io:println(a3 - a2); // @output 5363721
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output -352612839166279899
    io:println((a3 - a6).toBalString()); // @output ()

    io:println(a4 - a1); // @output 352612839171643627
    io:println(a4 - a2); // @output 352612839171643620
    io:println(a4 - a3); // @output 352612839166279899
    io:println((a4 - a6).toBalString()); // @output ()

    io:println(a5 - a1); // @output 9223372036854775800
    io:println(a5 - a2); // @output 9223372036854775793
    io:println((a5 - a6).toBalString()); // @output ()

    io:println((a6 - a1).toBalString()); // @output ()
    io:println((a6 - a2).toBalString()); // @output ()
    io:println((a6 - a3).toBalString()); // @output ()
    io:println((a6 - a4).toBalString()); // @output ()
    io:println((a6 - a5).toBalString()); // @output ()
    io:println((a6 - a6).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer subtraction when at least one or both of the operands are negative integers or nil
             of type int?.
Labels: additive-expr, DecimalNumber, int, nil-literal, numeric-nil-lifting, optional-type, value:toBalString

function init() {
    int? a1 = -0;
    int? a2 = -8;
    int? a3 = -5363728;
    int? a4 = -352612839171643627;
    int? a5 = -9223372036854775800;
    int? a6 = ();

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output 8
    io:println(a1 - a3); // @output 5363728
    io:println(a1 - a4); // @output 352612839171643627
    io:println(a1 - a5); // @output 9223372036854775800
    io:println((a1 - a6).toBalString()); // @output ()

    io:println(a2 - a1); // @output -8
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output 5363720
    io:println(a2 - a4); // @output 352612839171643619
    io:println(a2 - a5); // @output 9223372036854775792
    io:println((a2 - a6).toBalString()); // @output ()

    io:println(a3 - a1); // @output -5363728
    io:println(a3 - a2); // @output -5363720
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output 352612839166279899
    io:println((a3 - a6).toBalString()); // @output ()

    io:println(a4 - a1); // @output -352612839171643627
    io:println(a4 - a2); // @output -352612839171643619
    io:println(a4 - a3); // @output -352612839166279899
    io:println((a4 - a6).toBalString()); // @output ()

    io:println(a5 - a1); // @output -9223372036854775800
    io:println(a5 - a2); // @output -9223372036854775792
    io:println((a5 - a6).toBalString()); // @output ()

    io:println((a6 - a1).toBalString()); // @output ()
    io:println((a6 - a2).toBalString()); // @output ()
    io:println((a6 - a3).toBalString()); // @output ()
    io:println((a6 - a4).toBalString()); // @output ()
    io:println((a6 - a5).toBalString()); // @output ()
    io:println((a6 - a6).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer subtraction when one operand is negative integer or nil and the other is a positive integer
             or nil of type int?.
Labels: additive-expr, DecimalNumber, int, nil-literal, numeric-nil-lifting, optional-type, unary-minus,
        value:toBalString

function init() {
    int? a1 = -9223372036854775800;
    int? a2 = -34562;
    int? a3 = -1;
    int? a4 = 7;
    int? a5 = 6574;
    int? a6 = 9223372036854775806;
    int? a7 = ();

    io:println(a1 - a4); // @output -9223372036854775807
    io:println((a1 - a7).toBalString()); // @output ()

    io:println(a2 - a4); // @output -34569
    io:println(a2 - a5); // @output -41136
    io:println((a2 - a7).toBalString()); // @output ()

    io:println(a3 - a4); // @output -8
    io:println(a3 - a5); // @output -6575
    io:println(a3 - a6); // @output -9223372036854775807
    io:println((a3 - a7).toBalString()); // @output ()

    io:println(a4 - a1); // @output 9223372036854775807
    io:println(a4 - a2); // @output 34569
    io:println(a4 - a3); // @output 8
    io:println((a4 - a7).toBalString()); // @output ()

    io:println(a5 - a2); // @output 41136
    io:println(a5 - a3); // @output 6575
    io:println((a5 - a7).toBalString()); // @output ()

    io:println(a6 - a3); // @output 9223372036854775807
    io:println((a6 - a7).toBalString()); // @output ()
}

Test-Case: panic
Description: Test integer subtraction overflow with integers of type int?.
Labels: additive-expr, DecimalNumber, int, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int a = 9223372036854775807;
    int? b = -2;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with integers of type int?.
Labels: additive-expr, DecimalNumber, int, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int a = -9223372036854775807;
    int? b = 2;
    _ = a - b; // @panic integer overflow
}

Test-Case: output
Description: Test integer subtraction when at least one or both of the operands are integers or nil
             of type int:Unsigned8?.
Labels: additive-expr, DecimalNumber, int:Unsigned8, nil-literal, numeric-nil-lifting, optional-type, value:toBalString

function init() {
    int:Unsigned8? a1 = 0;
    int:Unsigned8? a2 = 10;
    int:Unsigned8? a3 = 123;
    int:Unsigned8? a4 = 255;
    int:Unsigned8? a5 = ();

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output -10
    io:println(a1 - a3); // @output -123
    io:println(a1 - a4); // @output -255
    io:println((a1 - a5).toBalString()); // @output ()

    io:println(a2 - a1); // @output 10
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output -113
    io:println(a2 - a4); // @output -245
    io:println((a2 - a5).toBalString()); // @output ()

    io:println(a3 - a1); // @output 123
    io:println(a3 - a2); // @output 113
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output -132
    io:println((a3 - a5).toBalString()); // @output ()

    io:println(a4 - a1); // @output 255
    io:println(a4 - a2); // @output 245
    io:println(a4 - a3); // @output 132
    io:println(a4 - a4); // @output 0
    io:println((a4 - a5).toBalString()); // @output ()

    io:println((a5 - a1).toBalString()); // @output ()
    io:println((a5 - a2).toBalString()); // @output ()
    io:println((a5 - a3).toBalString()); // @output ()
    io:println((a5 - a4).toBalString()); // @output ()
    io:println((a5 - a5).toBalString()); // @output ()
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Unsigned8?.
Labels: additive-expr, DecimalNumber, int:Unsigned8, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int:Unsigned8? a = 255;
    int b = -9223372036854775807;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Unsigned8?.
Labels: additive-expr, DecimalNumber, int:Unsigned8, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int:Unsigned8? a = 255;
    _ = -9223372036854775807 - a; // @panic integer overflow
}

Test-Case: output
Description: Test integer subtraction when at least one or both of the operands are integers or nil
             of type byte?.
Labels: additive-expr, byte, DecimalNumber, nil-literal, numeric-nil-lifting, optional-type, value:toBalString

function init() {
    byte? a1 = 0;
    byte? a2 = 10;
    byte? a3 = 123;
    byte? a4 = 255;
    byte? a5 = ();

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output -10
    io:println(a1 - a3); // @output -123
    io:println(a1 - a4); // @output -255
    io:println((a1 - a5).toBalString()); // @output ()

    io:println(a2 - a1); // @output 10
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output -113
    io:println(a2 - a4); // @output -245
    io:println((a2 - a5).toBalString()); // @output ()

    io:println(a3 - a1); // @output 123
    io:println(a3 - a2); // @output 113
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output -132
    io:println((a3 - a5).toBalString()); // @output ()

    io:println(a4 - a1); // @output 255
    io:println(a4 - a2); // @output 245
    io:println(a4 - a3); // @output 132
    io:println(a4 - a4); // @output 0
    io:println((a4 - a5).toBalString()); // @output ()

    io:println((a5 - a1).toBalString()); // @output ()
    io:println((a5 - a2).toBalString()); // @output ()
    io:println((a5 - a3).toBalString()); // @output ()
    io:println((a5 - a4).toBalString()); // @output ()
    io:println((a5 - a5).toBalString()); // @output ()
}

Test-Case: panic
Description: Test integer subtraction overflow with byte?.
Labels: additive-expr, byte, DecimalNumber, int, numeric-nil-lifting, optional-type, unary-minus

function init() {
    byte? a = 255;
    int b = -9223372036854775807;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with byte?.
Labels: additive-expr, byte, DecimalNumber, int, numeric-nil-lifting, optional-type, unary-minus

function init() {
    byte? a = 255;
    _ = -9223372036854775807 - a; // @panic integer overflow
}

Test-Case: output
Description: Test integer subtraction when at least one or both of the operands are integers or nil
             of type int:Unsigned16?.
Labels: additive-expr, DecimalNumber, int:Unsigned16, nil-literal, numeric-nil-lifting, optional-type, value:toBalString

function init() {
    int:Unsigned16? a1 = 0;
    int:Unsigned16? a2 = 10;
    int:Unsigned16? a3 = 4323;
    int:Unsigned16? a4 = 65535;
    int:Unsigned16? a5 = ();

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output -10
    io:println(a1 - a3); // @output -4323
    io:println(a1 - a4); // @output -65535
    io:println((a1 - a5).toBalString()); // @output ()

    io:println(a2 - a1); // @output 10
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output -4313
    io:println(a2 - a4); // @output -65525
    io:println((a2 - a5).toBalString()); // @output ()

    io:println(a3 - a1); // @output 4323
    io:println(a3 - a2); // @output 4313
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output -61212
    io:println((a3 - a5).toBalString()); // @output ()

    io:println(a4 - a1); // @output 65535
    io:println(a4 - a2); // @output 65525
    io:println(a4 - a3); // @output 61212
    io:println(a4 - a4); // @output 0
    io:println((a4 - a5).toBalString()); // @output ()

    io:println((a5 - a1).toBalString()); // @output ()
    io:println((a5 - a2).toBalString()); // @output ()
    io:println((a5 - a3).toBalString()); // @output ()
    io:println((a5 - a4).toBalString()); // @output ()
    io:println((a5 - a5).toBalString()); // @output ()
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Unsigned16?.
Labels: additive-expr, DecimalNumber, int:Unsigned16, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int:Unsigned16? a = 255;
    int b = -9223372036854775807;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Unsigned16?.
Labels: additive-expr, DecimalNumber, int:Unsigned16, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int:Unsigned16? a = 255;
    _ = -9223372036854775807 - a; // @panic integer overflow
}

Test-Case: output
Description: Test integer subtraction when at least one or both of the operands are integers or nil
             of type int:Unsigned32?.
Labels: additive-expr, DecimalNumber, int:Unsigned32, nil-literal, numeric-nil-lifting, optional-type, value:toBalString

function init() {
    int:Unsigned32? a1 = 0;
    int:Unsigned32? a2 = 10;
    int:Unsigned32? a3 = 435261;
    int:Unsigned32? a4 = 4294967295;
    int:Unsigned32? a5 = ();

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output -10
    io:println(a1 - a3); // @output -435261
    io:println(a1 - a4); // @output -4294967295
    io:println((a1 - a5).toBalString()); // @output ()

    io:println(a2 - a1); // @output 10
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output -435251
    io:println(a2 - a4); // @output -4294967285
    io:println((a2 - a5).toBalString()); // @output ()

    io:println(a3 - a1); // @output 435261
    io:println(a3 - a2); // @output 435251
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output -4294532034
    io:println((a3 - a5).toBalString()); // @output ()

    io:println(a4 - a1); // @output 4294967295
    io:println(a4 - a2); // @output 4294967285
    io:println(a4 - a3); // @output 4294532034
    io:println(a4 - a4); // @output 0
    io:println((a4 - a5).toBalString()); // @output ()

    io:println((a5 - a1).toBalString()); // @output ()
    io:println((a5 - a2).toBalString()); // @output ()
    io:println((a5 - a3).toBalString()); // @output ()
    io:println((a5 - a4).toBalString()); // @output ()
    io:println((a5 - a5).toBalString()); // @output ()
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Unsigned32?.
Labels: additive-expr, DecimalNumber, int:Unsigned32, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int:Unsigned32? a = 255;
    int b = -9223372036854775807;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with int:Unsigned32?.
Labels: additive-expr, DecimalNumber, int:Unsigned32, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int:Unsigned32? a = 255;
    _ = -9223372036854775807 - a; // @panic integer overflow
}

Test-Case: output
Description: Test integer subtraction when at least one or both of the operands are positive integers or nil
             of type int:Signed8?.
Labels: additive-expr, DecimalNumber, int:Signed8, nil-literal, numeric-nil-lifting, optional-type, value:toBalString

function init() {
    int:Signed8? a1 = 0;
    int:Signed8? a2 = 2;
    int:Signed8? a3 = 57;
    int:Signed8? a4 = 127;
    int:Signed8? a5 = ();

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output -2
    io:println(a1 - a3); // @output -57
    io:println(a1 - a4); // @output -127
    io:println((a1 - a5).toBalString()); // @output ()

    io:println(a2 - a1); // @output 2
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output -55
    io:println(a2 - a4); // @output -125
    io:println((a2 - a5).toBalString()); // @output ()

    io:println(a3 - a1); // @output 57
    io:println(a3 - a2); // @output 55
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output -70
    io:println((a3 - a5).toBalString()); // @output ()

    io:println(a4 - a1); // @output 127
    io:println(a4 - a2); // @output 125
    io:println(a4 - a3); // @output 70
    io:println(a4 - a4); // @output 0
    io:println((a4 - a5).toBalString()); // @output ()

    io:println((a5 - a1).toBalString()); // @output ()
    io:println((a5 - a2).toBalString()); // @output ()
    io:println((a5 - a3).toBalString()); // @output ()
    io:println((a5 - a4).toBalString()); // @output ()
    io:println((a5 - a5).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer subtraction when at least one or both of the operands are negative integers or nil
             of type int:Signed8?.
Labels: additive-expr, DecimalNumber, int:Signed8, nil-literal, numeric-nil-lifting, optional-type, unary-minus,
        value:toBalString

function init() {
    int:Signed8? a1 = -0;
    int:Signed8? a2 = -2;
    int:Signed8? a3 = -57;
    int:Signed8? a4 = -128;
    int:Signed8? a5 = ();

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output 2
    io:println(a1 - a3); // @output 57
    io:println(a1 - a4); // @output 128
    io:println((a1 - a5).toBalString()); // @output ()

    io:println(a2 - a1); // @output -2
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output 55
    io:println(a2 - a4); // @output 126
    io:println((a2 - a5).toBalString()); // @output ()

    io:println(a3 - a1); // @output -57
    io:println(a3 - a2); // @output -55
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output 71
    io:println((a3 - a5).toBalString()); // @output ()

    io:println(a4 - a1); // @output -128
    io:println(a4 - a2); // @output -126
    io:println(a4 - a3); // @output -71
    io:println(a4 - a4); // @output 0
    io:println((a4 - a5).toBalString()); // @output ()

    io:println((a5 - a1).toBalString()); // @output ()
    io:println((a5 - a2).toBalString()); // @output ()
    io:println((a5 - a3).toBalString()); // @output ()
    io:println((a5 - a4).toBalString()); // @output ()
    io:println((a5 - a5).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer subtraction when one operand is a negative integer or nil and the other is a positive integer
             or nil of type Signed8?.
Labels: additive-expr, DecimalNumber, int:Signed8, nil-literal, numeric-nil-lifting, optional-type, unary-minus,
        value:toBalString

function init() {
    int:Signed8? a1 = -128;
    int:Signed8? a2 = -100;
    int:Signed8? a3 = -1;
    int:Signed8? a4 = 1;
    int:Signed8? a5 = 100;
    int:Signed8? a6 = 127;
    int:Signed8? a7 = ();

    io:println(a1 - a4); // @output -129
    io:println(a1 - a5); // @output -228
    io:println(a1 - a6); // @output -255
    io:println((a1 - a7).toBalString()); // @output ()

    io:println(a2 - a4); // @output -101
    io:println(a2 - a5); // @output -200
    io:println(a2 - a6); // @output -227
    io:println((a2 - a7).toBalString()); // @output ()

    io:println(a3 - a4); // @output -2
    io:println(a3 - a5); // @output -101
    io:println(a3 - a6); // @output -128
    io:println((a3 - a7).toBalString()); // @output ()

    io:println(a4 - a1); // @output 129
    io:println(a4 - a2); // @output 101
    io:println(a4 - a3); // @output 2
    io:println((a4 - a7).toBalString()); // @output ()

    io:println(a5 - a1); // @output 228
    io:println(a5 - a2); // @output 200
    io:println(a5 - a3); // @output 101
    io:println((a5 - a7).toBalString()); // @output ()

    io:println(a6 - a1); // @output 255
    io:println(a6 - a2); // @output 227
    io:println(a6 - a3); // @output 128
    io:println((a6 - a7).toBalString()); // @output ()
}

Test-Case: panic
Description: Test integer subtraction overflow with integer of type Signed8?.
Labels: additive-expr, DecimalNumber, int:Signed8, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int a = 9223372036854775800;
    int:Signed8? b = -127;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with integer of type Signed8?.
Labels: additive-expr, DecimalNumber, int:Signed8, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int:Signed8? a = -127;
    _ b = 9223372036854775800 - a; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with integer of type Signed8?.
Labels: additive-expr, DecimalNumber, int:Signed8, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int a = -9223372036854775806;
    int:Signed8? b = 10;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with integer of type Signed8?.
Labels: additive-expr, DecimalNumber, int:Signed8, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int:Signed8? a = 10;
    _ = -9223372036854775806 - a; // @panic integer overflow
}

Test-Case: output
Description: Test integer subtraction when at least one or both of the operands are positive integers or nil
             of type int:Signed16?.
Labels: additive-expr, DecimalNumber, int:Signed16, nil-literal, numeric-nil-lifting, optional-type, value:toBalString

function init() {
    int:Signed16? a1 = 0;
    int:Signed16? a2 = 20;
    int:Signed16? a3 = 5463;
    int:Signed16? a4 = 32767;
    int:Signed16? a5 = ();

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output -20
    io:println(a1 - a3); // @output -5463
    io:println(a1 - a4); // @output -32767
    io:println((a1 - a5).toBalString()); // @output ()

    io:println(a2 - a1); // @output 20
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output -5443
    io:println(a2 - a4); // @output -32747
    io:println((a2 - a5).toBalString()); // @output ()

    io:println(a3 - a1); // @output 5463
    io:println(a3 - a2); // @output 5443
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output -27304
    io:println((a3 - a5).toBalString()); // @output ()

    io:println(a4 - a1); // @output 32767
    io:println(a4 - a2); // @output 32747
    io:println(a4 - a3); // @output 27304
    io:println(a4 - a4); // @output 0
    io:println((a4 - a5).toBalString()); // @output ()

    io:println((a5 - a1).toBalString()); // @output ()
    io:println((a5 - a2).toBalString()); // @output ()
    io:println((a5 - a3).toBalString()); // @output ()
    io:println((a5 - a4).toBalString()); // @output ()
    io:println((a5 - a5).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer subtraction when at least one or both of the operands are negative integers or nil
             of type int:Signed16?.
Labels: additive-expr, DecimalNumber, int:Signed16, nil-literal, numeric-nil-lifting, optional-type, unary-minus,
        value:toBalString

function init() {
    int:Signed16? a1 = -0;
    int:Signed16? a2 = -20;
    int:Signed16? a3 = -2313;
    int:Signed16? a4 = -32768;
    int:Signed16? a5 = ();

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output 20
    io:println(a1 - a3); // @output 2313
    io:println(a1 - a4); // @output 32768
    io:println((a1 - a5).toBalString()); // @output ()

    io:println(a2 - a1); // @output -20
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output 2293
    io:println(a2 - a4); // @output 32748
    io:println((a2 - a5).toBalString()); // @output ()

    io:println(a3 - a1); // @output -2313
    io:println(a3 - a2); // @output -2293
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output 30455
    io:println((a3 - a5).toBalString()); // @output ()

    io:println(a4 - a1); // @output -32768
    io:println(a4 - a2); // @output -32748
    io:println(a4 - a3); // @output -30455
    io:println(a4 - a4); // @output 0
    io:println((a4 - a5).toBalString()); // @output ()

    io:println((a5 - a1).toBalString()); // @output ()
    io:println((a5 - a2).toBalString()); // @output ()
    io:println((a5 - a3).toBalString()); // @output ()
    io:println((a5 - a4).toBalString()); // @output ()
    io:println((a5 - a5).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer subtraction when one operand is a negative integer or nil and the other is a positive integer
             or nil of type Signed16?.
Labels: additive-expr, DecimalNumber, int:Signed16, nil-literal, numeric-nil-lifting, optional-type, unary-minus,
        value:toBalString

function init() {
    int:Signed16? a1 = -32768;
    int:Signed16? a2 = -2344;
    int:Signed16? a3 = -10;
    int:Signed16? a4 = 25;
    int:Signed16? a5 = 4536;
    int:Signed16? a6 = 32767;
    int:Signed16? a7 = ();

    io:println(a1 - a4); // @output -32793
    io:println(a1 - a5); // @output -37304
    io:println(a1 - a6); // @output -65535
    io:println((a1 - a7).toBalString()); // @output ()

    io:println(a2 - a4); // @output -2369
    io:println(a2 - a5); // @output -6880
    io:println(a2 - a6); // @output -35111
    io:println((a2 - a7).toBalString()); // @output ()

    io:println(a3 - a4); // @output -35
    io:println(a3 - a5); // @output -4546
    io:println(a3 - a6); // @output -32777
    io:println((a3 - a7).toBalString()); // @output ()

    io:println(a4 - a1); // @output 32793
    io:println(a4 - a2); // @output 2369
    io:println(a4 - a3); // @output 35
    io:println((a4 - a7).toBalString()); // @output ()

    io:println(a5 - a1); // @output 37304
    io:println(a5 - a2); // @output 6880
    io:println(a5 - a3); // @output 4546
    io:println((a5 - a7).toBalString()); // @output ()

    io:println(a6 - a1); // @output 65535
    io:println(a6 - a2); // @output 35111
    io:println(a6 - a3); // @output 32777
    io:println((a6 - a7).toBalString()); // @output ()
}

Test-Case: panic
Description: Test integer subtraction overflow with integer of type Signed16?.
Labels: additive-expr, DecimalNumber, int:Signed16, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int a = 9223372036854775800;
    int:Signed16? b = -127;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with integer of type Signed16?.
Labels: additive-expr, DecimalNumber, int:Signed16, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int:Signed16? a = -127;
    _ = 9223372036854775800 - a; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with integer of type Signed16?.
Labels: additive-expr, DecimalNumber, int:Signed16, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int a = -9223372036854775806;
    int:Signed16? b = 10;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with integer of type Signed16?.
Labels: additive-expr, DecimalNumber, int:Signed16, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int:Signed16? a = 10;
    _ = -9223372036854775806 - a; // @panic integer overflow
}

Test-Case: output
Description: Test integer subtraction when at least one or both of the operands are positive integers or nil
             of type int:Signed32?.
Labels: additive-expr, DecimalNumber, int:Signed32, nil-literal, numeric-nil-lifting, optional-type, value:toBalString

function init() {
    int:Signed32? a1 = 0;
    int:Signed32? a2 = 253;
    int:Signed32? a3 = 2324152;
    int:Signed32? a4 = 2147483647;
    int:Signed32? a5 = ();

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output -253
    io:println(a1 - a3); // @output -2324152
    io:println(a1 - a4); // @output -2147483647
    io:println((a1 - a5).toBalString()); // @output ()

    io:println(a2 - a1); // @output 253
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output -2323899
    io:println(a2 - a4); // @output -2147483394
    io:println((a2 - a5).toBalString()); // @output ()

    io:println(a3 - a1); // @output 2324152
    io:println(a3 - a2); // @output 2323899
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output -2145159495
    io:println((a3 - a5).toBalString()); // @output ()

    io:println(a4 - a1); // @output 2147483647
    io:println(a4 - a2); // @output 2147483394
    io:println(a4 - a3); // @output 2145159495
    io:println(a4 - a4); // @output 0
    io:println((a4 - a5).toBalString()); // @output ()

    io:println((a5 - a1).toBalString()); // @output ()
    io:println((a5 - a2).toBalString()); // @output ()
    io:println((a5 - a3).toBalString()); // @output ()
    io:println((a5 - a4).toBalString()); // @output ()
    io:println((a5 - a5).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer subtraction when at least one or both of the operands are negative integers or nil
             of type int:Signed32?.
Labels: additive-expr, DecimalNumber, int:Signed32, nil-literal, numeric-nil-lifting, optional-type, unary-minus,
        value:toBalString

function init() {
    int:Signed32? a1 = -0;
    int:Signed32? a2 = -345;
    int:Signed32? a3 = -3425271;
    int:Signed32? a4 = -2147483648;
    int:Signed32? a5 = ();

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output 345
    io:println(a1 - a3); // @output 3425271
    io:println(a1 - a4); // @output 2147483648
    io:println((a1 - a5).toBalString()); // @output ()

    io:println(a2 - a1); // @output -345
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output 3424926
    io:println(a2 - a4); // @output 2147483303
    io:println((a2 - a5).toBalString()); // @output ()

    io:println(a3 - a1); // @output -3425271
    io:println(a3 - a2); // @output -3424926
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output 2144058377
    io:println((a3 - a5).toBalString()); // @output ()

    io:println(a4 - a1); // @output -2147483648
    io:println(a4 - a2); // @output -2147483303
    io:println(a4 - a3); // @output -2144058377
    io:println(a4 - a4); // @output 0
    io:println((a4 - a5).toBalString()); // @output ()

    io:println((a5 - a1).toBalString()); // @output ()
    io:println((a5 - a2).toBalString()); // @output ()
    io:println((a5 - a3).toBalString()); // @output ()
    io:println((a5 - a4).toBalString()); // @output ()
    io:println((a5 - a5).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer subtraction when one operand is a negative integer or nil and the other is a positive integer
             or nil of type Signed32?.
Labels: additive-expr, DecimalNumber, int:Signed32, nil-literal, numeric-nil-lifting, optional-type, unary-minus,
        value:toBalString

function init() {
    int:Signed32? a1 = -2147483648;
    int:Signed32? a2 = -23444;
    int:Signed32? a3 = -10;
    int:Signed32? a4 = 25;
    int:Signed32? a5 = 45363;
    int:Signed32? a6 = 2147483647;
    int:Signed32? a7 = ();

    io:println(a1 - a4); // @output -2147483673
    io:println(a1 - a5); // @output -2147529011
    io:println(a1 - a6); // @output -4294967295
    io:println((a1 - a7).toBalString()); // @output ()

    io:println(a2 - a4); // @output -23469
    io:println(a2 - a5); // @output -68807
    io:println(a2 - a6); // @output -2147507091
    io:println((a2 - a7).toBalString()); // @output ()

    io:println(a3 - a4); // @output -35
    io:println(a3 - a5); // @output -45373
    io:println(a3 - a6); // @output -2147483657
    io:println((a3 - a7).toBalString()); // @output ()

    io:println(a4 - a1); // @output 2147483673
    io:println(a4 - a2); // @output 23469
    io:println(a4 - a3); // @output 35
    io:println((a4 - a7).toBalString()); // @output ()

    io:println(a5 - a1); // @output 2147529011
    io:println(a5 - a2); // @output 68807
    io:println(a5 - a3); // @output 45373
    io:println((a5 - a7).toBalString()); // @output ()

    io:println(a6 - a1); // @output 4294967295
    io:println(a6 - a2); // @output 2147507091
    io:println(a6 - a3); // @output 2147483657
    io:println((a1 - a7).toBalString()); // @output ()
}

Test-Case: panic
Description: Test integer subtraction overflow with integer of type Signed32?.
Labels: additive-expr, DecimalNumber, int:Signed32, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int a = 9223372036854775800;
    int:Signed32? b = -4532;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with integer of type Signed32?.
Labels: additive-expr, DecimalNumber, int:Signed32, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int:Signed32? a = -234;
    _ = 9223372036854775800 - a; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with integer of type Signed32?.
Labels: additive-expr, DecimalNumber, int:Signed32, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int a = -9223372036854775806;
    int:Signed32? b = 3452;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with integer of type Signed32?.
Labels: additive-expr, DecimalNumber, int:Signed32, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int:Signed32? a = 1234;
    _ = -9223372036854775806 - a; // @panic integer overflow
}

Test-Case: output
Description: Test integer subtraction with user-defined subtype of int?.
Labels: additive-expr, DecimalNumber, module-type-defn, nil-literal, numeric-nil-lifting, optional-type, singleton-type,
        unary-minus, union-type, value:toBalString

type IntType1 -2|-1|0|1|2;

type IntType2 int:Unsigned8|int:Signed32;

function init() {
    IntType1? a1 = 1;
    IntType1? a2 = -2;
    IntType2? a3 = -324;
    IntType2? a4 = 1123;
    IntType1? a5 = ();
    IntType2? a6 = ();

    io:println(a1 - a1); // @output 0
    io:println(a1 - a2); // @output 3
    io:println(a1 - a3); // @output 325
    io:println(a1 - a4); // @output -1122
    io:println((a1 - a5).toBalString()); // @output ()
    io:println((a1 - a6).toBalString()); // @output ()

    io:println(a2 - a1); // @output -3
    io:println(a2 - a2); // @output 0
    io:println(a2 - a3); // @output 322
    io:println(a2 - a4); // @output -1125
    io:println((a2 - a5).toBalString()); // @output ()
    io:println((a2 - a6).toBalString()); // @output ()

    io:println(a3 - a1); // @output -325
    io:println(a3 - a2); // @output -322
    io:println(a3 - a3); // @output 0
    io:println(a3 - a4); // @output -1447
    io:println((a3 - a5).toBalString()); // @output ()
    io:println((a3 - a6).toBalString()); // @output ()

    io:println(a4 - a1); // @output 1122
    io:println(a4 - a2); // @output 1125
    io:println(a4 - a3); // @output 1447
    io:println(a4 - a4); // @output 0
    io:println((a4 - a5).toBalString()); // @output ()
    io:println((a4 - a6).toBalString()); // @output ()

    io:println((a5 - a1).toBalString()); // @output ()
    io:println((a5 - a2).toBalString()); // @output ()
    io:println((a5 - a3).toBalString()); // @output ()
    io:println((a5 - a4).toBalString()); // @output ()
    io:println((a5 - a5).toBalString()); // @output ()
    io:println((a5 - a6).toBalString()); // @output ()

    io:println((a6 - a1).toBalString()); // @output ()
    io:println((a6 - a2).toBalString()); // @output ()
    io:println((a6 - a3).toBalString()); // @output ()
    io:println((a6 - a4).toBalString()); // @output ()
    io:println((a6 - a5).toBalString()); // @output ()
    io:println((a6 - a6).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer subtraction with user-defined subtype of int?.
Labels: additive-expr, DecimalNumber, module-type-defn, nil-literal, numeric-nil-lifting, optional-type, singleton-type,
        unary-minus, union-type, value:toBalString

type IntType1 -2|-1|0|1|2;

type IntType2 int:Unsigned8|int:Signed32;

type IntType3 IntType1|IntType2;

function init() {
    IntType1? a1 = 1;
    IntType1? a2 = -2;
    IntType2? a3 = -324;
    IntType2? a4 = 1123;
    IntType1? a5 = ();
    IntType2? a6 = ();
    IntType3? a7 = 0;
    IntType3? a8 = -12;
    IntType3? a9 = ();

    io:println(a1 - a7); // @output 1
    io:println(a1 - a8); // @output 13
    io:println((a1 - a9).toBalString()); // @output ()

    io:println(a2 - a7); // @output -2
    io:println(a2 - a8); // @output 10
    io:println((a2 - a9).toBalString()); // @output ()

    io:println(a3 - a7); // @output -324
    io:println(a3 - a8); // @output -312
    io:println((a3 - a9).toBalString()); // @output ()

    io:println(a4 - a7); // @output 1123
    io:println(a4 - a8); // @output 1135
    io:println((a4 - a9).toBalString()); // @output ()

    io:println((a5 - a7).toBalString()); // @output ()
    io:println((a5 - a8).toBalString()); // @output ()
    io:println((a5 - a9).toBalString()); // @output ()

    io:println((a6 - a7).toBalString()); // @output ()
    io:println((a6 - a8).toBalString()); // @output ()
    io:println((a6 - a9).toBalString()); // @output ()

    io:println(a7 - a1); // @output -1
    io:println(a7 - a2); // @output 2
    io:println(a7 - a3); // @output 324
    io:println(a7 - a4); // @output -1123
    io:println((a7 - a5).toBalString()); // @output ()
    io:println((a7 - a6).toBalString()); // @output ()
    io:println(a7 - a7); // @output 0
    io:println(a7 - a8); // @output 12
    io:println((a7 - a9).toBalString()); // @output ()

    io:println(a8 - a1); // @output -13
    io:println(a8 - a2); // @output -10
    io:println(a8 - a3); // @output 312
    io:println(a8 - a4); // @output -1135
    io:println((a8 - a5).toBalString()); // @output ()
    io:println((a8 - a6).toBalString()); // @output ()
    io:println(a8 - a7); // @output -12
    io:println(a8 - a8); // @output 0
    io:println((a8 - a9).toBalString()); // @output ()

    io:println((a9 - a1).toBalString()); // @output ()
    io:println((a9 - a2).toBalString()); // @output ()
    io:println((a9 - a3).toBalString()); // @output ()
    io:println((a9 - a4).toBalString()); // @output ()
}

Test-Case: panic
Description: Test integer subtraction overflow with user-defined subtype of int?.
Labels: additive-expr, DecimalNumber, module-type-defn, numeric-nil-lifting, optional-type, singleton-type, unary-minus,
        union-type

type IntType1 -2|-1|0|1|2;

function init() {
    int a = 9223372036854775807;
    IntType1? b = -2;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with user-defined subtype of int.
Labels: additive-expr, DecimalNumber, int:Signed32, int:Unsigned8, module-type-defn, numeric-nil-lifting, optional-type,
        union-type

type IntType2 int:Unsigned8|int:Signed32;

function init() {
    int a = 9223372036854775807;
    IntType2? b = -2;
    _ = a - b; // @panic integer overflown
}

Test-Case: panic
Description: Test integer subtraction overflow with user-defined subtype of int?.
Labels: additive-expr, DecimalNumber, int:Signed32, int:Unsigned8, module-type-defn, numeric-nil-lifting, optional-type,
        singleton-type, unary-minus, union-type

type IntType1 -2|-1|0|1|2;

type IntType2 int:Unsigned8|int:Signed32;

type IntType3 IntType1|IntType2;

function init() {
    int a = 9223372036854775807;
    IntType3? b = -2;
    _ = a - b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with user-defined subtype of int.
Labels: additive-expr, DecimalNumber, module-type-defn, numeric-nil-lifting, optional-type, singleton-type, unary-minus,
        union-type

type IntType1 -2|-1|0|1|2;

function init() {
    IntType1? a = -2;
    _ = 9223372036854775807 - a; // @panic integer overflow
}

Test-Case: panic
Description: Test integer subtraction overflow with user-defined subtype of int.
Labels: additive-expr, DecimalNumber, int:Signed32, int:Unsigned8, module-type-defn, numeric-nil-lifting, optional-type,
        union-type

type IntType2 int:Unsigned8|int:Signed32;

function init() {
    IntType2? a = 2;
    _ = -9223372036854775807 - a; // @panic integer overflown
}

Test-Case: panic
Description: Test integer subtraction overflow with user-defined subtype of int?.
Labels: additive-expr, DecimalNumber, int:Signed32, int:Unsigned8, module-type-defn, numeric-nil-lifting, optional-type,
        singleton-type, unary-minus, union-type

type IntType1 -2|-1|0|1|2;

type IntType2 int:Unsigned8|int:Signed32;

type IntType3 IntType1|IntType2;

function init() {
    IntType3? a = 2;
    _ = -9223372036854775807 - a; // @panic integer overflow
}

Test-Case: output
Description: Test integer subtraction with operands of different nullable int subtypes.
Labels: additive-expr, byte, DecimalNumber, int, int:Signed16, int:Signed32, int:Signed8, int:Unsigned16,
        int:Unsigned32, int:Unsigned8, module-type-defn, optional-type, unary-minus, union-type

type IntType1 -1|1|0|2;

function init() {
    int? a1 = -1;
    byte? a2 = 2;
    int:Signed8? a3 = -3;
    int:Signed16? a4 = 4;
    int:Signed32? a5 = -5;
    int:Unsigned8? a6 = 6;
    int:Unsigned16? a7 = 7;
    int:Unsigned32? a8 = 8;
    IntType1? a9 = -1;
    int:Signed8|int:Signed32? a10 = 10;

    int? a = a1 - a2;
    io:println(a); // @output -3

    a = a1 - a2;
    io:println(a); // @output -3

    a = a1 - a3;
    io:println(a); // @output 2

    a = a1 - a4;
    io:println(a); // @output -5

    a = a1 - a5;
    io:println(a); // @output 4

    a = a1 - a6;
    io:println(a); // @output -7

    a = a1 - a7;
    io:println(a); // @output -8

    a = a1 - a8;
    io:println(a); // @output -9

    a = a1 - a9;
    io:println(a); // @output 0

    a = a1 - a10;
    io:println(a); // @output -11

    a = a2 - a3;
    io:println(a); // @output 5

    a = a2 - a4;
    io:println(a); // @output -2

    a = a2 - a5;
    io:println(a); // @output 7

    a = a2 - a6;
    io:println(a); // @output -4

    a = a2 - a7;
    io:println(a); // @output -5

    a = a2 - a8;
    io:println(a); // @output -6

    a = a2 - a9;
    io:println(a); // @output 3

    a = a2 - a10;
    io:println(a); // @output -8

    a = a3 - a4;
    io:println(a); // @output -7

    a = a3 - a5;
    io:println(a); // @output 2

    a = a3 - a6;
    io:println(a); // @output -9

    a = a3 - a7;
    io:println(a); // @output -10

    a = a3 - a8;
    io:println(a); // @output -11

    a = a3 - a9;
    io:println(a); // @output -2

    a = a3 - a10;
    io:println(a); // @output -13

    a = a4 - a5;
    io:println(a); // @output 9

    a = a4 - a6;
    io:println(a); // @output -2

    a = a4 - a7;
    io:println(a); // @output -3

    a = a4 - a8;
    io:println(a); // @output -4

    a = a4 - a9;
    io:println(a); // @output 5

    a = a4 - a10;
    io:println(a); // @output -6

    a = a5 - a6;
    io:println(a); // @output -11

    a = a5 - a7;
    io:println(a); // @output -12

    a = a5 - a8;
    io:println(a); // @output -13

    a = a5 - a9;
    io:println(a); // @output -4

    a = a5 - a10;
    io:println(a); // @output -15

    a = a6 - a7;
    io:println(a); // @output -1

    a = a6 - a8;
    io:println(a); // @output -2

    a = a6 - a9;
    io:println(a); // @output 7

    a = a6 - a10;
    io:println(a); // @output -4

    a = a7 - a8;
    io:println(a); // @output -1

    a = a7 - a9;
    io:println(a); // @output 8

    a = a7 - a10;
    io:println(a); // @output -3

    a = a8 - a9;
    io:println(a); // @output 9

    a = a8 - a10;
    io:println(a); // @output -2

    a = a9 - a10;
    io:println(a); // @output -11
}

Test-Case: output
Description: Test integer subtraction with operands of different nullable int subtypes.
Labels: additive-expr, byte, DecimalNumber, int, int:Signed16, int:Signed32, int:Signed8, int:Unsigned16,
        int:Unsigned32, int:Unsigned8, module-type-defn, optional-type, unary-minus, union-type

type IntType1 -1|1|0|2;

function init() {
    int? a1 = -1;
    byte? a2 = 2;
    int:Signed8? a3 = -3;
    int:Signed16? a4 = 4;
    int:Signed32? a5 = -5;
    int:Unsigned8? a6 = 6;
    int:Unsigned16? a7 = 7;
    int:Unsigned32? a8 = 8;
    IntType1? a9 = -1;
    int:Signed8|int:Signed32? a10 = 10;

    int? a = a1 - a2 - a3 - a4 - a9;
    io:println(a); // @output -3

    a = a - a5 - a6 - a7 - a8 - a10;
    io:println(a); // @output -29
}

Test-Case: output
Description: Test integer subtraction with operands of different nullable and non-nullable int subtypes.
Labels: additive-expr, byte, DecimalNumber, int, int:Signed16, int:Signed32, int:Signed8, int:Unsigned16,
        int:Unsigned32, int:Unsigned8, module-type-defn, unary-minus, union-type

type IntType1 -1|1|0|2;

function init() {
    int a1 = -1;
    byte? a2 = 2;
    int:Signed8 a3 = -3;
    int:Signed16 a4 = 4;
    int:Signed32? a5 = -5;
    int:Unsigned8 a6 = 6;
    int:Unsigned16? a7 = 7;
    int:Unsigned32 a8 = 8;
    IntType1 a9 = -1;
    int:Signed8|int:Signed32? a10 = 10;

    int? a = a1 - a2 - a3 - a4 - a9;
    io:println(a); // @output -3

    a = a - a5 - a6 - a7 - a8 - a10;
    io:println(a); // @output -29
}

Test-Case: output
Description: Test integer subtraction with operands of different nullable and non-nullable int subtypes.
Labels: additive-expr, byte, DecimalNumber, HexIntLiteral, int, int:Signed16, int:Signed32, int:Signed8, int:Unsigned16,
        int:Unsigned32, int:Unsigned8, module-type-defn, unary-minus, union-type

type IntType1 -1|1|0|2;

function init() {
    int? a1 = 0xfd;
    byte a2 = 0x12;
    int:Signed8 a3 = 23;
    int:Signed16? a4 = 0x453f;
    int:Signed32 a5 = 0x104AF;
    int:Unsigned8 a6 = 10;
    int:Unsigned16? a7 = 0xff;
    int:Unsigned32 a8 = 0x56;
    IntType1? a9 = -1;
    int:Signed8|int:Signed32 a10 = 0xceff;

    int? a = a1 - a2 - a3 - a4 - a9;
    io:println(a); // @output -17514

    a = a - a5 - a6 - a7 - a8 - a10;
    io:println(a); // @output -137591
}

Test-Case: output
Description: Test assigning the result of an additive expression to a compatible type.
Labels: additive-expr, any, DecimalNumber, int, string, union-type

function init() {
    int? x = 50;
    int|string|() a = x - 20;
    io:println(a); // @output 30

    any b = x - 20;
    io:println(b); // @output 30
}

Test-Case: output
Description: Test assigning the result of an additive expression to var.
Labels: additive-expr, DecimalNumber, is-expr, nil-literal, optional-type, value:toBalString, var

function init() {
    int? x = ();
    int? y = 50;

    var a = x - 20;
    io:println(a.toBalString()); // @output ()
    io:println(a is ()); // @output true

    var b = y - 20;
    io:println(b); // @output 30
    io:println(b is int); // @output true
}

Test-Case: output
Description: Test using additive expression at module level.
Labels: additive-expr, DecimalNumber, int, is-expr, module-const-decl, module-init-var-decl, optional-type,
        value:toBalString, var

int? x = 50;
int? y = ();

var a = x - 20;

int? b = y - 20;

function init() {
    io:println(a); // @output 30
    io:println(a is int); // @output true

    io:println(b.toBalString()); // @output ()
}

Test-Case: output
Description: Test variable reference as integer subtraction operands.
Labels: additive-expr, DecimalNumber, int, numeric-nil-lifting, variable-reference-expr

function init() {
    int a = 2;
    int b = a - a;
    io:println(b); // @output 0
}

Test-Case: output
Description: Test field and member access as integer subtraction operands.
Labels: additive-expr, array-type, DecimalNumber, int, list-constructor-expr, mapping-constructor-expr,
        module-type-defn, record-type

function init() {
    Record c = {x: 10};
    int[] d = [30, 40];
    int e = c.x - d[0];
    io:println(e); // @output -20
}

type Record record {
    int x;
};

Test-Case: output
Description: Test function and method call as integer subtraction operands.
Labels: additive-expr, DecimalNumber, function-call-expr, int, method-call-expr, module-class-defn

function init() {
    Class f = new;
    int g = f.getInt(12 - 20) - getInt();
    io:println(g); // @output 69
}

function getInt() returns int {
    return 2 - 3;
}

class Class {
    function getInt(int a) returns int {
        return 60 - a;
    }
}

Test-Case: output
Description: Test type cast expression in integer subtraction operands.
Labels: additive-expr, DecimalNumber, int, type-cast-expr

function init() {
    int i = <int> 8 - 4;
    io:println(i); // @output 4
}

Test-Case: output
Description: Test unary expressions in integer subtraction operands.
Labels: additive-expr, DecimalNumber, int, unary-complement, unary-minus, unary-plus

function init() {
    int a1 = -4 - -3;
    io:println(a1); // @output -1

    int a2 = -(-2 - 5);
    io:println(a2); // @output 7

    int a3 = ~(2 - 5);
    io:println(a3); // @output 2

    int a4 = ~2 - 5;
    io:println(a4); // @output -8
}

Test-Case: output
Description: Test additive expression in integer subtraction operands.
Labels: additive-expr, DecimalNumber, int

function init() {
    int a = 404 + 12 - 6 + 1;
    io:println(a); // @output 411
}

Test-Case: output
Description: Test additive expression in integer subtraction operands.
Labels: additive-expr, DecimalNumber, int

function init() {
    int a = 404 - (12 - 6 + 1);
    io:println(a); // @output 397
}

Test-Case: output
Description: Test precedence and associativity with additive expression.
Labels: additive-expr, binary-bitwise-expr, DecimalNumber, int, multiplicative-expr

function init() {
    int a = 2 + 3 * 5 / 12 & 1 - 2 % 3 | 2 + 12;
    io:println(a); // @output 15
}

Test-Case: output
Description: Test multiplicative expressions as integer subtraction operands.
Labels: additive-expr, DecimalNumber, int, multiplicative-expr

function init() {
    int a = (32 / 4) - (1 * 2);
    io:println(a); // @output 6
}

Test-Case: output
Description: Test binary bitwise expressions as integer subtraction operands.
Labels: additive-expr, binary-bitwise-expr, DecimalNumber, int

function init() {
    int a = (2 & 6) - (2 ^ 6);
    io:println(a); // @output -2
}

Test-Case: output
Description: Test checking expressions as integer subtraction operands.
Labels: additive-expr, check, checkpanic, DecimalNumber, error, int, optional-type, union-type

function init() returns error? {
    int|error a = 12;
    int c = check a - checkpanic a;
    io:println(c); // @output 0
}

Test-Case: output
Description: Test let expression in integer subtraction operands.
Labels: additive-expr, DecimalNumber, int, let-expr

function init() {
    int h = (let int h1 = 50 - 15 in h1) - 25;
    io:println(h); // @output 10
}

Test-Case: output
Description: Test shift expressions as integer subtraction operands.
Labels: additive-expr, DecimalNumber, int, shift-expr

function init() {
    int p = (100 >> 4) - (1 << 2);
    io:println(p); // @output 2
}

Test-Case: output
Description: Test conditional expressions as integer subtraction operands.
Labels: additive-expr, conditional-expr, DecimalNumber, error, int, nil-literal, optional-type, union-type

function init() {
    int|error a = 25;
    int? b = ();
    int c = (a is error ? 5 : a) - (b ?: 10);
    io:println(c); // @output 15
}

Test-Case: output
Description: Test lang.int constants as integer subtraction operands.
Labels: additive-expr, int, int:MAX_VALUE, int:UNSIGNED8_MAX_VALUE

function init() {
    int a = int:UNSIGNED8_MAX_VALUE - int:MAX_VALUE;
    io:println(a); // @output -9223372036854775552
}

Test-Case: error
Description: Test assigning the result of integer addition to an incompatible type.
Labels: additive-expr, decimal, DecimalNumber, float, function-call-expr, int, var

function errorFunction(int a, int b) {
    float _ = a - b; // @error static type of additive-expr with int operands is int

    var a1 = 1 - a;
    decimal _ = a1; // @error static type of additive-expr with int operands is int

    var a2 = getInt(12 - 2) - b;
    float _ = a2; // @error static type of additive-expr with int operands is int
}

function getInt(int i) returns int {
    return i - 1;
}

Test-Case: error
Description: Test assigning the result of integer addition with int? to an incompatible type.
Labels: additive-expr, DecimalNumber, function-call-expr, int, numeric-nil-lifting, optional-type

function errorFunction(int a, int? b) {
    int _ = a - b; // @error static type of additive-expr with at least one int? operand is int?
    int _ = getOptionalInt(1 - 2) - b; // @error static type of additive-expr with at least one int? operand is int?
    int _ = b - getOptionalInt(1 - 2); // @error static type of additive-expr with at least one int? operand is int?
    int _ = b - getInt(1); // @error static type of additive-expr with at least one int? operand is int?
}

function getInt(int i) returns int {
    return i - 1;
}

function getOptionalInt(int? i) returns int? {
    return i - 1;
}

Test-Case: error
Description: Test assigning the result of integer addition to a subtype of int.
Labels: additive-expr, byte, int:Signed16, int:Signed32, int:Signed8, int:Unsigned16, int:Unsigned32, int:Unsigned8,
        module-type-defn

type Ints 1|2;

function errorFunction(int:Signed8 a, int:Signed16 b, int:Signed32 c, int:Unsigned8 d, int:Unsigned16 e,
                     int:Unsigned32 f, byte g, Ints h) {
    int:Signed8 _ = a - a; // @error static type of additive-expr with operands of int subtypes is int
    int:Signed16 _ = b - b; // @error static type of additive-expr with operands of int subtypes is int
    int:Signed32 _ = c - c; // @error static type of additive-expr with operands of int subtypes is int
    int:Unsigned8 _ = d - d; // @error static type of additive-expr with operands of int subtypes is int
    byte _ = b - g; // @error static type of additive-expr with operands of int subtypes is int
    int:Unsigned16 _ = e - e; // @error static type of additive-expr with operands of int subtypes is int
    int:Unsigned32 _ = f - f; // @error static type of additive-expr with operands of int subtypes is int
    Ints _ = d - h; // @error static type of additive-expr with operands of int subtypes is int
}

Test-Case: error
Description: Test assigning the result of addition of optional integers to a subtype of int?.
Labels: additive-expr, byte, int:Signed16, int:Signed32, int:Signed8, int:Unsigned16, int:Unsigned32, int:Unsigned8,
        module-type-defn, optional-type

type Ints 1|2;

function errorFunction(int:Signed8? a, int:Signed16? b, int:Signed32? c, int:Unsigned8? d, int:Unsigned16? e,
                     int:Unsigned32? f, byte? g, Ints? h) {
    int:Signed8? _ = a - a; // @error static type of additive-expr with at least one operand of subtype of int? is int?
    int:Signed16? _ = b - b; // @error static type of additive-expr with at least one operand of subtype of int? is int?
    int:Signed32? _ = c - c; // @error static type of additive-expr with at least one operand of subtype of int? is int?
    int:Unsigned8? _ = d - d; // @error static type of additive-expr with at least one operand of subtype of int? is int?
    byte? _ = b - g; // @error static type of additive-expr with at least one operand of subtype of int? is int?
    int:Unsigned16? _ = e - e; // @error static type of additive-expr with at least one operand of subtype of int? is int?
    int:Unsigned32? _ = f - f; // @error static type of additive-expr with at least one operand of subtype of int? is int?
    Ints? _ = d - h; // @error static type of additive-expr with at least one operand of subtype of int? is int?
}
