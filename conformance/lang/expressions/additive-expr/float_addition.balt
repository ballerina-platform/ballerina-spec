Test-Case: output
Description: Test float addition with positive floats.
Labels: additive-expr, DecimalFloatingPointNumber, float, FloatingPointTypeSuffix, infinity, unary-plus

function init() {
    float a1 = +0.0f;
    float a2 = 4.9E-324;
    float a3 = 124;
    float a4 = 75647.096547382f;
    float a5 = +4657382.1234;
    float a6 = 1.7976931348623157E308;
    float a7 = float:Infinity;

    io:println(a1 + a1); // @output 0.0
    io:println(a1 + a2); // @output 4.9E-324
    io:println(a1 + a3); // @output 124.0
    io:println(a1 + a4); // @output 75647.096547382
    io:println(a1 + a5); // @output 4657382.1234
    io:println(a1 + a6); // @output 1.7976931348623157E308
    io:println(a1 + a7); // @output Infinity

    io:println(a2 + a1); // @output 4.9E-324
    io:println(a2 + a2); // @output 1.0E-323
    io:println(a2 + a3); // @output 124.0
    io:println(a2 + a4); // @output 75647.096547382
    io:println(a2 + a5); // @output 4657382.1234
    io:println(a2 + a6); // @output 1.7976931348623157E308
    io:println(a2 + a7); // @output Infinity

    io:println(a3 + a1); // @output 124.0
    io:println(a3 + a2); // @output 124.0
    io:println(a3 + a3); // @output 248.0
    io:println(a3 + a4); // @output 75771.096547382
    io:println(a3 + a5); // @output 4657506.1234
    io:println(a3 + a6); // @output 1.7976931348623157E308
    io:println(a3 + a7); // @output Infinity

    io:println(a4 + a1); // @output 75647.096547382
    io:println(a4 + a2); // @output 75647.096547382
    io:println(a4 + a3); // @output 75771.096547382
    io:println(a4 + a4); // @output 151294.193094764
    io:println(a4 + a5); // @output 4733029.219947382
    io:println(a4 + a6); // @output 1.7976931348623157E308
    io:println(a4 + a7); // @output Infinity

    io:println(a5 + a1); // @output 4657382.1234
    io:println(a5 + a2); // @output 4657382.1234
    io:println(a5 + a3); // @output 4657506.1234
    io:println(a5 + a4); // @output 4733029.219947382
    io:println(a5 + a5); // @output 9314764.2468
    io:println(a5 + a6); // @output 1.7976931348623157E308
    io:println(a5 + a7); // @output Infinity

    io:println(a6 + a1); // @output 1.7976931348623157E308
    io:println(a6 + a2); // @output 1.7976931348623157E308
    io:println(a6 + a3); // @output 1.7976931348623157E308
    io:println(a6 + a4); // @output 1.7976931348623157E308
    io:println(a6 + a5); // @output 1.7976931348623157E308
    io:println(a6 + a6); // @output Infinity
    io:println(a6 + a7); // @output Infinity

    io:println(a7 + a1); // @output Infinity
    io:println(a7 + a2); // @output Infinity
    io:println(a7 + a3); // @output Infinity
    io:println(a7 + a4); // @output Infinity
    io:println(a7 + a5); // @output Infinity
    io:println(a7 + a6); // @output Infinity
    io:println(a7 + a7); // @output Infinity
}

Test-Case: output
Description: Test float addition with negative floats.
Labels: additive-expr, DecimalFloatingPointNumber, float, FloatingPointTypeSuffix, infinity, unary-minus

function init() {
    float a1 = -0.0f;
    float a2 = -4.9E-324;
    float a3 = -124;
    float a4 = -75647.096547382f;
    float a5 = -4657382.1234;
    float a6 = -1.7976931348623157E308;
    float a7 = -float:Infinity;

    io:println(a1 + a1); // @output -0.0
    io:println(a1 + a2); // @output -4.9E-324
    io:println(a1 + a3); // @output -124.0
    io:println(a1 + a4); // @output -75647.096547382
    io:println(a1 + a5); // @output -4657382.1234
    io:println(a1 + a6); // @output -1.7976931348623157E308
    io:println(a1 + a7); // @output -Infinity

    io:println(a2 + a1); // @output -4.9E-324
    io:println(a2 + a2); // @output -1.0E-323
    io:println(a2 + a3); // @output -124.0
    io:println(a2 + a4); // @output -75647.096547382
    io:println(a2 + a5); // @output -4657382.1234
    io:println(a2 + a6); // @output -1.7976931348623157E308
    io:println(a2 + a7); // @output -Infinity

    io:println(a3 + a1); // @output -124.0
    io:println(a3 + a2); // @output -124.0
    io:println(a3 + a3); // @output -248.0
    io:println(a3 + a4); // @output -75771.096547382
    io:println(a3 + a5); // @output -4657506.1234
    io:println(a3 + a6); // @output -1.7976931348623157E308
    io:println(a3 + a7); // @output -Infinity

    io:println(a4 + a1); // @output -75647.096547382
    io:println(a4 + a2); // @output -75647.096547382
    io:println(a4 + a3); // @output -75771.096547382
    io:println(a4 + a4); // @output -151294.193094764
    io:println(a4 + a5); // @output -4733029.219947382
    io:println(a4 + a6); // @output -1.7976931348623157E308
    io:println(a4 + a7); // @output -Infinity

    io:println(a5 + a1); // @output -4657382.1234
    io:println(a5 + a2); // @output -4657382.1234
    io:println(a5 + a3); // @output -4657506.1234
    io:println(a5 + a4); // @output -4733029.219947382
    io:println(a5 + a5); // @output -9314764.2468
    io:println(a5 + a6); // @output -1.7976931348623157E308
    io:println(a5 + a7); // @output -Infinity

    io:println(a6 + a1); // @output -1.7976931348623157E308
    io:println(a6 + a2); // @output -1.7976931348623157E308
    io:println(a6 + a3); // @output -1.7976931348623157E308
    io:println(a6 + a4); // @output -1.7976931348623157E308
    io:println(a6 + a5); // @output -1.7976931348623157E308
    io:println(a6 + a6); // @output -Infinity
    io:println(a6 + a7); // @output -Infinity

    io:println(a7 + a1); // @output -Infinity
    io:println(a7 + a2); // @output -Infinity
    io:println(a7 + a3); // @output -Infinity
    io:println(a7 + a4); // @output -Infinity
    io:println(a7 + a5); // @output -Infinity
    io:println(a7 + a6); // @output -Infinity
    io:println(a7 + a7); // @output -Infinity
}

Test-Case: output
Description: Test float addition when one operand is negative and the other is positive float.
Labels: additive-expr, DecimalFloatingPointNumber, float, FloatingPointTypeSuffix, infinity, unary-minus, unary-plus

function init() {
    float a1 = -float:Infinity;
    float a2 = -2.345e02;
    float a3 = -12423.23;
    float a4 = -10.746;
    float a5 = 30.25453213;
    float a6 = +235462;
    float a7 = 2.345e02;
    float a8 = float:Infinity;

    io:println(a1 + a5); // @output -Infinity
    io:println(a1 + a6); // @output -Infinity
    io:println(a1 + a7); // @output -Infinity
    io:println(a1 + a8); // @output NaN

    io:println(a2 + a5); // @output -204.24546787
    io:println(a2 + a6); // @output 235227.5
    io:println(a2 + a7); // @output 0.0
    io:println(a2 + a8); // @output Infinity

    io:println(a3 + a5); // @output -12392.97546787
    io:println(a3 + a6); // @output 223038.77
    io:println(a3 + a7); // @output -12188.73
    io:println(a3 + a8); // @output Infinity

    io:println(a4 + a5); // @output 19.50853213
    io:println(a4 + a6); // @output 235451.254
    io:println(a4 + a7); // @output 223.754
    io:println(a4 + a8); // @output Infinity

    io:println(a5 + a1); // @output -Infinity
    io:println(a5 + a2); // @output -204.24546787
    io:println(a5 + a3); // @output -12392.97546787
    io:println(a5 + a4); // @output 19.50853213

    io:println(a6 + a1); // @output -Infinity
    io:println(a6 + a2); // @output 235227.5
    io:println(a6 + a3); // @output 223038.77
    io:println(a6 + a4); // @output 235451.254

    io:println(a7 + a1); // @output -Infinity
    io:println(a7 + a2); // @output 0.0
    io:println(a7 + a3); // @output -12188.73
    io:println(a7 + a4); // @output 223.754

    io:println(a8 + a1); // @output NaN
    io:println(a8 + a2); // @output Infinity
    io:println(a8 + a3); // @output Infinity
    io:println(a8 + a4); // @output Infinity
}

Test-Case: output
Description: Test float addition with hex floating point literals.
Labels: additive-expr, float, HexFloatingPointLiteral, unary-minus

function init() {
    float a1 = -0x1.d5p7;
    float a2 = -0x1.8439d70a2d70ap13;
    float a3 = -0x1.57df3b645a1cbp3;
    float a4 = 0x1.e412904862198p4;
    float a5 = 0x1.cbe3p17;
    float a6 = 0x1.d5p7;

    io:println(a1 + a1); // @output -469.0
    io:println(a1 + a2); // @output -12657.72999988079
    io:println(a1 + a3); // @output -245.246
    io:println(a1 + a4); // @output -204.24546787
    io:println(a1 + a5); // @output 235227.5
    io:println(a1 + a6); // @output 0.0

    io:println(a2 + a1); // @output -12657.72999988079
    io:println(a2 + a2); // @output -24846.45999976158
    io:println(a2 + a3); // @output -12433.97599988079
    io:println(a2 + a4); // @output -12392.97546775079
    io:println(a2 + a5); // @output 223038.7700001192
    io:println(a2 + a6); // @output -12188.72999988079

    io:println(a3 + a1); // @output -245.246
    io:println(a3 + a2); // @output -12433.97599988079
    io:println(a3 + a3); // @output -21.492
    io:println(a3 + a4); // @output 19.50853213
    io:println(a3 + a5); // @output 235451.254
    io:println(a3 + a6); // @output 223.754

    io:println(a4 + a1); // @output -204.24546787
    io:println(a4 + a2); // @output -12392.97546775079
    io:println(a4 + a3); // @output 19.50853213
    io:println(a4 + a4); // @output 60.50906426
    io:println(a4 + a5); // @output 235492.25453213
    io:println(a4 + a6); // @output 264.75453213000003

    io:println(a5 + a1); // @output 235227.5
    io:println(a5 + a2); // @output 223038.7700001192
    io:println(a5 + a3); // @output 235451.254
    io:println(a5 + a4); // @output 235492.25453213
    io:println(a5 + a5); // @output 470924.0
    io:println(a5 + a6); // @output 235696.5

    io:println(a6 + a1); // @output 0.0
    io:println(a6 + a2); // @output -12188.72999988079
    io:println(a6 + a3); // @output 223.754
    io:println(a6 + a4); // @output 264.75453213000003
    io:println(a6 + a5); // @output 235696.5
    io:println(a6 + a6); // @output 469.0
}

Test-Case: output
Description: Test float addition with floating point literals as operands.
Labels: additive-expr, DecimalFloatingPointNumber, FloatingPointTypeSuffix, infinity, unary-minus, unary-plus

function init() {
    io:println(-float:Infinity + -float:Infinity); // @output -Infinity
    io:println(-float:Infinity + -2.345e02); // @output -Infinity
    io:println(-float:Infinity + -12423.23); // @output -Infinity
    io:println(-float:Infinity + -10.746); // @output -Infinity
    io:println(-float:Infinity + 30.25453213); // @output -Infinity
    io:println(-float:Infinity + +235462f); // @output -Infinity
    io:println(-float:Infinity + 2.345e02); // @output -Infinity
    io:println(-float:Infinity + float:Infinity); // @output NaN

    io:println(-2.345e02 + -2.345e02); // @output -469.0
    io:println(-2.345e02 + -12423.23); // @output -12657.73
    io:println(-2.345e02 + -10.746); // @output -245.246
    io:println(-2.345e02 + 30.25453213); // @output -204.24546787
    io:println(-2.345e02 + +235462f); // @output 235227.5
    io:println(-2.345e02 + 2.345e02); // @output 0.0
    io:println(-2.345e02 + float:Infinity); // @output Infinity

    io:println(-12423.23 + -12423.23); // @output -24846.46
    io:println(-12423.23 + -10.746); // @output -12433.975999999999
    io:println(-12423.23 + 30.25453213); // @output -12392.97546787
    io:println(-12423.23 + +235462f); // @output 223038.77
    io:println(-12423.23 + 2.345e02); // @output -12188.73
    io:println(-12423.23 + float:Infinity); // @output Infinity

    io:println(-10.746 + -10.746); // @output -21.492
    io:println(-10.746 + 30.25453213); // @output 19.50853213
    io:println(-10.746 + +235462f); // @output 235451.254
    io:println(-10.746 + 2.345e02); // @output 223.754
    io:println(-10.746 + float:Infinity); // @output Infinity

    io:println(30.25453213 + 30.25453213); // @output 60.50906426
    io:println(30.25453213 + +235462f); // @output 235492.25453213
    io:println(30.25453213 + 2.345e02); // @output 264.75453213000003
    io:println(30.25453213 + float:Infinity); // @output Infinity

    io:println(+235462f + +235462f); // @output 470924.0
    io:println(+235462f + 2.345e02); // @output 235696.5
    io:println(+235462f + float:Infinity); // @output Infinity

    io:println(2.345e02 + 2.345e02); // @output 469.0
    io:println(2.345e02 + float:Infinity); // @output Infinity

    io:println(float:Infinity + float:Infinity); // @output Infinity
}

Test-Case: output
Description: Test float addition with hex floating point literals as operands.
Labels: additive-expr, HexFloatingPointLiteral, unary-minus

function init() {
    io:println(-0x1.d5p7 + -0x1.d5p7); // @output -469.0
    io:println(-0x1.d5p7 + -0x1.8439d70a2d70ap13); // @output -12657.72999988079
    io:println(-0x1.d5p7 + -0x1.57df3b645a1cbp3); // @output -245.246
    io:println(-0x1.d5p7 + 0x1.e412904862198p4); // @output -204.24546787
    io:println(-0x1.d5p7 + 0x1.cbe3p17); // @output 235227.5
    io:println(-0x1.d5p7 + 0x1.d5p7); // @output 0.0

    io:println(-0x1.8439d70a2d70ap13 + -0x1.d5p7); // @output -12657.72999988079
    io:println(-0x1.8439d70a2d70ap13 + -0x1.8439d70a2d70ap13); // @output -24846.45999976158
    io:println(-0x1.8439d70a2d70ap13 + -0x1.57df3b645a1cbp3); // @output -12433.97599988079
    io:println(-0x1.8439d70a2d70ap13 + 0x1.e412904862198p4); // @output -12392.97546775079
    io:println(-0x1.8439d70a2d70ap13 + 0x1.cbe3p17); // @output 223038.7700001192
    io:println(-0x1.8439d70a2d70ap13 + 0x1.d5p7); // @output -12188.72999988079

    io:println(-0x1.57df3b645a1cbp3 + -0x1.d5p7); // @output -245.246
    io:println(-0x1.57df3b645a1cbp3 + -0x1.8439d70a2d70ap13); // @output -12433.97599988079
    io:println(-0x1.57df3b645a1cbp3 + -0x1.57df3b645a1cbp3); // @output -21.492
    io:println(-0x1.57df3b645a1cbp3 + 0x1.e412904862198p4); // @output 19.50853213
    io:println(-0x1.57df3b645a1cbp3 + 0x1.cbe3p17); // @output 235451.254
    io:println(-0x1.57df3b645a1cbp3 + 0x1.d5p7); // @output 223.754

    io:println(0x1.e412904862198p4 + -0x1.d5p7); // @output -204.24546787
    io:println(0x1.e412904862198p4 + -0x1.8439d70a2d70ap13); // @output -12392.97546775079
    io:println(0x1.e412904862198p4 + -0x1.57df3b645a1cbp3); // @output 19.50853213
    io:println(0x1.e412904862198p4 + 0x1.e412904862198p4); // @output 60.50906426
    io:println(0x1.e412904862198p4 + 0x1.cbe3p17); // @output 235492.25453213
    io:println(0x1.e412904862198p4 + 0x1.d5p7); // @output 264.75453213000003

    io:println(0x1.cbe3p17 + -0x1.d5p7); // @output 235227.5
    io:println(0x1.cbe3p17 + -0x1.8439d70a2d70ap13); // @output 223038.7700001192
    io:println(0x1.cbe3p17 + -0x1.57df3b645a1cbp3); // @output 235451.254
    io:println(0x1.cbe3p17 + 0x1.e412904862198p4); // @output 235492.25453213
    io:println(0x1.cbe3p17 + 0x1.cbe3p17); // @output 470924.0
    io:println(0x1.cbe3p17 + 0x1.d5p7); // @output 235696.5

    io:println(0x1.d5p7 + -0x1.d5p7); // @output 0.0
    io:println(0x1.d5p7 + -0x1.8439d70a2d70ap13); // @output -12188.72999988079
    io:println(0x1.d5p7 + -0x1.57df3b645a1cbp3); // @output 223.754
    io:println(0x1.d5p7 + 0x1.e412904862198p4); // @output 264.75453213000003
    io:println(0x1.d5p7 + 0x1.cbe3p17); // @output 235696.5
    io:println(0x1.d5p7 + 0x1.d5p7); // @output 469.0
}

Test-Case: output
Description: Test float addition with user-defined subtypes of float.
Labels: additive-expr, DecimalFloatingPointNumber, DecimalNumber, float, FloatingPointTypeSuffix, infinity,
        module-const-decl, module-type-defn, singleton-type, unary-minus, union-type

const float A = 1.25;
const float B = 2.0;

type FloatType1 -2f|-1f|0f|1f|2f;

type FloatType2 A|B;

type FloatType3 FloatType1|FloatType2;

function init() {
    A a1 = 1.25;
    FloatType1 a2 = -1.0;
    FloatType2 a3 = 2;
    FloatType3 a4 = -0x2;
    float a5 = float:Infinity;
    float a6 = -float:Infinity;

    float a = a1 + a2;
    io:println(a); // @output 0.25

    a = a1 + a3;
    io:println(a); // @output 3.25

    a = a1 + a4;
    io:println(a); // @output -0.75

    a = a1 + a5;
    io:println(a); // @output Infinity

    a = a1 + a6;
    io:println(a); // @output -Infinity

    a = a1 + 10;
    io:println(a); // @output 11.25

    a = a2 + a3;
    io:println(a); // @output 1.0

    a = a2 + a4;
    io:println(a); // @output -3.0

    a = a2 + a5;
    io:println(a); // @output Infinity

    a = a2 + a6;
    io:println(a); // @output -Infinity

    a = a3 + a4;
    io:println(a); // @output 0.0

    a = a3 + a5;
    io:println(a); // @output Infinity

    a = a3 + a6;
    io:println(a); // @output -Infinity
}

Test-Case: output
Description: Test float addition with user-defined subtypes of float.
Labels: additive-expr, DecimalFloatingPointNumber, float, FloatingPointTypeSuffix, module-const-decl, module-type-defn,
        singleton-type, union-type

const float A = 1.25;
const float B = 2.0;

type FloatType1 A|B;

function init() {
    A a = 1.25;
    float|FloatType1 b = 25346.45f;

    float x = a + b;
    io:println(x); // @output 25347.7
}

Test-Case: output
Description: Test whether contextually expected type of operands is float when the contextually expected
             type of the additive-expr is float.
Labels: additive-expr, DecimalNumber, float

function init() {
    float a = 10 + 20;
    io:println(a); // @output 30.0
}

Test-Case: output
Description: Test assigning the result of an additive expression to a compatible type.
Labels: additive-expr, any, DecimalFloatingPointNumber, float, FloatingPointTypeSuffix, is-expr, string, union-type

function init() {
    float|string a = 10f + 20f;
    io:println(a); // @output 30.0
    io:println(a is float); // @output true

    any b = 10f + 20f;
    io:println(b); // @output 30.0
    io:println(a is float); // @output true
}

Test-Case: output
Description: Test assigning the result of an additive expression to var.
Labels: additive-expr, DecimalFloatingPointNumber, float, is-expr, var

function init() {
    var a = 10f + 20f;
    io:println(a); // @output 30.0
    io:println(a is float); // @output true
}

Test-Case: output
Description: Test using additive expression at module level.
Labels: additive-expr, DecimalFloatingPointNumber, float, FloatingPointTypeSuffix, is-expr, module-const-decl,
        module-init-var-decl, var

var a = 10f + 20f;

float b = 10f + 20f;

const float c = 10f + 20f;

function init() {
    io:println(a); // @output 30.0
    io:println(a is float); // @output true

    io:println(b); // @output 30.0

    io:println(c); // @output 30.0
}

Test-Case: output
Description: Test float addition when at least one or both of the operands are positive floats or nil
             of type float?.
Labels: additive-expr, DecimalFloatingPointNumber, DecimalNumber, float, FloatingPointTypeSuffix, infinity, nil-literal,
        numeric-nil-lifting, optional-type, value:toBalString

function init() {
    float? a1 = +0.0f;
    float? a2 = 4.9E-324;
    float? a3 = 124;
    float? a4 = 75647.096547382f;
    float? a5 = +4657382.1234;
    float? a6 = 1.7976931348623157E308;
    float? a7 = float:Infinity;
    float? a8 = ();

    io:println(a1 + a1); // @output 0.0
    io:println(a1 + a2); // @output 4.9E-324
    io:println(a1 + a3); // @output 124.0
    io:println(a1 + a4); // @output 75647.096547382
    io:println(a1 + a5); // @output 4657382.1234
    io:println(a1 + a6); // @output 1.7976931348623157E308
    io:println(a1 + a7); // @output Infinity
    io:println((a1 + a8).toBalString()); // @output ()

    io:println(a2 + a1); // @output 4.9E-324
    io:println(a2 + a2); // @output 1.0E-323
    io:println(a2 + a3); // @output 124.0
    io:println(a2 + a4); // @output 75647.096547382
    io:println(a2 + a5); // @output 4657382.1234
    io:println(a2 + a6); // @output 1.7976931348623157E308
    io:println(a2 + a7); // @output Infinity
    io:println((a2 + a8).toBalString()); // @output ()

    io:println(a3 + a1); // @output 124.0
    io:println(a3 + a2); // @output 124.0
    io:println(a3 + a3); // @output 248.0
    io:println(a3 + a4); // @output 75771.096547382
    io:println(a3 + a5); // @output 4657506.1234
    io:println(a3 + a6); // @output 1.7976931348623157E308
    io:println(a3 + a7); // @output Infinity
    io:println((a3 + a8).toBalString()); // @output ()

    io:println(a4 + a1); // @output 75647.096547382
    io:println(a4 + a2); // @output 75647.096547382
    io:println(a4 + a3); // @output 75771.096547382
    io:println(a4 + a4); // @output 151294.193094764
    io:println(a4 + a5); // @output 4733029.219947382
    io:println(a4 + a6); // @output 1.7976931348623157E308
    io:println(a4 + a7); // @output Infinity
    io:println((a4 + a8).toBalString()); // @output ()

    io:println(a5 + a1); // @output 4657382.1234
    io:println(a5 + a2); // @output 4657382.1234
    io:println(a5 + a3); // @output 4657506.1234
    io:println(a5 + a4); // @output 4733029.219947382
    io:println(a5 + a5); // @output 9314764.2468
    io:println(a5 + a6); // @output 1.7976931348623157E308
    io:println(a5 + a7); // @output Infinity
    io:println((a5 + a8).toBalString()); // @output ()

    io:println(a6 + a1); // @output 1.7976931348623157E308
    io:println(a6 + a2); // @output 1.7976931348623157E308
    io:println(a6 + a3); // @output 1.7976931348623157E308
    io:println(a6 + a4); // @output 1.7976931348623157E308
    io:println(a6 + a5); // @output 1.7976931348623157E308
    io:println(a6 + a6); // @output Infinity
    io:println(a6 + a7); // @output Infinity
    io:println((a6 + a8).toBalString()); // @output ()

    io:println(a7 + a1); // @output Infinity
    io:println(a7 + a2); // @output Infinity
    io:println(a7 + a3); // @output Infinity
    io:println(a7 + a4); // @output Infinity
    io:println(a7 + a5); // @output Infinity
    io:println(a7 + a6); // @output Infinity
    io:println(a7 + a7); // @output Infinity
    io:println((a7 + a8).toBalString()); // @output ()

    io:println((a8 + a8).toBalString()); // @output ()
}

Test-Case: output
Description: Test float addition when at least one or both of the operands are negative floats or nil
             of type float?.
Labels: additive-expr, DecimalFloatingPointNumber, DecimalNumber, float, FloatingPointTypeSuffix, infinity, nil-literal,
        numeric-nil-lifting, optional-type, unary-minus, value:toBalString

function init() {
    float? a1 = -0.0f;
    float? a2 = -4.9E-324;
    float? a3 = -124;
    float? a4 = -75647.096547382f;
    float? a5 = -4657382.1234;
    float? a6 = -1.7976931348623157E308;
    float? a7 = -float:Infinity;
    float? a8 = ();

    io:println(a1 + a1); // @output -0.0
    io:println(a1 + a2); // @output -4.9E-324
    io:println(a1 + a3); // @output -124.0
    io:println(a1 + a4); // @output -75647.096547382
    io:println(a1 + a5); // @output -4657382.1234
    io:println(a1 + a6); // @output -1.7976931348623157E308
    io:println(a1 + a7); // @output -Infinity
    io:println((a1 + a8).toBalString()); // @output ()

    io:println(a2 + a1); // @output -4.9E-324
    io:println(a2 + a2); // @output -1.0E-323
    io:println(a2 + a3); // @output -124.0
    io:println(a2 + a4); // @output -75647.096547382
    io:println(a2 + a5); // @output -4657382.1234
    io:println(a2 + a6); // @output -1.7976931348623157E308
    io:println(a2 + a7); // @output -Infinity
    io:println((a2 + a8).toBalString()); // @output ()

    io:println(a3 + a1); // @output -124.0
    io:println(a3 + a2); // @output -124.0
    io:println(a3 + a3); // @output -248.0
    io:println(a3 + a4); // @output -75771.096547382
    io:println(a3 + a5); // @output -4657506.1234
    io:println(a3 + a6); // @output -1.7976931348623157E308
    io:println(a3 + a7); // @output -Infinity
    io:println((a3 + a8).toBalString()); // @output ()

    io:println(a4 + a1); // @output -75647.096547382
    io:println(a4 + a2); // @output -75647.096547382
    io:println(a4 + a3); // @output -75771.096547382
    io:println(a4 + a4); // @output -151294.193094764
    io:println(a4 + a5); // @output -4733029.219947382
    io:println(a4 + a6); // @output -1.7976931348623157E308
    io:println(a4 + a7); // @output -Infinity
    io:println((a4 + a8).toBalString()); // @output ()

    io:println(a5 + a1); // @output -4657382.1234
    io:println(a5 + a2); // @output -4657382.1234
    io:println(a5 + a3); // @output -4657506.1234
    io:println(a5 + a4); // @output -4733029.219947382
    io:println(a5 + a5); // @output -9314764.2468
    io:println(a5 + a6); // @output -1.7976931348623157E308
    io:println(a5 + a7); // @output -Infinity
    io:println((a5 + a8).toBalString()); // @output ()

    io:println(a6 + a1); // @output -1.7976931348623157E308
    io:println(a6 + a2); // @output -1.7976931348623157E308
    io:println(a6 + a3); // @output -1.7976931348623157E308
    io:println(a6 + a4); // @output -1.7976931348623157E308
    io:println(a6 + a5); // @output -1.7976931348623157E308
    io:println(a6 + a6); // @output -Infinity
    io:println(a6 + a7); // @output -Infinity
    io:println((a6 + a8).toBalString()); // @output ()

    io:println(a7 + a1); // @output -Infinity
    io:println(a7 + a2); // @output -Infinity
    io:println(a7 + a3); // @output -Infinity
    io:println(a7 + a4); // @output -Infinity
    io:println(a7 + a5); // @output -Infinity
    io:println(a7 + a6); // @output -Infinity
    io:println(a7 + a7); // @output -Infinity
    io:println((a7 + a8).toBalString()); // @output ()

    io:println((a8 + a8).toBalString()); // @output ()
}

Test-Case: output
Description: Test float addition when one operand is a negative float or nil and the other is a float decimal
             or nil of type float?.
Labels: additive-expr, DecimalFloatingPointNumber, float, FloatingPointTypeSuffix, infinity, nil-literal,
        numeric-nil-lifting, optional-type, unary-minus, unary-plus, value:toBalString

function init() {
    float? a1 = -float:Infinity;
    float? a2 = -2.345e02;
    float? a3 = -12423.23;
    float? a4 = -10.746;
    float? a5 = 30.25453213;
    float? a6 = +235462;
    float? a7 = 2.345e02;
    float? a8 = float:Infinity;
    float? a9 = ();

    io:println(a1 + a5); // @output -Infinity
    io:println(a1 + a6); // @output -Infinity
    io:println(a1 + a7); // @output -Infinity
    io:println(a1 + a8); // @output NaN
    io:println((a1 + a9).toBalString()); // @output ()

    io:println(a2 + a5); // @output -204.24546787
    io:println(a2 + a6); // @output 235227.5
    io:println(a2 + a7); // @output 0.0
    io:println(a2 + a8); // @output Infinity
    io:println((a2 + a9).toBalString()); // @output ()

    io:println(a3 + a5); // @output -12392.97546787
    io:println(a3 + a6); // @output 223038.77
    io:println(a3 + a7); // @output -12188.73
    io:println(a3 + a8); // @output Infinity
    io:println((a3 + a9).toBalString()); // @output ()

    io:println(a4 + a5); // @output 19.50853213
    io:println(a4 + a6); // @output 235451.254
    io:println(a4 + a7); // @output 223.754
    io:println(a4 + a8); // @output Infinity
    io:println((a4 + a9).toBalString()); // @output ()

    io:println(a5 + a1); // @output -Infinity
    io:println(a5 + a2); // @output -204.24546787
    io:println(a5 + a3); // @output -12392.97546787
    io:println(a5 + a4); // @output 19.50853213
    io:println((a5 + a9).toBalString()); // @output ()

    io:println(a6 + a1); // @output -Infinity
    io:println(a6 + a2); // @output 235227.5
    io:println(a6 + a3); // @output 223038.77
    io:println(a6 + a4); // @output 235451.254
    io:println((a6 + a9).toBalString()); // @output ()

    io:println(a7 + a1); // @output -Infinity
    io:println(a7 + a2); // @output 0.0
    io:println(a7 + a3); // @output -12188.73
    io:println(a7 + a4); // @output 223.754
    io:println((a7 + a9).toBalString()); // @output ()

    io:println(a8 + a1); // @output NaN
    io:println(a8 + a2); // @output Infinity
    io:println(a8 + a3); // @output Infinity
    io:println(a8 + a4); // @output Infinity
    io:println((a8 + a9).toBalString()); // @output ()
}

Test-Case: output
Description: Test float addition with user-defined subtypes of float?.
Labels: additive-expr, DecimalFloatingPointNumber, float, FloatingPointTypeSuffix, infinity, module-const-decl,
        module-type-defn, nil-literal, numeric-nil-lifting, optional-type, singleton-type, unary-minus, union-type,
        value:toBalString

const float A = 1.25;
const float B = 2.0;

type FloatType1 -2f|-1f|0f|1f|2f;

type FloatType2 A|B;

type FloatType3 FloatType1|FloatType2?;

function init() {
    A? a1 = 1.25;
    FloatType1? a2 = -1.0;
    FloatType2? a3 = 2;
    FloatType3? a4 = -0x2;
    float? a5 = float:Infinity;
    float|FloatType2? a6 = -float:Infinity;
    FloatType3 a7 = ();

    float? a = a1 + a2;
    io:println(a); // @output 0.25

    a = a1 + a3;
    io:println(a); // @output 3.25

    a = a1 + a4;
    io:println(a); // @output -0.75

    a = a1 + a5;
    io:println(a); // @output Infinity

    a = a1 + a6;
    io:println(a); // @output -Infinity

    a = a1 + a7;
    io:println(a.toBalString()); // @output ()

    a = a1 + 10;
    io:println(a); // @output 11.25

    a = a2 + a3;
    io:println(a); // @output 1.0

    a = a2 + a4;
    io:println(a); // @output -3.0

    a = a2 + a5;
    io:println(a); // @output Infinity

    a = a2 + a6;
    io:println(a); // @output -Infinity

    a = a2 + a7;
    io:println(a.toBalString()); // @output ()

    a = a3 + a4;
    io:println(a); // @output 0.0

    a = a3 + a5;
    io:println(a); // @output Infinity

    a = a3 + a6;
    io:println(a); // @output -Infinity

    a = a3 + a7;
    io:println(a.toBalString()); // @output ()
}

Test-Case: output
Description: Test float addition with operands of different nullable and non-nullable float subtypes.
Labels: additive-expr, DecimalFloatingPointNumber, float, FloatingPointTypeSuffix, infinity, module-const-decl,
        module-type-defn, numeric-nil-lifting, optional-type, unary-minus, union-type, value:toBalString

const float A = 1.25;
const float B = 2.0;

type FloatType1 -2f|-1f|0f|1f|2f;

type FloatType2 A|B;

type FloatType3 FloatType1|FloatType2?;

function init() {
    A? a1 = 1.25;
    FloatType1 a2 = -1.0;
    FloatType2? a3 = 2;
    FloatType3 a4 = -0x2;
    float? a5 = float:Infinity;
    float a6 = -float:Infinity;

    float? a = a1 + a2;
    io:println(a); // @output 0.25

    a = a1 + a5;
    io:println(a); // @output Infinity

    a = a1 + 10;
    io:println(a); // @output 11.25

    a = a2 + a3;
    io:println(a); // @output 1.0

    a = a2 + a4;
    io:println(a); // @output -3.0

    a = a2 + a5;
    io:println(a); // @output Infinity

    a = a3 + a6;
    io:println(a); // @output -Infinity

    a = a4 + a6;
    io:println(a); // @output -Infinity

    a = a5 + a6;
    io:println(a); // @output NaN
}

Test-Case: output
Description: Test assigning the result of an additive expression to a compatible type.
Labels: additive-expr, any, DecimalFloatingPointNumber, float, FloatingPointTypeSuffix, is-expr, optional-type, string,
        union-type

function init() {
    float? x = 10f;
    float|string|() a = x + 20.0;
    io:println(a); // @output 30.0
    io:println(a is float); // @output true

    any b = x + 20.0;
    io:println(b); // @output 30.0
    io:println(b is float); // @output true
}

Test-Case: output
Description: Test assigning the result of an additive expression to var.
Labels: additive-expr, DecimalFloatingPointNumber, float, is-expr, nil-literal, optional-type, value:toBalString, var

function init() {
    float? x = ();
    float? y = 15.0;

    var a = x + 20.0;
    io:println(a.toBalString()); // @output ()
    io:println(a is ()); // @output true

    var b = y + 20.0;
    io:println(b); // @output 35.0
    io:println(b is float); // @output true
}

Test-Case: output
Description: Test using additive expression at module level.
Labels: additive-expr, DecimalFloatingPointNumber, float, FloatingPointTypeSuffix, is-expr, module-const-decl,
        module-init-var-decl, nil-literal, optional-type, value:toBalString, var

float? x = 15f;
float? y = ();

var a = x + 20f;

float? b = y + 20f;

function init() {
    io:println(a); // @output 35.0
    io:println(a is float); // @output true

    io:println(b.toBalString()); // @output ()
}

Test-Case: output
Description: Test variable reference as float addition operands.
Labels: additive-expr, DecimalNumber, float, variable-reference-expr

function init() {
    float a = 2;
    float b = a + a;
    io:println(b); // @output 4.0
}

Test-Case: output
Description: Test field and member access as float addition operands.
Labels: additive-expr, array-type, DecimalNumber, field-access-expr, float, list-constructor-expr,
        mapping-constructor-expr, member-access-expr, module-type-defn, optional-field-access-expr, record-type

type Record record {
    float x;
    float y?;
};

function init() {
    Record c = {x: 10, y:20};
    float[] d = [30, 40];
    float? e = c.x + d[0] + c?.y;
    io:println(e); // @output 60.0
}

Test-Case: output
Description: Test function and method call as float addition operands.
Labels: additive-expr, DecimalFloatingPointNumber, DecimalNumber, defaultable-param, explicit-new-expr, float,
        FloatingPointTypeSuffix, function-call-expr, method-call-expr, module-class-defn

class Class {
    function getFloat(float a) returns float {
        return 60 + a;
    }
}

function init() {
    Class f = new Class();
    float g = f.getFloat(12f + 20) + getFloat();
    io:println(g); // @output 137.0
}

function getFloat(float a = 10 + 30) returns float {
    return 2.0 + 3 + a;
}

Test-Case: output
Description: Test type cast expression in float addition operands.
Labels: additive-expr, DecimalNumber, float, type-cast-expr

function init() {
    float i = <float> 6 + 7;
    io:println(i); // @output 13.0
}

Test-Case: output
Description: Test unary expressions in float addition operands.
Labels: additive-expr, DecimalFloatingPointNumber, DecimalNumber, float, FloatingPointTypeSuffix, unary-complement,
        unary-minus, unary-plus

function init() {
    float a1 = +4f + -3;
    io:println(a1); // @output 1.0

    float a2 = -(-2f + 5.0);
    io:println(a2); // @output -3.0
}

Test-Case: output
Description: Test additive expression in float addition operands.
Labels: additive-expr, DecimalFloatingPointNumber, DecimalNumber, float, FloatingPointTypeSuffix

function init() {
    float a = 0x2 + 404 - 10f + 4;
    io:println(a); // @output 400.0
}

Test-Case: output
Description: Test additive expression in float addition operands.
Labels: additive-expr, DecimalFloatingPointNumber, DecimalNumber, float, FloatingPointTypeSuffix

function init() {
    float a = 0x2 + (404 - 10f + 4);
    io:println(a); // @output 400.0
}

Test-Case: output
Description: Test precedence and associativity with additive expression.
Labels: additive-expr, DecimalNumber, FloatingPointTypeSuffix, int, multiplicative-expr

function init() {
    float a = 2f + 3f * 5f / 12f + 1f - 2f % 3f * 2f + 12f;
    io:println(a); // @output 12.25
}

Test-Case: output
Description: Test multiplicative expressions as float addition operands.
Labels: additive-expr, DecimalFloatingPointNumber, DecimalNumber, float, FloatingPointTypeSuffix, multiplicative-expr

function init() {
    float a = (1 * 2f) + (32 / 4.0);
    io:println(a); // @output 10.0
}

Test-Case: output
Description: Test checking expressions as float addition operands.
Labels: additive-expr, check, checkpanic, DecimalFloatingPointNumber, error, float, optional-type, union-type

function init() returns error? {
    float|error a = 12.25;
    float c = check a + checkpanic a;
    io:println(c); // @output 24.5
}

Test-Case: output
Description: Test let expression in float addition operands.
Labels: additive-expr, DecimalFloatingPointNumber, float, let-expr

function init() {
    float h = (let float h1 = 12.25 + 9.75 in h1) + 36f;
    io:println(h); // @output 58.0
}

Test-Case: output
Description: Test conditional expressions as float addition operands.
Labels: additive-expr, conditional-expr, DecimalNumber, error, float, nil-literal, optional-type, union-type

function init() {
    float|error a = 25;
    float? b = ();
    float c = (a is error ? 5 : a) + (b ?: 10);
    io:println(c); // @output 35.0
}

Test-Case: output
Description: Test lang.float constants as float addition operands.
Labels: additive-expr, float, float:PI

function init() {
    float a = 2.718281828459045 + float:PI;
    io:println(a); // @output 5.859874482048838
}

Test-Case: error
Description: Test assigning the result of float addition to an incompatible type.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, float, function-call-expr, int, var

function errorFunction(float a, float b) {
    int _ = 1.0f + 2.0f; // @error static type of additive-expr with decimal operands is float

    var a1 = 2.0 + 2.1;
    int _ = a1; // @error static type of additive-expr with float operands is float

    var a2 = a + b;
    int _ = a2; // @error static type of additive-expr with float operands is float

    decimal _ = a2; // @error static type of additive-expr with float operands is float

    var a3 = a + (getFloat(getFloat(2.0 + b)));
    decimal _ = a3; // @error static type of additive-expr with float operands is float
}

function getFloat(float f) returns float {
    return f - 1f;
}

Test-Case: error
Description: Test assigning the result of float addition with float? to an incompatible type.
Labels: additive-expr, DecimalFloatingPointNumber, float, function-call-expr, numeric-nil-lifting, optional-type

function errorFunction(float c, float? d) {
    float _ = d + c; // @error static type of additive-expr with at least one float? operand is float?
    float _ = getFloat(2.0) + d; // @error static type of additive-expr with at least one float? operand is float?
    float _ = d + getOptionalFloat(1.0 + 2f); // @error static type of additive-expr with at least one float? operand is float?
    float _ = c + getOptionalFloat(1); // @error static type of additive-expr with at least one float? operand is float?
}

function getFloat(float f) returns float {
    return f + 1f;
}

function getOptionalFloat(float? f) returns float? {
    return f + 1f;
}

Test-Case: error
Description: Test assigning the result of float addition to a subtype of float.
Labels: additive-expr, DecimalFloatingPointNumber, float, module-type-defn

type Floats 10.0|20f;

function errorFunction(Floats a, float b) {
    Floats _ = a + b; // @error static type of additive-expr with operands of float subtypes is float
    Floats _ = a + a; // @error static type of additive-expr with operands of float subtypes is float
}

Test-Case: error
Description: Test assigning the result of addition of optional floats to a subtype of float?.
Labels: additive-expr, DecimalFloatingPointNumber, float, module-type-defn, numeric-nil-lifting, optional-type

type Floats 10.0|20f;

function errorFunction(Floats? a, float? b) {
    Floats? _ = a + b; // @error static type of additive-expr with at least one operand of subtype of float? is float?
    Floats? _ = a + a; // @error static type of additive-expr with at least one operand of subtype of float? is float?
}
