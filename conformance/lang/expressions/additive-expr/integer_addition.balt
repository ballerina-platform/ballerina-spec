Test-Case: output
Description: Test integer addition with positive integers.
Labels: additive-expr, DecimalNumber, int

function init() {
    int a1 = 0;
    int a2 = 7;
    int a3 = 5363728;
    int a4 = 352612839171643627;
    int a5 = 9223372036854775800;

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output 7
    io:println(a1 + a3); // @output 5363728
    io:println(a1 + a4); // @output 352612839171643627
    io:println(a1 + a5); // @output 9223372036854775800

    io:println(a2 + a1); // @output 7
    io:println(a2 + a2); // @output 14
    io:println(a2 + a3); // @output 5363735
    io:println(a2 + a4); // @output 352612839171643634
    io:println(a2 + a5); // @output 9223372036854775807

    io:println(a3 + a1); // @output 5363728
    io:println(a3 + a2); // @output 5363735
    io:println(a3 + a3); // @output 10727456
    io:println(a3 + a4); // @output 352612839177007355

    io:println(a4 + a1); // @output 352612839171643627
    io:println(a4 + a2); // @output 352612839171643634
    io:println(a4 + a3); // @output 352612839177007355

    io:println(a5 + a1); // @output 9223372036854775800
    io:println(a5 + a2); // @output 9223372036854775807
}

Test-Case: output
Description: Test integer addition with negative integers.
Labels: additive-expr, DecimalNumber, int, unary-minus

function init() {
    int a1 = -0;
    int a2 = -8;
    int a3 = -5363728;
    int a4 = -352612839171643627;
    int a5 = -9223372036854775800;

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output -8
    io:println(a1 + a3); // @output -5363728
    io:println(a1 + a4); // @output -352612839171643627
    io:println(a1 + a5); // @output -9223372036854775800

    io:println(a2 + a1); // @output -8
    io:println(a2 + a2); // @output -16
    io:println(a2 + a3); // @output -5363736
    io:println(a2 + a4); // @output -352612839171643635
    io:println(a2 + a5); // @output -9223372036854775808

    io:println(a3 + a1); // @output -5363728
    io:println(a3 + a2); // @output -5363736
    io:println(a3 + a3); // @output -10727456
    io:println(a3 + a4); // @output -352612839177007355

    io:println(a4 + a1); // @output -352612839171643627
    io:println(a4 + a2); // @output -352612839171643635
    io:println(a4 + a3); // @output -352612839177007355

    io:println(a5 + a1); // @output -9223372036854775800
    io:println(a5 + a2); // @output -9223372036854775808
}

Test-Case: output
Description: Test integer addition when one operand is negative and the other is positive integer.
Labels: additive-expr, DecimalNumber, int, unary-minus

function init() {
    int a1 = -9223372036854775807;
    int a2 = -34562;
    int a3 = -1;
    int a4 = 7;
    int a5 = 6574;
    int a6 = 9223372036854775807;

    io:println(a1 + a4); // @output -9223372036854775800
    io:println(a1 + a5); // @output -9223372036854769233
    io:println(a1 + a6); // @output 0

    io:println(a2 + a4); // @output -34555
    io:println(a2 + a5); // @output -27988
    io:println(a2 + a6); // @output 9223372036854741245

    io:println(a3 + a4); // @output 6
    io:println(a3 + a5); // @output 6573
    io:println(a3 + a6); // @output 9223372036854775806

    io:println(a4 + a1); // @output -9223372036854775800
    io:println(a4 + a2); // @output -34555
    io:println(a4 + a3); // @output 6

    io:println(a5 + a1); // @output -9223372036854769233
    io:println(a5 + a2); // @output -27988
    io:println(a5 + a3); // @output 6573

    io:println(a6 + a1); // @output 0
    io:println(a6 + a2); // @output 9223372036854741245
    io:println(a6 + a3); // @output 9223372036854775806
}

Test-Case: output
Description: Test integer addition with hex int literals.
Labels: additive-expr, HexIntLiteral, int, unary-minus

function init() {
    int a1 = -0xfabd12;
    int a2 = -0x345;
    int a3 = -0x12a;
    int a4 = 0x0325;
    int a5 = 0xde;
    int a6 = 0xfffedf;

    io:println(a1 + a1); // @output -32864804
    io:println(a1 + a2); // @output -16433239
    io:println(a1 + a3); // @output -16432700
    io:println(a1 + a4); // @output -16431597
    io:println(a1 + a5); // @output -16432180
    io:println(a1 + a6); // @output 344525

    io:println(a2 + a1); // @output -16433239
    io:println(a2 + a2); // @output -1674
    io:println(a2 + a3); // @output -1135
    io:println(a2 + a4); // @output -32
    io:println(a2 + a5); // @output -615
    io:println(a2 + a6); // @output 16776090

    io:println(a3 + a1); // @output -16432700
    io:println(a3 + a2); // @output -1135
    io:println(a3 + a3); // @output -596
    io:println(a3 + a4); // @output 507
    io:println(a3 + a5); // @output -76
    io:println(a3 + a6); // @output 16776629

    io:println(a4 + a1); // @output -16431597
    io:println(a4 + a2); // @output -32
    io:println(a4 + a3); // @output 507
    io:println(a4 + a4); // @output 1610
    io:println(a4 + a5); // @output 1027
    io:println(a4 + a6); // @output 16777732

    io:println(a5 + a1); // @output -16432180
    io:println(a5 + a2); // @output -615
    io:println(a5 + a3); // @output -76
    io:println(a5 + a4); // @output 1027
    io:println(a5 + a5); // @output 444
    io:println(a5 + a6); // @output 16777149

    io:println(a6 + a1); // @output 344525
    io:println(a6 + a2); // @output 16776090
    io:println(a6 + a3); // @output 16776629
    io:println(a6 + a4); // @output 16777732
    io:println(a6 + a5); // @output 16777149
    io:println(a6 + a6); // @output 33553854
}

Test-Case: output
Description: Test integer addition with int literals as operands.
Labels: additive-expr, DecimalNumber, unary-minus

function init() {
    io:println(-9223372036854775807 + 7); // @output -9223372036854775800
    io:println(-9223372036854775807 + 6574); // @output -9223372036854769233
    io:println(-9223372036854775807 + 9223372036854775807); // @output 0

    io:println(-34562 + 7); // @output -34555
    io:println(-34562 + 6574); // @output -27988
    io:println(-34562 + 9223372036854775807); // @output 9223372036854741245

    io:println(-1 + 7); // @output 6
    io:println(-1 + 6574); // @output 6573
    io:println(-1 + 9223372036854775807); // @output 9223372036854775806

    io:println(7 + -9223372036854775807); // @output -9223372036854775800
    io:println(7 + -34562); // @output -34555
    io:println(7 + -1); // @output 6

    io:println(6574 + -9223372036854775807); // @output -9223372036854769233
    io:println(6574 + -34562); // @output -27988
    io:println(6574 + -1); // @output 6573

    io:println(9223372036854775807 + -9223372036854775807); // @output 0
    io:println(9223372036854775807 + -34562); // @output 9223372036854741245
    io:println(9223372036854775807 + -1); // @output 9223372036854775806
}

Test-Case: output
Description: Test integer addition with hex int literals as operands.
Labels: additive-expr, HexIntLiteral, unary-minus

function init() {
    io:println(-0xfabd12 + -0xfabd12); // @output -32864804
    io:println(-0xfabd12 + -0x345); // @output -16433239
    io:println(-0xfabd12 + -0x12a); // @output -16432700
    io:println(-0xfabd12 + 0x0325); // @output -16431597
    io:println(-0xfabd12 + 0xde); // @output -16432180
    io:println(-0xfabd12 + 0xfffedf); // @output 344525

    io:println(-0x345 + -0xfabd12); // @output -16433239
    io:println(-0x345 + -0x345); // @output -1674
    io:println(-0x345 + -0x12a); // @output -1135
    io:println(-0x345 + 0x0325); // @output -32
    io:println(-0x345 + 0xde); // @output -615
    io:println(-0x345 + 0xfffedf); // @output 16776090

    io:println(-0x12a + -0xfabd12); // @output -16432700
    io:println(-0x12a + -0x345); // @output -1135
    io:println(-0x12a + -0x12a); // @output -596
    io:println(-0x12a + 0x0325); // @output 507
    io:println(-0x12a + 0xde); // @output -76
    io:println(-0x12a + 0xfffedf); // @output 16776629

    io:println(0x0325 + -0xfabd12); // @output -16431597
    io:println(0x0325 + -0x345); // @output -32
    io:println(0x0325 + -0x12a); // @output 507
    io:println(0x0325 + 0x0325); // @output 1610
    io:println(0x0325 + 0xde); // @output 1027
    io:println(0x0325 + 0xfffedf); // @output 16777732

    io:println(0xde + -0xfabd12); // @output -16432180
    io:println(0xde + -0x345); // @output -615
    io:println(0xde + -0x12a); // @output -76
    io:println(0xde + 0x0325); // @output 1027
    io:println(0xde + 0xde); // @output 444
    io:println(0xde + 0xfffedf); // @output 16777149

    io:println(0xfffedf + -0xfabd12); // @output 344525
    io:println(0xfffedf + -0x345); // @output 16776090
    io:println(0xfffedf + -0x12a); // @output 16776629
    io:println(0xfffedf + 0x0325); // @output 16777732
    io:println(0xfffedf + 0xde); // @output 16777149
    io:println(0xfffedf + 0xfffedf); // @output 33553854
}

Test-Case: panic
Description: Test integer addition overflow.
Labels: additive-expr, DecimalNumber, int

function init() {
    int a = 9223372036854775807;
    int b = 1;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow.
Labels: additive-expr, DecimalNumber, int

function init() {
    _ = 9223372036854775807 + 1; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow.
Labels: additive-expr, DecimalNumber, int

function init() {
    int a = -9223372036854775807;
    int b = -2;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow.
Labels: additive-expr, DecimalNumber, int

function init() {
    _ = -9223372036854775807 + -2; // @panic integer overflow
}

Test-Case: output
Description: Test integer addition with Unsigned8 integers.
Labels: additive-expr, DecimalNumber, int:Unsigned8

function init() {
    int:Unsigned8 a1 = 0;
    int:Unsigned8 a2 = 10;
    int:Unsigned8 a3 = 123;
    int:Unsigned8 a4 = 255;

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output 10
    io:println(a1 + a3); // @output 123
    io:println(a1 + a4); // @output 255

    io:println(a2 + a1); // @output 10
    io:println(a2 + a2); // @output 20
    io:println(a2 + a3); // @output 133
    io:println(a2 + a4); // @output 265

    io:println(a3 + a1); // @output 123
    io:println(a3 + a2); // @output 133
    io:println(a3 + a3); // @output 246
    io:println(a3 + a4); // @output 378

    io:println(a4 + a1); // @output 255
    io:println(a4 + a2); // @output 265
    io:println(a4 + a3); // @output 378
    io:println(a4 + a4); // @output 510
}

Test-Case: panic
Description: Test integer addition overflow with int:Unsigned8.
Labels: additive-expr, DecimalNumber, int, int:Unsigned8

function init() {
    int:Unsigned8 a = 255;
    int b = 9223372036854775807;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with int:Unsigned8.
Labels: additive-expr, DecimalNumber, int, int:Unsigned8

function init() {
    int:Unsigned8 a = 255;
    _ = a + 9223372036854775807; // @panic integer overflow
}

Test-Case: output
Description: Test integer addition with byte.
Labels: additive-expr, byte, DecimalNumber

function init() {
    byte a1 = 0;
    byte a2 = 10;
    byte a3 = 123;
    byte a4 = 255;

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output 10
    io:println(a1 + a3); // @output 123
    io:println(a1 + a4); // @output 255

    io:println(a2 + a1); // @output 10
    io:println(a2 + a2); // @output 20
    io:println(a2 + a3); // @output 133
    io:println(a2 + a4); // @output 265

    io:println(a3 + a1); // @output 123
    io:println(a3 + a2); // @output 133
    io:println(a3 + a3); // @output 246
    io:println(a3 + a4); // @output 378

    io:println(a4 + a1); // @output 255
    io:println(a4 + a2); // @output 265
    io:println(a4 + a3); // @output 378
    io:println(a4 + a4); // @output 510
}

Test-Case: panic
Description: Test integer addition overflow when one operand is of byte type.
Labels: additive-expr, byte, DecimalNumber, int

function init() {
    byte a = 255;
    int b = 9223372036854775807;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with byte.
Labels: additive-expr, byte, DecimalNumber, int

function init() {
    byte a = 255;
    _ = a + 9223372036854775807; // @panic integer overflow
}

Test-Case: output
Description: Test integer addition with Unsigned16 integers.
Labels: additive-expr, DecimalNumber, int:Unsigned16

function init() {
    int:Unsigned16 a1 = 0;
    int:Unsigned16 a2 = 10;
    int:Unsigned16 a3 = 4323;
    int:Unsigned16 a4 = 65535;

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output 10
    io:println(a1 + a3); // @output 4323
    io:println(a1 + a4); // @output 65535

    io:println(a2 + a1); // @output 10
    io:println(a2 + a2); // @output 20
    io:println(a2 + a3); // @output 4333
    io:println(a2 + a4); // @output 65545

    io:println(a3 + a1); // @output 4323
    io:println(a3 + a2); // @output 4333
    io:println(a3 + a3); // @output 8646
    io:println(a3 + a4); // @output 69858

    io:println(a4 + a1); // @output 65535
    io:println(a4 + a2); // @output 65545
    io:println(a4 + a3); // @output 69858
    io:println(a4 + a4); // @output 131070
}

Test-Case: panic
Description: Test integer addition overflow with int:Unsigned16.
Labels: additive-expr, DecimalNumber, int, int:Unsigned16

function init() {
    int:Unsigned16 a = 255;
    int b = 9223372036854775807;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with int:Unsigned16.
Labels: additive-expr, DecimalNumber, int, int:Unsigned16

function init() {
    int:Unsigned16 a = 255;
    _ = a + 9223372036854775807; // @panic integer overflow
}

Test-Case: output
Description: Test integer addition with Unsigned32 integers.
Labels: additive-expr, DecimalNumber, int:Unsigned32

function init() {
    int:Unsigned32 a1 = 0;
    int:Unsigned32 a2 = 10;
    int:Unsigned32 a3 = 435261;
    int:Unsigned32 a4 = 4294967295;

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output 10
    io:println(a1 + a3); // @output 435261
    io:println(a1 + a4); // @output 4294967295

    io:println(a2 + a1); // @output 10
    io:println(a2 + a2); // @output 20
    io:println(a2 + a3); // @output 435271
    io:println(a2 + a4); // @output 4294967305

    io:println(a3 + a1); // @output 435261
    io:println(a3 + a2); // @output 435271
    io:println(a3 + a3); // @output 870522
    io:println(a3 + a4); // @output 4295402556

    io:println(a4 + a1); // @output 4294967295
    io:println(a4 + a2); // @output 4294967305
    io:println(a4 + a3); // @output 4295402556
    io:println(a4 + a4); // @output 8589934590
}

Test-Case: panic
Description: Test integer addition overflow with int:Unsigned32.
Labels: additive-expr, DecimalNumber, int, int:Unsigned32

function init() {
    int:Unsigned32 a = 255;
    int b = 9223372036854775807;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with int:Unsigned32.
Labels: additive-expr, DecimalNumber, int, int:Unsigned32

function init() {
    int:Unsigned32 a = 255;
    _ = a + 9223372036854775807; // @panic integer overflow
}

Test-Case: output
Description: Test integer addition with positive int:Signed8 integers.
Labels: additive-expr, DecimalNumber, int:Signed8

function init() {
    int:Signed8 a1 = 0;
    int:Signed8 a2 = 2;
    int:Signed8 a3 = 57;
    int:Signed8 a4 = 127;

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output 2
    io:println(a1 + a3); // @output 57
    io:println(a1 + a4); // @output 127

    io:println(a2 + a1); // @output 2
    io:println(a2 + a2); // @output 4
    io:println(a2 + a3); // @output 59
    io:println(a2 + a4); // @output 129

    io:println(a3 + a1); // @output 57
    io:println(a3 + a2); // @output 59
    io:println(a3 + a3); // @output 114
    io:println(a3 + a4); // @output 184

    io:println(a4 + a1); // @output 127
    io:println(a4 + a2); // @output 129
    io:println(a4 + a3); // @output 184
    io:println(a4 + a4); // @output 254
}

Test-Case: output
Description: Test integer addition with negative int:Signed8 integers.
Labels: additive-expr, DecimalNumber, int:Signed8

function init() {
    int:Signed8 a1 = -0;
    int:Signed8 a2 = -2;
    int:Signed8 a3 = -57;
    int:Signed8 a4 = -128;

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output -2
    io:println(a1 + a3); // @output -57
    io:println(a1 + a4); // @output -128

    io:println(a2 + a1); // @output -2
    io:println(a2 + a2); // @output -4
    io:println(a2 + a3); // @output -59
    io:println(a2 + a4); // @output -130

    io:println(a3 + a1); // @output -57
    io:println(a3 + a2); // @output -59
    io:println(a3 + a3); // @output -114
    io:println(a3 + a4); // @output -185

    io:println(a4 + a1); // @output -128
    io:println(a4 + a2); // @output -130
    io:println(a4 + a3); // @output -185
    io:println(a4 + a4); // @output -256
}

Test-Case: output
Description: Test integer addition when one operand is negative and the other is positive Signed8 integer.
Labels: additive-expr, DecimalNumber, int:Signed8, unary-minus

function init() {
    int:Signed8 a1 = -128;
    int:Signed8 a2 = -100;
    int:Signed8 a3 = -1;
    int:Signed8 a4 = 1;
    int:Signed8 a5 = 100;
    int:Signed8 a6 = 127;

    io:println(a1 + a4); // @output -127
    io:println(a1 + a5); // @output -28
    io:println(a1 + a6); // @output -1

    io:println(a2 + a4); // @output -99
    io:println(a2 + a5); // @output 0
    io:println(a2 + a6); // @output 27

    io:println(a3 + a4); // @output 0
    io:println(a3 + a5); // @output 99
    io:println(a3 + a6); // @output 126

    io:println(a4 + a1); // @output -127
    io:println(a4 + a2); // @output -99
    io:println(a4 + a3); // @output 0

    io:println(a5 + a1); // @output -28
    io:println(a5 + a2); // @output 0
    io:println(a5 + a3); // @output 99

    io:println(a6 + a1); // @output -1
    io:println(a6 + a2); // @output 27
    io:println(a6 + a3); // @output 126
}

Test-Case: panic
Description: Test integer addition overflow with int:Signed8.
Labels: additive-expr, DecimalNumber, int, int:Signed8

function init() {
    int a = 9223372036854775800;
    int:Signed8 b = 127;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with int:Signed8.
Labels: additive-expr, DecimalNumber, int, int:Signed8

function init() {
    int:Signed8 a = 127;
    _ = 9223372036854775800 + a; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with int:Signed8.
Labels: additive-expr, DecimalNumber, int, int:Signed8

function init() {
    int a = -9223372036854775806;
    int:Signed8 b = -10;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with int:Signed8.
Labels: additive-expr, DecimalNumber, int, int:Signed8

function init() {
    int:Signed8 a = -10;
    _ = -9223372036854775806 + a; // @panic integer overflow
}

Test-Case: output
Description: Test integer addition with positive int:Signed16 integers.
Labels: additive-expr, DecimalNumber, int:Signed16

function init() {
    int:Signed16 a1 = 0;
    int:Signed16 a2 = 20;
    int:Signed16 a3 = 5463;
    int:Signed16 a4 = 32767;

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output 20
    io:println(a1 + a3); // @output 5463
    io:println(a1 + a4); // @output 32767

    io:println(a2 + a1); // @output 20
    io:println(a2 + a2); // @output 40
    io:println(a2 + a3); // @output 5483
    io:println(a2 + a4); // @output 32787

    io:println(a3 + a1); // @output 5463
    io:println(a3 + a2); // @output 5483
    io:println(a3 + a3); // @output 10926
    io:println(a3 + a4); // @output 38230

    io:println(a4 + a1); // @output 32767
    io:println(a4 + a2); // @output 32787
    io:println(a4 + a3); // @output 38230
    io:println(a4 + a4); // @output 65534
}

Test-Case: output
Description: Test integer addition with negative int:Signed16 integers.
Labels: additive-expr, DecimalNumber, int:Signed16

function init() {
    int:Signed16 a1 = -0;
    int:Signed16 a2 = -20;
    int:Signed16 a3 = -2313;
    int:Signed16 a4 = -32768;

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output -20
    io:println(a1 + a3); // @output -2313
    io:println(a1 + a4); // @output -32768

    io:println(a2 + a1); // @output -20
    io:println(a2 + a2); // @output -40
    io:println(a2 + a3); // @output -2333
    io:println(a2 + a4); // @output -32788

    io:println(a3 + a1); // @output -2313
    io:println(a3 + a2); // @output -2333
    io:println(a3 + a3); // @output -4626
    io:println(a3 + a4); // @output -35081

    io:println(a4 + a1); // @output -32768
    io:println(a4 + a2); // @output -32788
    io:println(a4 + a3); // @output -35081
    io:println(a4 + a4); // @output -65536
}

Test-Case: output
Description: Test integer addition when one operand is negative and the other is positive Signed16 integer.
Labels: additive-expr, DecimalNumber, int:Signed16, unary-minus

function init() {
    int:Signed16 a1 = -32768;
    int:Signed16 a2 = -2344;
    int:Signed16 a3 = -10;
    int:Signed16 a4 = 25;
    int:Signed16 a5 = 4536;
    int:Signed16 a6 = 32767;

    io:println(a1 + a4); // @output -32743
    io:println(a1 + a5); // @output -28232
    io:println(a1 + a6); // @output -1

    io:println(a2 + a4); // @output -2319
    io:println(a2 + a5); // @output 2192
    io:println(a2 + a6); // @output 30423

    io:println(a3 + a4); // @output 15
    io:println(a3 + a5); // @output 4526
    io:println(a3 + a6); // @output 32757

    io:println(a4 + a1); // @output -32743
    io:println(a4 + a2); // @output -2319
    io:println(a4 + a3); // @output 15

    io:println(a5 + a1); // @output -28232
    io:println(a5 + a2); // @output 2192
    io:println(a5 + a3); // @output 4526

    io:println(a6 + a1); // @output -1
    io:println(a6 + a2); // @output 30423
    io:println(a6 + a3); // @output 32757
}

Test-Case: panic
Description: Test integer addition overflow with int:Signed16.
Labels: additive-expr, DecimalNumber, int, int:Signed16

function init() {
    int a = 9223372036854775800;
    int:Signed16 b = 127;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with int:Signed16.
Labels: additive-expr, DecimalNumber, int, int:Signed16

function init() {
    int:Signed16 a = 127;
    _ = 9223372036854775800 + a; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with int:Signed16.
Labels: additive-expr, DecimalNumber, int, int:Signed16

function init() {
    int a = -9223372036854775806;
    int:Signed16 b = -10;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with int:Signed16.
Labels: additive-expr, DecimalNumber, int, int:Signed16

function init() {
    int:Signed16 a = -10;
    _ = -9223372036854775806 + a; // @panic integer overflow
}

Test-Case: output
Description: Test integer addition with positive int:Signed32 integers.
Labels: additive-expr, DecimalNumber, int:Signed32

function init() {
    int:Signed32 a1 = 0;
    int:Signed32 a2 = 253;
    int:Signed32 a3 = 2324152;
    int:Signed32 a4 = 2147483647;

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output 253
    io:println(a1 + a3); // @output 2324152
    io:println(a1 + a4); // @output 2147483647

    io:println(a2 + a1); // @output 253
    io:println(a2 + a2); // @output 506
    io:println(a2 + a3); // @output 2324405
    io:println(a2 + a4); // @output 2147483900

    io:println(a3 + a1); // @output 2324152
    io:println(a3 + a2); // @output 2324405
    io:println(a3 + a3); // @output 4648304
    io:println(a3 + a4); // @output 2149807799

    io:println(a4 + a1); // @output 2147483647
    io:println(a4 + a2); // @output 2147483900
    io:println(a4 + a3); // @output 2149807799
    io:println(a4 + a4); // @output 4294967294
}

Test-Case: output
Description: Test integer addition with negative int:Signed32 integers.
Labels: additive-expr, DecimalNumber, int:Signed32

function init() {
    int:Signed32 a1 = -0;
    int:Signed32 a2 = -345;
    int:Signed32 a3 = -3425271;
    int:Signed32 a4 = -2147483648;

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output -345
    io:println(a1 + a3); // @output -3425271
    io:println(a1 + a4); // @output -2147483648

    io:println(a2 + a1); // @output -345
    io:println(a2 + a2); // @output -690
    io:println(a2 + a3); // @output -3425616
    io:println(a2 + a4); // @output -2147483993

    io:println(a3 + a1); // @output -3425271
    io:println(a3 + a2); // @output -3425616
    io:println(a3 + a3); // @output -6850542
    io:println(a3 + a4); // @output -2150908919

    io:println(a4 + a1); // @output -2147483648
    io:println(a4 + a2); // @output -2147483993
    io:println(a4 + a3); // @output -2150908919
    io:println(a4 + a4); // @output -4294967296
}

Test-Case: output
Description: Test integer addition when one operand is negative and the other is positive Signed32 integer.
Labels: additive-expr, DecimalNumber, int:Signed32, unary-minus

function init() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = -23444;
    int:Signed32 a3 = -10;
    int:Signed32 a4 = 25;
    int:Signed32 a5 = 45363;
    int:Signed32 a6 = 2147483647;

    io:println(a1 + a4); // @output -2147483623
    io:println(a1 + a5); // @output -2147438285
    io:println(a1 + a6); // @output -1

    io:println(a2 + a4); // @output -23419
    io:println(a2 + a5); // @output 21919
    io:println(a2 + a6); // @output 2147460203

    io:println(a3 + a4); // @output 15
    io:println(a3 + a5); // @output 45353
    io:println(a3 + a6); // @output 2147483637

    io:println(a4 + a1); // @output -2147483623
    io:println(a4 + a2); // @output -23419
    io:println(a4 + a3); // @output 15

    io:println(a5 + a1); // @output -2147438285
    io:println(a5 + a2); // @output 21919
    io:println(a5 + a3); // @output 45353

    io:println(a6 + a1); // @output -1
    io:println(a6 + a2); // @output 2147460203
    io:println(a6 + a3); // @output 2147483637
}

Test-Case: panic
Description: Test integer addition overflow with int:Signed32.
Labels: additive-expr, DecimalNumber, int, int:Signed32

function init() {
    int a = 9223372036854775800;
    int:Signed32 b = 4532;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with int:Signed32.
Labels: additive-expr, DecimalNumber, int, int:Signed32

function init() {
    int:Signed32 a = 234;
    _ = 9223372036854775800 + a; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with int:Signed32.
Labels: additive-expr, DecimalNumber, int, int:Signed32

function init() {
    int a = -9223372036854775806;
    int:Signed32 b = -3452;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with int:Signed32.
Labels: additive-expr, DecimalNumber, int, int:Signed32

function init() {
    int:Signed32 a = -1234;
    _ = -9223372036854775806 + a; // @panic integer overflow
}

Test-Case: output
Description: Test integer addition with user-defined subtypes of int.
Labels: additive-expr, DecimalNumber, module-type-defn, singleton-type, unary-minus, union-type

type IntType1 -2|-1|0|1|2;

type IntType2 int:Unsigned8|int:Signed32;

function init() {
    IntType1 a1 = 1;
    IntType1 a2 = -2;
    IntType2 a3 = -324;
    IntType2 a4 = 1123;

    io:println(a1 + a1); // @output 2
    io:println(a1 + a2); // @output -1
    io:println(a1 + a3); // @output -323
    io:println(a1 + a4); // @output 1124

    io:println(a2 + a1); // @output -1
    io:println(a2 + a2); // @output -4
    io:println(a2 + a3); // @output -326
    io:println(a2 + a4); // @output 1121

    io:println(a3 + a1); // @output -323
    io:println(a3 + a2); // @output -326
    io:println(a3 + a3); // @output -648
    io:println(a3 + a4); // @output 799

    io:println(a4 + a1); // @output 1124
    io:println(a4 + a2); // @output 1121
    io:println(a4 + a3); // @output 799
    io:println(a4 + a4); // @output 2246
}

Test-Case: output
Description: Test integer addition with user-defined subtype of int.
Labels: additive-expr, DecimalNumber, module-type-defn, singleton-type, unary-minus, union-type

type IntType1 -2|-1|0|1|2;

type IntType2 int:Unsigned8|int:Signed32;

type IntType3 IntType1|IntType2;

function init() {
    IntType1 a1 = 1;
    IntType1 a2 = -2;
    IntType2 a3 = -324;
    IntType2 a4 = 1123;
    IntType3 a5 = 0;
    IntType3 a6 = -12;

    io:println(a1 + a5); // @output 1
    io:println(a1 + a6); // @output -11

    io:println(a2 + a5); // @output -2
    io:println(a2 + a6); // @output -14

    io:println(a3 + a5); // @output -324
    io:println(a3 + a6); // @output -336

    io:println(a4 + a5); // @output 1123
    io:println(a4 + a6); // @output 1111

    io:println(a5 + a1); // @output 1
    io:println(a5 + a2); // @output -2
    io:println(a5 + a3); // @output -324
    io:println(a5 + a4); // @output 1123
    io:println(a5 + a5); // @output 0
    io:println(a5 + a6); // @output -12

    io:println(a6 + a1); // @output -11
    io:println(a6 + a2); // @output -14
    io:println(a6 + a3); // @output -336
    io:println(a6 + a4); // @output 1111
    io:println(a6 + a5); // @output -12
    io:println(a6 + a6); // @output -24
}

Test-Case: panic
Description: Test integer addition overflow with user-defined subtype of int.
Labels: additive-expr, DecimalNumber, int, module-type-defn, numeric-nil-lifting, optional-type, singleton-type,
        unary-minus, union-type

type IntType1 -2|-1|0|1|2;

function init() {
    int a = 9223372036854775807;
    IntType1 b = 2;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with user-defined subtype of int.
Labels: additive-expr, DecimalNumber, int, int:Signed32, int:Unsigned8, module-type-defn, numeric-nil-lifting,
        optional-type, union-type

type IntType2 int:Unsigned8|int:Signed32;

function init() {
    int a = 9223372036854775807;
    IntType2 b = 2;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with user-defined subtype of int.
Labels: additive-expr, DecimalNumber, module-type-defn, singleton-type, unary-minus, union-type

type IntType1 -2|-1|0|1|2;

type IntType2 int:Unsigned8|int:Signed32;

type IntType3 IntType1|IntType2;

function init() {
    int a = 9223372036854775807;
    IntType3 b = 2;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with user-defined subtype of int.
Labels: additive-expr, DecimalNumber, module-type-defn, singleton-type, unary-minus, union-type

type IntType1 -2|-1|0|1|2;

function init() {
    IntType1 a = 2;
    _ = 9223372036854775807 + a; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with user-defined subtype of int.
Labels: additive-expr, DecimalNumber, int, module-type-defn, union-type

type IntType2 int:Unsigned8|int:Signed32;

function init() {
    IntType2 a = 2;
    _ = a + 9223372036854775807; // @panic integer overflown
}

Test-Case: panic
Description: Test integer addition overflow with user-defined subtype of int.
Labels: additive-expr, DecimalNumber, int, module-type-defn, singleton-type, unary-minus, union-type

type IntType1 -2|-1|0|1|2;

type IntType2 int:Unsigned8|int:Signed32;

type IntType3 IntType1|IntType2;

function init() {
    IntType3 a = 2;
    _ = a + 9223372036854775807; // @panic integer overflow
}

Test-Case: output
Description: Test integer addition with operands of different subtypes of int.
Labels: additive-expr, byte, DecimalNumber, int, int:Signed16, int:Signed32, int:Signed8, int:Unsigned16,
        int:Unsigned32, int:Unsigned8, module-type-defn, unary-minus, union-type

type IntType1 -1|1|0|2;

function init() {
    int a1 = -1;
    byte a2 = 2;
    int:Signed8 a3 = -3;
    int:Signed16 a4 = 4;
    int:Signed32 a5 = -5;
    int:Unsigned8 a6 = 6;
    int:Unsigned16 a7 = 7;
    int:Unsigned32 a8 = 8;
    IntType1 a9 = -1;
    int:Signed8|int:Signed32 a10 = 10;

    int a = a1 + a2;
    io:println(a); // @output 1

    a = a1 + a2;
    io:println(a); // @output 1

    a = a1 + a3;
    io:println(a); // @output -4

    a = a1 + a4;
    io:println(a); // @output 3

    a = a1 + a5;
    io:println(a); // @output -6

    a = a1 + a6;
    io:println(a); // @output 5

    a = a1 + a7;
    io:println(a); // @output 6

    a = a1 + a8;
    io:println(a); // @output 7

    a = a1 + a9;
    io:println(a); // @output -2

    a = a1 + a10;
    io:println(a); // @output 9

    a = a2 + a3;
    io:println(a); // @output -1

    a = a2 + a4;
    io:println(a); // @output 6

    a = a2 + a5;
    io:println(a); // @output -3

    a = a2 + a6;
    io:println(a); // @output 8

    a = a2 + a7;
    io:println(a); // @output 9

    a = a2 + a8;
    io:println(a); // @output 10

    a = a2 + a9;
    io:println(a); // @output 1

    a = a2 + a10;
    io:println(a); // @output 12

    a = a3 + a4;
    io:println(a); // @output 1

    a = a3 + a5;
    io:println(a); // @output -8

    a = a3 + a6;
    io:println(a); // @output 3

    a = a3 + a7;
    io:println(a); // @output 4

    a = a3 + a8;
    io:println(a); // @output 5

    a = a3 + a9;
    io:println(a); // @output -4

    a = a3 + a10;
    io:println(a); // @output 7

    a = a4 + a5;
    io:println(a); // @output -1

    a = a4 + a6;
    io:println(a); // @output 10

    a = a4 + a7;
    io:println(a); // @output 11

    a = a4 + a8;
    io:println(a); // @output 12

    a = a4 + a9;
    io:println(a); // @output 3

    a = a4 + a10;
    io:println(a); // @output 14

    a = a5 + a6;
    io:println(a); // @output 1

    a = a5 + a7;
    io:println(a); // @output 2

    a = a5 + a8;
    io:println(a); // @output 3

    a = a5 + a9;
    io:println(a); // @output -6

    a = a5 + a10;
    io:println(a); // @output 5

    a = a6 + a7;
    io:println(a); // @output 13

    a = a6 + a8;
    io:println(a); // @output 14

    a = a6 + a9;
    io:println(a); // @output 5

    a = a6 + a10;
    io:println(a); // @output 16

    a = a7 + a8;
    io:println(a); // @output 15

    a = a7 + a9;
    io:println(a); // @output 6

    a = a7 + a10;
    io:println(a); // @output 17

    a = a8 + a9;
    io:println(a); // @output 7

    a = a8 + a10;
    io:println(a); // @output 18

    a = a9 + a10;
    io:println(a); // @output 9
}

Test-Case: output
Description: Test integer addition with operands of different subtypes of int.
Labels: additive-expr, byte, DecimalNumber, int, int:Signed16, int:Signed32, int:Signed8, int:Unsigned16,
        int:Unsigned32, int:Unsigned8, module-type-defn, unary-minus, union-type

type IntType1 -1|1|0|2;

function init() {
    int a1 = -1;
    byte a2 = 2;
    int:Signed8 a3 = -3;
    int:Signed16 a4 = 4;
    int:Signed32 a5 = -5;
    int:Unsigned8 a6 = 6;
    int:Unsigned16 a7 = 7;
    int:Unsigned32 a8 = 8;
    IntType1 a9 = -1;
    int:Signed8|int:Signed32 a10 = 10;

    int? a = a1 + a2 + a3 + a4 + a9;
    io:println(a); // @output 1

    a = a + a5 + a6 + a7 + a8 + a10;
    io:println(a); // @output 27
}

Test-Case: output
Description: Test assigning the result of an additive expression to a compatible type.
Labels: additive-expr, any, DecimalNumber, int, string, union-type

function init() {
    int|string a = 10 + 20;
    io:println(a); // @output 30

    any b = 10 + 20;
    io:println(b); // @output 30
}

Test-Case: output
Description: Test assigning the result of an additive expression to var.
Labels: additive-expr, DecimalNumber, is-expr, var

function init() {
    var a = 10 + 20;
    io:println(a); // @output 30
    io:println(a is int); // @output true
}

Test-Case: output
Description: Test using additive expression at module level.
Labels: additive-expr, DecimalNumber, int, is-expr, module-const-decl, module-init-var-decl, var

var a = 10 + 20;

int b = 10 + 20;

const int c = 10 + 20;

function init() {
    io:println(a); // @output 30
    io:println(a is int); // @output true

    io:println(b); // @output 30

    io:println(c); // @output 30
}

Test-Case: panic
Description: Test integer addition overflow at module level.
Labels: additive-expr, DecimalNumber, int, int:MAX_VALUE, module-init-var-decl

int _ = int:MAX_VALUE + 1; // @panic integer overflow

Test-Case: panic
Description: Test integer addition overflow at module level.
Labels: additive-expr, DecimalNumber, int, int:MIN_VALUE, module-init-var-decl

int _ = int:MIN_VALUE + -1; // @panic integer overflow

Test-Case: output
Description: Test integer addition when at least one or both of the operands are positive integers or nil
             of type int?.
Labels: additive-expr, DecimalNumber, int, nil-literal, numeric-nil-lifting, optional-type, value:toBalString

function init() {
    int? a1 = 100;
    int? a2 = 236474;
    int? a3 = 465739921023;
    int? a4 = 849302001021274875;
    int? a5 = 9223372036854775707;
    int? a6 = ();

    io:println(a1 + a1); // @output 200
    io:println(a1 + a2); // @output 236574
    io:println(a1 + a3); // @output 465739921123
    io:println(a1 + a4); // @output 849302001021274975
    io:println(a1 + a5); // @output 9223372036854775807
    io:println((a1 + a6).toBalString()); // @output ()

    io:println(a2 + a1); // @output 236574
    io:println(a2 + a2); // @output 472948
    io:println(a2 + a3); // @output 465740157497
    io:println(a2 + a4); // @output 849302001021511349
    io:println((a2 + a6).toBalString()); // @output ()

    io:println(a3 + a1); // @output 465739921123
    io:println(a3 + a2); // @output 465740157497
    io:println(a3 + a3); // @output 931479842046
    io:println(a3 + a4); // @output 849302466761195898
    io:println((a3 + a6).toBalString()); // @output ()

    io:println(a4 + a1); // @output 849302001021274975
    io:println(a4 + a2); // @output 849302001021511349
    io:println(a4 + a3); // @output 849302466761195898
    io:println((a4 + a6).toBalString()); // @output ()

    io:println(a5 + a1); // @output 9223372036854775807
    io:println((a5 + a6).toBalString()); // @output ()

    io:println((a6 + a1).toBalString()); // @output ()
    io:println((a6 + a2).toBalString()); // @output ()
    io:println((a6 + a3).toBalString()); // @output ()
    io:println((a6 + a4).toBalString()); // @output ()
    io:println((a6 + a5).toBalString()); // @output ()
    io:println((a6 + a6).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer addition when at least one or both of the operands are negative integers or nil
             of type int?.
Labels: additive-expr, DecimalNumber, int, nil-literal, numeric-nil-lifting, optional-type, value:toBalString

function init() {
    int? a1 = -2;
    int? a2 = -3445;
    int? a3 = -4546575656;
    int? a4 = -867583920834534913;
    int? a5 = -9223372036854775806;
    int? a6 = ();

    io:println(a1 + a1); // @output -4
    io:println(a1 + a2); // @output -3447
    io:println(a1 + a3); // @output -4546575658
    io:println(a1 + a4); // @output -867583920834534915
    io:println(a1 + a5); // @output -9223372036854775808
    io:println((a1 + a6).toBalString()); // @output ()

    io:println(a2 + a1); // @output -3447
    io:println(a2 + a2); // @output -6890
    io:println(a2 + a3); // @output -4546579101
    io:println(a2 + a4); // @output -867583920834538358
    io:println((a2 + a6).toBalString()); // @output ()

    io:println(a3 + a1); // @output -4546575658
    io:println(a3 + a2); // @output -4546579101
    io:println(a3 + a3); // @output -9093151312
    io:println(a3 + a4); // @output -867583925381110569
    io:println((a3 + a6).toBalString()); // @output ()

    io:println(a4 + a1); // @output -867583920834534915
    io:println(a4 + a2); // @output -867583920834538358
    io:println(a4 + a3); // @output -867583925381110569
    io:println((a4 + a6).toBalString()); // @output ()

    io:println(a5 + a1); // @output -9223372036854775808
    io:println((a5 + a6).toBalString()); // @output ()

    io:println((a6 + a1).toBalString()); // @output ()
    io:println((a6 + a2).toBalString()); // @output ()
    io:println((a6 + a3).toBalString()); // @output ()
    io:println((a6 + a4).toBalString()); // @output ()
    io:println((a6 + a5).toBalString()); // @output ()
    io:println((a6 + a6).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer addition when one operand is negative integer or nil and the other is a positive integer
             or nil of type int?.
Labels: additive-expr, DecimalNumber, int, nil-literal, numeric-nil-lifting, optional-type, unary-minus,
        value:toBalString

function init() {
    int? a1 = -9223372036854775790;
    int? a2 = -3457;
    int? a3 = -10;
    int? a4 = 10;
    int? a5 = 564732;
    int? a6 = 9223372036854775790;
    int? a7 = ();

    io:println(a1 + a4); // @output -9223372036854775780
    io:println(a1 + a5); // @output -9223372036854211058
    io:println(a1 + a6); // @output 0
    io:println((a1 + a7).toBalString()); // @output ()

    io:println(a2 + a4); // @output -3447
    io:println(a2 + a5); // @output 561275
    io:println(a2 + a6); // @output 9223372036854772333
    io:println((a2 + a7).toBalString()); // @output ()

    io:println(a3 + a4); // @output 0
    io:println(a3 + a5); // @output 564722
    io:println(a3 + a6); // @output 9223372036854775780
    io:println((a3 + a7).toBalString()); // @output ()

    io:println(a4 + a1); // @output -9223372036854775780
    io:println(a4 + a2); // @output -3447
    io:println(a4 + a3); // @output 0
    io:println((a4 + a7).toBalString()); // @output ()

    io:println(a5 + a1); // @output -9223372036854211058
    io:println(a5 + a2); // @output 561275
    io:println(a5 + a3); // @output 564722
    io:println((a5 + a7).toBalString()); // @output ()

    io:println(a6 + a1); // @output 0
    io:println(a6 + a2); // @output 9223372036854772333
    io:println(a6 + a3); // @output 9223372036854775780
    io:println((a6 + a7).toBalString()); // @output ()
}

Test-Case: panic
Description: Test integer addition overflow with integers of type int?.
Labels: additive-expr, DecimalNumber, int, numeric-nil-lifting, optional-type

function init() {
    int? a = 9223372036854775807;
    int? b = 10;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with integers of type int?.
Labels: additive-expr, DecimalNumber, int, numeric-nil-lifting, optional-type

function init() {
    int? a = 10;
    _ = 9223372036854775807 + a; // @panic integer overflow
}

Test-Case: output
Description: Test integer addition when at least one or both of the operands are integers or nil
             of type int:Unsigned8?.
Labels: additive-expr, DecimalNumber, int:Unsigned8, nil-literal, numeric-nil-lifting, optional-type, value:toBalString

function init() {
    int:Unsigned8? a1 = 0;
    int:Unsigned8? a2 = 10;
    int:Unsigned8? a3 = 123;
    int:Unsigned8? a4 = 255;
    int:Unsigned8? a5 = ();

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output 10
    io:println(a1 + a3); // @output 123
    io:println(a1 + a4); // @output 255
    io:println((a1 + a5).toBalString()); // @output ()

    io:println(a2 + a1); // @output 10
    io:println(a2 + a2); // @output 20
    io:println(a2 + a3); // @output 133
    io:println(a2 + a4); // @output 265
    io:println((a2 + a5).toBalString()); // @output ()

    io:println(a3 + a1); // @output 123
    io:println(a3 + a2); // @output 133
    io:println(a3 + a3); // @output 246
    io:println(a3 + a4); // @output 378
    io:println((a3 + a5).toBalString()); // @output ()

    io:println(a4 + a1); // @output 255
    io:println(a4 + a2); // @output 265
    io:println(a4 + a3); // @output 378
    io:println(a4 + a4); // @output 510
    io:println((a4 + a5).toBalString()); // @output ()

    io:println((a5 + a1).toBalString()); // @output ()
    io:println((a5 + a2).toBalString()); // @output ()
    io:println((a5 + a3).toBalString()); // @output ()
    io:println((a5 + a4).toBalString()); // @output ()
    io:println((a5 + a5).toBalString()); // @output ()
}

Test-Case: panic
Description: Test integer addition overflow with int:Unsigned8?.
Labels: additive-expr, DecimalNumber, int, int:Unsigned8, numeric-nil-lifting, optional-type

function init() {
    int:Unsigned8? a = 255;
    int b = 9223372036854775807;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with int:Unsigned8?.
Labels: additive-expr, DecimalNumber, int:Unsigned8, numeric-nil-lifting, optional-type

function init() {
    int:Unsigned8? a = 255;
    _ = a + 9223372036854775807; // @panic integer overflow
}

Test-Case: output
Description: Test integer addition when at least one or both of the operands are integers or nil
             of type byte?.
Labels: additive-expr, byte, DecimalNumber, nil-literal, numeric-nil-lifting, optional-type, value:toBalString

function init() {
    byte? a1 = 0;
    byte? a2 = 10;
    byte? a3 = 123;
    byte? a4 = 255;
    byte? a5 = ();

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output 10
    io:println(a1 + a3); // @output 123
    io:println(a1 + a4); // @output 255
    io:println((a1 + a5).toBalString()); // @output ()

    io:println(a2 + a1); // @output 10
    io:println(a2 + a2); // @output 20
    io:println(a2 + a3); // @output 133
    io:println(a2 + a4); // @output 265
    io:println((a2 + a5).toBalString()); // @output ()

    io:println(a3 + a1); // @output 123
    io:println(a3 + a2); // @output 133
    io:println(a3 + a3); // @output 246
    io:println(a3 + a4); // @output 378
    io:println((a3 + a5).toBalString()); // @output ()

    io:println(a4 + a1); // @output 255
    io:println(a4 + a2); // @output 265
    io:println(a4 + a3); // @output 378
    io:println(a4 + a4); // @output 510
    io:println((a4 + a5).toBalString()); // @output ()

    io:println((a5 + a1).toBalString()); // @output ()
    io:println((a5 + a2).toBalString()); // @output ()
    io:println((a5 + a3).toBalString()); // @output ()
    io:println((a5 + a4).toBalString()); // @output ()
    io:println((a5 + a5).toBalString()); // @output ()
}

Test-Case: panic
Description: Test integer addition overflow with byte?.
Labels: additive-expr, byte, DecimalNumber, int, numeric-nil-lifting, optional-type

function init() {
    byte? a = 255;
    int b = 9223372036854775807;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with byte?.
Labels: additive-expr, byte, DecimalNumber, int

function init() {
    byte? a = 255;
    _ = a + 9223372036854775807; // @panic integer overflow
}

Test-Case: output
Description: Test integer addition when at least one or both of the operands are integers or nil
             of type int:Unsigned16?.
Labels: additive-expr, DecimalNumber, int:Unsigned16, nil-literal, numeric-nil-lifting, optional-type, value:toBalString

function init() {
    int:Unsigned16? a1 = 0;
    int:Unsigned16? a2 = 10;
    int:Unsigned16? a3 = 4323;
    int:Unsigned16? a4 = 65535;
    int:Unsigned16? a5 = ();

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output 10
    io:println(a1 + a3); // @output 4323
    io:println(a1 + a4); // @output 65535
    io:println((a1 + a5).toBalString()); // @output ()

    io:println(a2 + a1); // @output 10
    io:println(a2 + a2); // @output 20
    io:println(a2 + a3); // @output 4333
    io:println(a2 + a4); // @output 65545
    io:println((a2 + a5).toBalString()); // @output ()

    io:println(a3 + a1); // @output 4323
    io:println(a3 + a2); // @output 4333
    io:println(a3 + a3); // @output 8646
    io:println(a3 + a4); // @output 69858
    io:println((a3 + a5).toBalString()); // @output ()

    io:println(a4 + a1); // @output 65535
    io:println(a4 + a2); // @output 65545
    io:println(a4 + a3); // @output 69858
    io:println(a4 + a4); // @output 131070
    io:println((a4 + a5).toBalString()); // @output ()

    io:println((a5 + a1).toBalString()); // @output ()
    io:println((a5 + a2).toBalString()); // @output ()
    io:println((a5 + a3).toBalString()); // @output ()
    io:println((a5 + a4).toBalString()); // @output ()
    io:println((a5 + a5).toBalString()); // @output ()
}

Test-Case: panic
Description: Test integer addition overflow with int:Unsigned16?.
Labels: additive-expr, DecimalNumber, int, int:Unsigned16, numeric-nil-lifting, optional-type

function init() {
    int:Unsigned16? a = 255;
    int b = 9223372036854775807;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with int:Unsigned16?.
Labels: additive-expr, DecimalNumber, int:Unsigned16, numeric-nil-lifting, optional-type

function init() {
    int:Unsigned16? a = 255;
    _ = a + 9223372036854775807; // @panic integer overflow
}

Test-Case: output
Description: Test integer addition when at least one or both of the operands are integers or nil
             of type int:Unsigned32?.
Labels: additive-expr, DecimalNumber, int:Unsigned32, nil-literal, numeric-nil-lifting, optional-type, value:toBalString

function init() {
    int:Unsigned32? a1 = 0;
    int:Unsigned32? a2 = 10;
    int:Unsigned32? a3 = 435261;
    int:Unsigned32? a4 = 4294967295;
    int:Unsigned32? a5 = ();

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output 10
    io:println(a1 + a3); // @output 435261
    io:println(a1 + a4); // @output 4294967295
    io:println((a1 + a5).toBalString()); // @output ()

    io:println(a2 + a1); // @output 10
    io:println(a2 + a2); // @output 20
    io:println(a2 + a3); // @output 435271
    io:println(a2 + a4); // @output 4294967305
    io:println((a2 + a5).toBalString()); // @output ()

    io:println(a3 + a1); // @output 435261
    io:println(a3 + a2); // @output 435271
    io:println(a3 + a3); // @output 870522
    io:println(a3 + a4); // @output 4295402556
    io:println((a3 + a5).toBalString()); // @output ()

    io:println(a4 + a1); // @output 4294967295
    io:println(a4 + a2); // @output 4294967305
    io:println(a4 + a3); // @output 4295402556
    io:println(a4 + a4); // @output 8589934590
    io:println((a4 + a5).toBalString()); // @output ()

    io:println((a5 + a1).toBalString()); // @output ()
    io:println((a5 + a2).toBalString()); // @output ()
    io:println((a5 + a3).toBalString()); // @output ()
    io:println((a5 + a4).toBalString()); // @output ()
    io:println((a5 + a5).toBalString()); // @output ()
}

Test-Case: panic
Description: Test integer addition overflow with int:Unsigned32?.
Labels: additive-expr, DecimalNumber, int:Unsigned32, numeric-nil-lifting, optional-type

function init() {
    int:Unsigned32? a = 3432;
    int b = 9223372036854775807;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with int:Unsigned32?.
Labels: additive-expr, DecimalNumber, int:Unsigned32, numeric-nil-lifting, optional-type

function init() {
    int:Unsigned32? a = 31231;
    _ = a + 9223372036854775807; // @panic integer overflow
}

Test-Case: output
Description: Test integer addition when at least one or both of the operands are positive integers or nil
             of type int:Signed8?.
Labels: additive-expr, DecimalNumber, int:Signed8, nil-literal, numeric-nil-lifting, optional-type, value:toBalString

function init() {
    int:Signed8? a1 = 0;
    int:Signed8? a2 = 2;
    int:Signed8? a3 = 57;
    int:Signed8? a4 = 127;
    int:Signed8? a5 = ();

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output 2
    io:println(a1 + a3); // @output 57
    io:println(a1 + a4); // @output 127
    io:println((a1 + a5).toBalString()); // @output ()

    io:println(a2 + a1); // @output 2
    io:println(a2 + a2); // @output 4
    io:println(a2 + a3); // @output 59
    io:println(a2 + a4); // @output 129
    io:println((a2 + a5).toBalString()); // @output ()

    io:println(a3 + a1); // @output 57
    io:println(a3 + a2); // @output 59
    io:println(a3 + a3); // @output 114
    io:println(a3 + a4); // @output 184
    io:println((a3 + a5).toBalString()); // @output ()

    io:println(a4 + a1); // @output 127
    io:println(a4 + a2); // @output 129
    io:println(a4 + a3); // @output 184
    io:println(a4 + a4); // @output 254
    io:println((a4 + a5).toBalString()); // @output ()

    io:println((a5 + a1).toBalString()); // @output ()
    io:println((a5 + a2).toBalString()); // @output ()
    io:println((a5 + a3).toBalString()); // @output ()
    io:println((a5 + a4).toBalString()); // @output ()
    io:println((a5 + a5).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer addition when at least one or both of the operands are negative integers or nil
             of type int:Signed8?.
Labels: additive-expr, DecimalNumber, int:Signed8, nil-literal, numeric-nil-lifting, optional-type, unary-minus,
        value:toBalString

function init() {
    int:Signed8? a1 = -0;
    int:Signed8? a2 = -2;
    int:Signed8? a3 = -57;
    int:Signed8? a4 = -128;
    int:Signed8? a5 = ();

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output -2
    io:println(a1 + a3); // @output -57
    io:println(a1 + a4); // @output -128
    io:println((a1 + a5).toBalString()); // @output ()

    io:println(a2 + a1); // @output -2
    io:println(a2 + a2); // @output -4
    io:println(a2 + a3); // @output -59
    io:println(a2 + a4); // @output -130
    io:println((a2 + a5).toBalString()); // @output ()

    io:println(a3 + a1); // @output -57
    io:println(a3 + a2); // @output -59
    io:println(a3 + a3); // @output -114
    io:println(a3 + a4); // @output -185
    io:println((a3 + a5).toBalString()); // @output ()

    io:println(a4 + a1); // @output -128
    io:println(a4 + a2); // @output -130
    io:println(a4 + a3); // @output -185
    io:println(a4 + a4); // @output -256
    io:println((a4 + a5).toBalString()); // @output ()

    io:println((a5 + a1).toBalString()); // @output ()
    io:println((a5 + a2).toBalString()); // @output ()
    io:println((a5 + a3).toBalString()); // @output ()
    io:println((a5 + a4).toBalString()); // @output ()
    io:println((a5 + a5).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer addition when one operand is a negative integer or nil and the other is a positive integer
             or nil of type Signed8?.
Labels: additive-expr, DecimalNumber, int:Signed8, nil-literal, numeric-nil-lifting, optional-type, unary-minus,
        value:toBalString

function init() {
    int:Signed8? a1 = -128;
    int:Signed8? a2 = -100;
    int:Signed8? a3 = -1;
    int:Signed8? a4 = 1;
    int:Signed8? a5 = 100;
    int:Signed8? a6 = 127;
    int:Signed8? a7 = ();

    io:println(a1 + a4); // @output -127
    io:println(a1 + a5); // @output -28
    io:println(a1 + a6); // @output -1
    io:println((a1 + a7).toBalString()); // @output ()

    io:println(a2 + a4); // @output -99
    io:println(a2 + a5); // @output 0
    io:println(a2 + a6); // @output 27
    io:println((a2 + a7).toBalString()); // @output ()

    io:println(a3 + a4); // @output 0
    io:println(a3 + a5); // @output 99
    io:println(a3 + a6); // @output 126
    io:println((a3 + a7).toBalString()); // @output ()

    io:println(a4 + a1); // @output -127
    io:println(a4 + a2); // @output -99
    io:println(a4 + a3); // @output 0
    io:println((a4 + a7).toBalString()); // @output ()

    io:println(a5 + a1); // @output -28
    io:println(a5 + a2); // @output 0
    io:println(a5 + a3); // @output 99
    io:println((a5 + a7).toBalString()); // @output ()

    io:println(a6 + a1); // @output -1
    io:println(a6 + a2); // @output 27
    io:println(a6 + a3); // @output 126
    io:println((a6 + a7).toBalString()); // @output ()
}

Test-Case: panic
Description: Test integer addition overflow with integer of type Signed8?.
Labels: additive-expr, DecimalNumber, int:Signed8, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int a = 9223372036854775800;
    int:Signed8? b = 127;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with integer of type Signed8?.
Labels: additive-expr, DecimalNumber, int:Signed8, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int:Signed8? a = 127;
    _ = 9223372036854775800 + a; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with integer of type Signed8?.
Labels: additive-expr, DecimalNumber, int:Signed8, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int a = -9223372036854775806;
    int:Signed8? b = -10;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with integer of type Signed8?.
Labels: additive-expr, DecimalNumber, int:Signed8, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int:Signed8? a = -10;
    _ = -9223372036854775806 + a; // @panic integer overflow
}

Test-Case: output
Description: Test integer addition when at least one or both of the operands are positive integers or nil
             of type int:Signed16?.
Labels: additive-expr, DecimalNumber, int:Signed16, nil-literal, numeric-nil-lifting, optional-type, value:toBalString

function init() {
    int:Signed16? a1 = 0;
    int:Signed16? a2 = 20;
    int:Signed16? a3 = 5463;
    int:Signed16? a4 = 32767;
    int:Signed16? a5 = ();

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output 20
    io:println(a1 + a3); // @output 5463
    io:println(a1 + a4); // @output 32767
    io:println((a1 + a5).toBalString()); // @output ()

    io:println(a2 + a1); // @output 20
    io:println(a2 + a2); // @output 40
    io:println(a2 + a3); // @output 5483
    io:println(a2 + a4); // @output 32787
    io:println((a2 + a5).toBalString()); // @output ()

    io:println(a3 + a1); // @output 5463
    io:println(a3 + a2); // @output 5483
    io:println(a3 + a3); // @output 10926
    io:println(a3 + a4); // @output 38230
    io:println((a3 + a5).toBalString()); // @output ()

    io:println(a4 + a1); // @output 32767
    io:println(a4 + a2); // @output 32787
    io:println(a4 + a3); // @output 38230
    io:println(a4 + a4); // @output 65534
    io:println((a4 + a5).toBalString()); // @output ()

    io:println((a5 + a1).toBalString()); // @output ()
    io:println((a5 + a2).toBalString()); // @output ()
    io:println((a5 + a3).toBalString()); // @output ()
    io:println((a5 + a4).toBalString()); // @output ()
    io:println((a5 + a5).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer addition when at least one or both of the operands are negative integers or nil
             of type int:Signed16?.
Labels: additive-expr, DecimalNumber, int:Signed16, nil-literal, numeric-nil-lifting, optional-type, unary-minus,
        value:toBalString

function init() {
    int:Signed16? a1 = -0;
    int:Signed16? a2 = -20;
    int:Signed16? a3 = -2313;
    int:Signed16? a4 = -32768;
    int:Signed16? a5 = ();

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output -20
    io:println(a1 + a3); // @output -2313
    io:println(a1 + a4); // @output -32768
    io:println((a1 + a5).toBalString()); // @output ()

    io:println(a2 + a1); // @output -20
    io:println(a2 + a2); // @output -40
    io:println(a2 + a3); // @output -2333
    io:println(a2 + a4); // @output -32788
    io:println((a2 + a5).toBalString()); // @output ()

    io:println(a3 + a1); // @output -2313
    io:println(a3 + a2); // @output -2333
    io:println(a3 + a3); // @output -4626
    io:println(a3 + a4); // @output -35081
    io:println((a3 + a5).toBalString()); // @output ()

    io:println(a4 + a1); // @output -32768
    io:println(a4 + a2); // @output -32788
    io:println(a4 + a3); // @output -35081
    io:println(a4 + a4); // @output -65536
    io:println((a4 + a5).toBalString()); // @output ()

    io:println((a5 + a1).toBalString()); // @output ()
    io:println((a5 + a2).toBalString()); // @output ()
    io:println((a5 + a3).toBalString()); // @output ()
    io:println((a5 + a4).toBalString()); // @output ()
    io:println((a5 + a5).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer addition when one operand is a negative integer or nil and the other is a positive integer
             or nil of type Signed16?.
Labels: additive-expr, DecimalNumber, int:Signed16, nil-literal, numeric-nil-lifting, optional-type, unary-minus,
        value:toBalString

function init() {
    int:Signed16? a1 = -32768;
    int:Signed16? a2 = -2344;
    int:Signed16? a3 = -10;
    int:Signed16? a4 = 25;
    int:Signed16? a5 = 4536;
    int:Signed16? a6 = 32767;
    int:Signed16? a7 = ();

    io:println(a1 + a4); // @output -32743
    io:println(a1 + a5); // @output -28232
    io:println(a1 + a6); // @output -1
    io:println((a1 + a7).toBalString()); // @output ()

    io:println(a2 + a4); // @output -2319
    io:println(a2 + a5); // @output 2192
    io:println(a2 + a6); // @output 30423
    io:println((a2 + a7).toBalString()); // @output ()

    io:println(a3 + a4); // @output 15
    io:println(a3 + a5); // @output 4526
    io:println(a3 + a6); // @output 32757
    io:println((a3 + a7).toBalString()); // @output ()

    io:println(a4 + a1); // @output -32743
    io:println(a4 + a2); // @output -2319
    io:println(a4 + a3); // @output 15
    io:println((a4 + a7).toBalString()); // @output ()

    io:println(a5 + a1); // @output -28232
    io:println(a5 + a2); // @output 2192
    io:println(a5 + a3); // @output 4526
    io:println((a5 + a7).toBalString()); // @output ()

    io:println(a6 + a1); // @output -1
    io:println(a6 + a2); // @output 30423
    io:println(a6 + a3); // @output 32757
    io:println((a6 + a7).toBalString()); // @output ()
}

Test-Case: panic
Description: Test integer addition overflow with integer of type Signed16?.
Labels: additive-expr, DecimalNumber, int:Signed16, numeric-nil-lifting, optional-type

function init() {
    int a = 9223372036854775800;
    int:Signed16? b = 3432;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with integer of type Signed8?.
Labels: additive-expr, DecimalNumber, int:Signed16, numeric-nil-lifting, optional-type

function init() {
    int:Signed16? a = 2341;
    _ = 9223372036854775800 + a; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with integer of type Signed16?.
Labels: additive-expr, DecimalNumber, int:Signed16, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int a = -9223372036854775806;
    int:Signed16? b = -1223;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with integer of type Signed16?.
Labels: additive-expr, DecimalNumber, int:Signed16, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int:Signed16? a = -1234;
    _ = -9223372036854775806 + a; // @panic integer overflow
}

Test-Case: output
Description: Test integer addition when at least one or both of the operands are positive integers or nil
             of type int:Signed32?.
Labels: additive-expr, DecimalNumber, int:Signed32, nil-literal, numeric-nil-lifting, optional-type, value:toBalString

function init() {
    int:Signed32? a1 = 0;
    int:Signed32? a2 = 253;
    int:Signed32? a3 = 2324152;
    int:Signed32? a4 = 2147483647;
    int:Signed32? a5 = ();

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output 253
    io:println(a1 + a3); // @output 2324152
    io:println(a1 + a4); // @output 2147483647
    io:println((a1 + a5).toBalString()); // @output ()

    io:println(a2 + a1); // @output 253
    io:println(a2 + a2); // @output 506
    io:println(a2 + a3); // @output 2324405
    io:println(a2 + a4); // @output 2147483900
    io:println((a2 + a5).toBalString()); // @output ()

    io:println(a3 + a1); // @output 2324152
    io:println(a3 + a2); // @output 2324405
    io:println(a3 + a3); // @output 4648304
    io:println(a3 + a4); // @output 2149807799
    io:println((a3 + a5).toBalString()); // @output ()

    io:println(a4 + a1); // @output 2147483647
    io:println(a4 + a2); // @output 2147483900
    io:println(a4 + a3); // @output 2149807799
    io:println(a4 + a4); // @output 4294967294
    io:println((a4 + a5).toBalString()); // @output ()

    io:println((a5 + a1).toBalString()); // @output ()
    io:println((a5 + a2).toBalString()); // @output ()
    io:println((a5 + a3).toBalString()); // @output ()
    io:println((a5 + a4).toBalString()); // @output ()
    io:println((a5 + a5).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer addition when at least one or both of the operands are negative integers or nil
             of type int:Signed32?.
Labels: additive-expr, DecimalNumber, int:Signed32, nil-literal, numeric-nil-lifting, optional-type, unary-minus,
        value:toBalString

function init() {
    int:Signed32? a1 = -0;
    int:Signed32? a2 = -345;
    int:Signed32? a3 = -3425271;
    int:Signed32? a4 = -2147483648;
    int:Signed32? a5 = ();

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output -345
    io:println(a1 + a3); // @output -3425271
    io:println(a1 + a4); // @output -2147483648
    io:println((a1 + a5).toBalString()); // @output ()

    io:println(a2 + a1); // @output -345
    io:println(a2 + a2); // @output -690
    io:println(a2 + a3); // @output -3425616
    io:println(a2 + a4); // @output -2147483993
    io:println((a2 + a5).toBalString()); // @output ()

    io:println(a3 + a1); // @output -3425271
    io:println(a3 + a2); // @output -3425616
    io:println(a3 + a3); // @output -6850542
    io:println(a3 + a4); // @output -2150908919
    io:println((a3 + a5).toBalString()); // @output ()

    io:println(a4 + a1); // @output -2147483648
    io:println(a4 + a2); // @output -2147483993
    io:println(a4 + a3); // @output -2150908919
    io:println(a4 + a4); // @output -4294967296
    io:println((a4 + a5).toBalString()); // @output ()

    io:println((a5 + a1).toBalString()); // @output ()
    io:println((a5 + a2).toBalString()); // @output ()
    io:println((a5 + a3).toBalString()); // @output ()
    io:println((a5 + a4).toBalString()); // @output ()
    io:println((a5 + a5).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer addition when one operand is a negative integer or nil and the other is a positive integer
             or nil of type Signed32?.
Labels: additive-expr, DecimalNumber, int:Signed32, nil-literal, numeric-nil-lifting, optional-type, unary-minus,
        value:toBalString

function init() {
    int:Signed32? a1 = -2147483648;
    int:Signed32? a2 = -23444;
    int:Signed32? a3 = -10;
    int:Signed32? a4 = 25;
    int:Signed32? a5 = 45363;
    int:Signed32? a6 = 2147483647;
    int:Signed32? a7 = ();

    io:println(a1 + a4); // @output -2147483623
    io:println(a1 + a5); // @output -2147438285
    io:println(a1 + a6); // @output -1
    io:println((a1 + a7).toBalString()); // @output ()

    io:println(a2 + a4); // @output -23419
    io:println(a2 + a5); // @output 21919
    io:println(a2 + a6); // @output 2147460203
    io:println((a2 + a7).toBalString()); // @output ()

    io:println(a3 + a4); // @output 15
    io:println(a3 + a5); // @output 45353
    io:println(a3 + a6); // @output 2147483637
    io:println((a3 + a7).toBalString()); // @output ()

    io:println(a4 + a1); // @output -2147483623
    io:println(a4 + a2); // @output -23419
    io:println(a4 + a3); // @output 15
    io:println((a4 + a7).toBalString()); // @output ()

    io:println(a5 + a1); // @output -2147438285
    io:println(a5 + a2); // @output 21919
    io:println(a5 + a3); // @output 45353
    io:println((a5 + a7).toBalString()); // @output ()

    io:println(a6 + a1); // @output -1
    io:println(a6 + a2); // @output 2147460203
    io:println(a6 + a3); // @output 2147483637
    io:println((a6 + a7).toBalString()); // @output ()
}

Test-Case: panic
Description: Test integer addition overflow with integer of type Signed32?.
Labels: additive-expr, DecimalNumber, int:Signed32, numeric-nil-lifting, optional-type

function init() {
    int a = 9223372036854775800;
    int:Signed32? b = 3432;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with integer of type Signed32?.
Labels: additive-expr, DecimalNumber, int:Signed32, numeric-nil-lifting, optional-type

function init() {
    int:Signed32? a = 23434;
    _ = 9223372036854775800 + a; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with integer of type Signed32?.
Labels: additive-expr, DecimalNumber, int:Signed32, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int a = -9223372036854775806;
    int:Signed32? b = -2341231;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with integer of type Signed32?.
Labels: additive-expr, DecimalNumber, int:Signed32, numeric-nil-lifting, optional-type, unary-minus

function init() {
    int:Signed32? a = -34341;
    _ = -9223372036854775806 + a; // @panic integer overflow
}

Test-Case: output
Description: Test integer addition with user-defined subtype of int?.
Labels: additive-expr, DecimalNumber, module-type-defn, nil-literal, numeric-nil-lifting, optional-type, singleton-type,
        unary-minus, union-type, value:toBalString

type IntType1 -2|-1|0|1|2;

type IntType2 int:Unsigned8|int:Signed32;

type IntType3 IntType1|IntType2;

function init() {
    IntType1? a1 = 1;
    IntType1? a2 = -2;
    IntType2? a3 = -324;
    IntType2? a4 = 1123;
    IntType1? a5 = ();
    IntType2? a6 = ();

    io:println(a1 + a1); // @output 2
    io:println(a1 + a2); // @output -1
    io:println(a1 + a3); // @output -323
    io:println(a1 + a4); // @output 1124
    io:println((a1 + a5).toBalString()); // @output ()
    io:println((a1 + a6).toBalString()); // @output ()

    io:println(a2 + a1); // @output -1
    io:println(a2 + a2); // @output -4
    io:println(a2 + a3); // @output -326
    io:println(a2 + a4); // @output 1121
    io:println((a2 + a5).toBalString()); // @output ()
    io:println((a2 + a6).toBalString()); // @output ()

    io:println(a3 + a1); // @output -323
    io:println(a3 + a2); // @output -326
    io:println(a3 + a3); // @output -648
    io:println(a3 + a4); // @output 799
    io:println((a3 + a5).toBalString()); // @output ()
    io:println((a3 + a6).toBalString()); // @output ()

    io:println(a4 + a1); // @output 1124
    io:println(a4 + a2); // @output 1121
    io:println(a4 + a3); // @output 799
    io:println(a4 + a4); // @output 2246
    io:println((a4 + a5).toBalString()); // @output ()
    io:println((a4 + a6).toBalString()); // @output ()

    io:println((a5 + a1).toBalString()); // @output ()
    io:println((a5 + a2).toBalString()); // @output ()
    io:println((a5 + a3).toBalString()); // @output ()
    io:println((a5 + a4).toBalString()); // @output ()
    io:println((a5 + a5).toBalString()); // @output ()
    io:println((a5 + a6).toBalString()); // @output ()

    io:println((a6 + a1).toBalString()); // @output ()
    io:println((a6 + a2).toBalString()); // @output ()
    io:println((a6 + a3).toBalString()); // @output ()
    io:println((a6 + a4).toBalString()); // @output ()
    io:println((a6 + a5).toBalString()); // @output ()
    io:println((a6 + a6).toBalString()); // @output ()
}

Test-Case: output
Description: Test integer addition with user-defined subtype of int?.
Labels: additive-expr, DecimalNumber, module-type-defn, nil-literal, numeric-nil-lifting, optional-type, singleton-type,
        unary-minus, union-type, value:toBalString

type IntType1 -2|-1|0|1|2;

type IntType2 int:Unsigned8|int:Signed32;

type IntType3 IntType1|IntType2;

function init() {
    IntType1? a1 = 1;
    IntType1? a2 = -2;
    IntType2? a3 = -324;
    IntType2? a4 = 1123;
    IntType1? a5 = ();
    IntType2? a6 = ();
    IntType3? a7 = 0;
    IntType3? a8 = -12;
    IntType3? a9 = ();

    io:println(a1 + a7); // @output 1
    io:println(a1 + a8); // @output -11
    io:println((a1 + a9).toBalString()); // @output ()

    io:println(a2 + a7); // @output -2
    io:println(a2 + a8); // @output -14
    io:println((a2 + a9).toBalString()); // @output ()

    io:println(a3 + a7); // @output -324
    io:println(a3 + a8); // @output -336
    io:println((a3 + a9).toBalString()); // @output ()

    io:println(a4 + a7); // @output 1123
    io:println(a4 + a8); // @output 1111
    io:println((a4 + a9).toBalString()); // @output ()

    io:println((a5 + a7).toBalString()); // @output ()
    io:println((a5 + a8).toBalString()); // @output ()
    io:println((a5 + a9).toBalString()); // @output ()

    io:println((a6 + a7).toBalString()); // @output ()
    io:println((a6 + a8).toBalString()); // @output ()
    io:println((a6 + a9).toBalString()); // @output ()

    io:println(a7 + a1); // @output 1
    io:println(a7 + a2); // @output -2
    io:println(a7 + a3); // @output -324
    io:println(a7 + a4); // @output 1123
    io:println((a7 + a5).toBalString()); // @output ()
    io:println((a7 + a6).toBalString()); // @output ()
    io:println(a7 + a7); // @output 0
    io:println(a7 + a8); // @output -12
    io:println((a7 + a9).toBalString()); // @output ()

    io:println(a8 + a1); // @output -11
    io:println(a8 + a2); // @output -14
    io:println(a8 + a3); // @output -336
    io:println(a8 + a4); // @output 1111
    io:println((a8 + a5).toBalString()); // @output ()
    io:println((a8 + a6).toBalString()); // @output ()
    io:println(a8 + a7); // @output -12
    io:println(a8 + a8); // @output -24
    io:println((a8 + a9).toBalString()); // @output ()

    io:println((a9 + a1).toBalString()); // @output ()
    io:println((a9 + a2).toBalString()); // @output ()
    io:println((a9 + a3).toBalString()); // @output ()
    io:println((a9 + a4).toBalString()); // @output ()
}

Test-Case: panic
Description: Test integer addition overflow with user-defined subtype of int.
Labels: additive-expr, DecimalNumber, module-type-defn, numeric-nil-lifting, optional-type, singleton-type, unary-minus,
        union-type

type IntType1 -2|-1|0|1|2;

function init() {
    int a = 9223372036854775807;
    IntType1? b = 2;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with user-defined subtype of int?.
Labels: additive-expr, DecimalNumber, int:Signed32, int:Unsigned8, module-type-defn, numeric-nil-lifting, optional-type,
        union-type

type IntType2 int:Unsigned8|int:Signed32;

function init() {
    int a = 9223372036854775807;
    IntType2? b = 2;
    _ = a + b; // @panic integer overflown
}

Test-Case: panic
Description: Test integer addition overflow with user-defined subtype of int.
Labels: additive-expr, DecimalNumber, int:Signed32, int:Unsigned8, module-type-defn, numeric-nil-lifting, optional-type,
        singleton-type, unary-minus, union-type

type IntType1 -2|-1|0|1|2;

type IntType2 int:Unsigned8|int:Signed32;

type IntType3 IntType1|IntType2;

function init() {
    int a = 9223372036854775807;
    IntType3? b = 2;
    _ = a + b; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with user-defined subtype of int?.
Labels: additive-expr, DecimalNumber, module-type-defn, numeric-nil-lifting, optional-type, singleton-type, unary-minus,
        union-type

type IntType1 -2|-1|0|1|2;

function init() {
    IntType1? a = 2;
    _ = 9223372036854775807 + a; // @panic integer overflow
}

Test-Case: panic
Description: Test integer addition overflow with user-defined subtype of int.
Labels: additive-expr, DecimalNumber, int:Signed32, int:Unsigned8, module-type-defn, numeric-nil-lifting, optional-type,
        union-type

type IntType2 int:Unsigned8|int:Signed32;

function init() {
    IntType2? a = 2;
    _ = a + 9223372036854775807; // @panic integer overflown
}

Test-Case: panic
Description: Test integer addition overflow with user-defined subtype of int?.
Labels: additive-expr, DecimalNumber, int:Signed32, int:Unsigned8, module-type-defn, numeric-nil-lifting, optional-type,
        singleton-type, unary-minus, union-type

type IntType1 -2|-1|0|1|2;

type IntType2 int:Unsigned8|int:Signed32;

type IntType3 IntType1|IntType2;

function init() {
    IntType3? a = 2;
    _ = a + 9223372036854775807; // @panic integer overflow
}

Test-Case: output
Description: Test integer addition with operands of different nullable int subtypes.
Labels: additive-expr, byte, DecimalNumber, int, int:Signed16, int:Signed32, int:Signed8, int:Unsigned16,
        int:Unsigned32, int:Unsigned8, module-type-defn, numeric-nil-lifting, optional-type, unary-minus, union-type

type IntType1 -1|1|0|2;

function init() {
    int? a1 = -1;
    byte? a2 = 2;
    int:Signed8? a3 = -3;
    int:Signed16? a4 = 4;
    int:Signed32? a5 = -5;
    int:Unsigned8? a6 = 6;
    int:Unsigned16? a7 = 7;
    int:Unsigned32? a8 = 8;
    IntType1? a9 = -1;
    int:Signed8|int:Signed32? a10 = 10;

    int? a = a1 + a2;
    io:println(a); // @output 1

    a = a1 + a2;
    io:println(a); // @output 1

    a = a1 + a3;
    io:println(a); // @output -4

    a = a1 + a4;
    io:println(a); // @output 3

    a = a1 + a5;
    io:println(a); // @output -6

    a = a1 + a6;
    io:println(a); // @output 5

    a = a1 + a7;
    io:println(a); // @output 6

    a = a1 + a8;
    io:println(a); // @output 7

    a = a1 + a9;
    io:println(a); // @output -2

    a = a1 + a10;
    io:println(a); // @output 9

    a = a2 + a3;
    io:println(a); // @output -1

    a = a2 + a4;
    io:println(a); // @output 6

    a = a2 + a5;
    io:println(a); // @output -3

    a = a2 + a6;
    io:println(a); // @output 8

    a = a2 + a7;
    io:println(a); // @output 9

    a = a2 + a8;
    io:println(a); // @output 10

    a = a2 + a9;
    io:println(a); // @output 1

    a = a2 + a10;
    io:println(a); // @output 12

    a = a3 + a4;
    io:println(a); // @output 1

    a = a3 + a5;
    io:println(a); // @output -8

    a = a3 + a6;
    io:println(a); // @output 3

    a = a3 + a7;
    io:println(a); // @output 4

    a = a3 + a8;
    io:println(a); // @output 5

    a = a3 + a9;
    io:println(a); // @output -4

    a = a3 + a10;
    io:println(a); // @output 7

    a = a4 + a5;
    io:println(a); // @output -1

    a = a4 + a6;
    io:println(a); // @output 10

    a = a4 + a7;
    io:println(a); // @output 11

    a = a4 + a8;
    io:println(a); // @output 12

    a = a4 + a9;
    io:println(a); // @output 3

    a = a4 + a10;
    io:println(a); // @output 14

    a = a5 + a6;
    io:println(a); // @output 1

    a = a5 + a7;
    io:println(a); // @output 2

    a = a5 + a8;
    io:println(a); // @output 3

    a = a5 + a9;
    io:println(a); // @output -6

    a = a5 + a10;
    io:println(a); // @output 5

    a = a6 + a7;
    io:println(a); // @output 13

    a = a6 + a8;
    io:println(a); // @output 14

    a = a6 + a9;
    io:println(a); // @output 5

    a = a6 + a10;
    io:println(a); // @output 16

    a = a7 + a8;
    io:println(a); // @output 15

    a = a7 + a9;
    io:println(a); // @output 6

    a = a7 + a10;
    io:println(a); // @output 17

    a = a8 + a9;
    io:println(a); // @output 7

    a = a8 + a10;
    io:println(a); // @output 18

    a = a9 + a10;
    io:println(a); // @output 9
}

Test-Case: output
Description: Test integer addition with operands of different nullable int subtypes.
Labels: additive-expr, byte, DecimalNumber, int, int:Signed16, int:Signed32, int:Signed8, int:Unsigned16,
        int:Unsigned32, int:Unsigned8, module-type-defn, numeric-nil-lifting, optional-type, unary-minus, union-type

type IntType1 -1|1|0|2;

function init() {
    int? a1 = -1;
    byte? a2 = 2;
    int:Signed8? a3 = -3;
    int:Signed16? a4 = 4;
    int:Signed32? a5 = -5;
    int:Unsigned8? a6 = 6;
    int:Unsigned16? a7 = 7;
    int:Unsigned32? a8 = 8;
    IntType1? a9 = -1;
    int:Signed8|int:Signed32? a10 = 10;

    int? a = a1 + a2 + a3 + a4 + a9;
    io:println(a); // @output 1

    a = a + a5 + a6 + a7 + a8 + a10;
    io:println(a); // @output 27
}

Test-Case: output
Description: Test integer addition with operands of different nullable and non-nullable int subtypes.
Labels: additive-expr, byte, DecimalNumber, int, int:Signed16, int:Signed32, int:Signed8, int:Unsigned16,
        int:Unsigned32, int:Unsigned8, module-type-defn, numeric-nil-lifting, optional-type, unary-minus, union-type

type IntType1 -1|1|0|2;

function init() {
    int a1 = -1;
    byte? a2 = 2;
    int:Signed8 a3 = -3;
    int:Signed16 a4 = 4;
    int:Signed32? a5 = -5;
    int:Unsigned8 a6 = 6;
    int:Unsigned16? a7 = 7;
    int:Unsigned32 a8 = 8;
    IntType1 a9 = -1;
    int:Signed8|int:Signed32? a10 = 10;

    int? a = a1 + a2 + a3 + a4 + a9;
    io:println(a); // @output 1

    a = a + a5 + a6 + a7 + a8 + a10;
    io:println(a); // @output 27
}

Test-Case: output
Description: Test integer addition with operands of different nullable and non-nullable int subtypes.
Labels: additive-expr, byte, DecimalNumber, HexIntLiteral, int, int:Signed16, int:Signed32, int:Signed8, int:Unsigned16,
        int:Unsigned32, int:Unsigned8, module-type-defn, numeric-nil-lifting, optional-type, unary-minus, union-type

type IntType1 -1|1|0|2;

function init() {
    int? a1 = 0xfd;
    byte a2 = 0x12;
    int:Signed8 a3 = 23;
    int:Signed16? a4 = 0x453f;
    int:Signed32 a5 = 0x104AF;
    int:Unsigned8 a6 = 10;
    int:Unsigned16? a7 = 0xff;
    int:Unsigned32 a8 = 0x56;
    IntType1? a9 = -1;
    int:Signed8|int:Signed32 a10 = 0xceff;

    int? a = a1 + a2 + a3 + a4 + a9;
    io:println(a); // @output 18020

    a = a + a5 + a6 + a7 + a8 + a10;
    io:println(a); // @output 138097
}

Test-Case: output
Description: Test assigning the result of an additive expression to a compatible type.
Labels: additive-expr, any, DecimalNumber, int, optional-type, string, union-type

function init() {
    int? x = 10;
    int|string|() a = x + 20;
    io:println(a); // @output 30
    io:println(a is int); // @output true

    any b = x + 20;
    io:println(b); // @output 30
    io:println(b is int); // @output true
}

Test-Case: output
Description: Test assigning the result of an additive expression to var.
Labels: additive-expr, DecimalNumber, is-expr, nil-literal, optional-type, var

function init() {
    int? x = ();
    int? y = 15;

    var a = x + 20;
    io:println(a.toBalString()); // @output ()
    io:println(a is ()); // @output true

    var b = y + 20;
    io:println(b); // @output 35
    io:println(b is int); // @output true
}

Test-Case: output
Description: Test using additive expression at module level.
Labels: additive-expr, DecimalNumber, int, is-expr, module-const-decl, module-init-var-decl, optional-type,
        value:toBalString, var

int? x = 15;
int? y = ();

var a = x + 20;

int? b = y + 20;

function init() {
    io:println(a); // @output 35
    io:println(a is int); // @output true

    io:println(b.toBalString()); // @output ()
}

Test-Case: output
Description: Test variable reference as integer addition operands.
Labels: additive-expr, DecimalNumber, int, variable-reference-expr

function init() {
    int a = 2;
    int b = a + a;
    io:println(b); // @output 4
}

Test-Case: output
Description: Test field and member access as integer addition operands.
Labels: additive-expr, array-type, DecimalNumber, field-access-expr, int, list-constructor-expr,
        mapping-constructor-expr, member-access-expr, module-type-defn, optional-field-access-expr, record-type

type Record record {
    int x;
    int y?;
};

function init() {
    Record c = {x: 10, y:20};
    int[] d = [30, 40];
    int? e = c.x + d[0] + c?.y;
    io:println(e); // @output 60
}

Test-Case: output
Description: Test function and method call as integer addition operands.
Labels: additive-expr, DecimalNumber, defaultable-param, explicit-new-expr, function-call-expr, int, method-call-expr,
        module-class-defn

class Class {
    function getInt(int a) returns int {
        return 60 + a;
    }
}

function init() {
    Class f = new Class();
    int g = f.getInt(12 + 20) + getInt();
    io:println(g); // @output 137
}

function getInt(int a = 10 + 30) returns int {
    return 2 + 3 + a;
}

Test-Case: output
Description: Test type cast expression as integer addition operands.
Labels: additive-expr, DecimalNumber, int, type-cast-expr

function init() {
    int i = <int> 6 + 7;
    io:println(i); // @output 13
}

Test-Case: output
Description: Test unary expressions as integer addition operands.
Labels: additive-expr, DecimalNumber, int, unary-complement, unary-minus, unary-plus

function init() {
    int a1 = +4 + -3;
    io:println(a1); // @output 1

    int a2 = -(-2 + 5);
    io:println(a2); // @output -3

    int a3 = ~(2 + 5);
    io:println(a3); // @output -8

    int a4 = ~2 + 5;
    io:println(a4); // @output 2
}

Test-Case: output
Description: Test additive expression as integer addition operands.
Labels: additive-expr, DecimalNumber, int

function init() {
    int a = 2 + 404 - 10 + 4;
    io:println(a); // @output 400
}

Test-Case: output
Description: Test additive expression as integer addition operands.
Labels: additive-expr, DecimalNumber, int

function init() {
    int a = (400 - 2) + (10 + 4);
    io:println(a); // @output 412
}

Test-Case: output
Description: Test precedence and associativity with additive expression.
Labels: additive-expr, binary-bitwise-expr, DecimalNumber, int, multiplicative-expr

function init() {
    int a = 2 + 3 * 5 / 12 & 1 - 2 % 3 | 2 + 12;
    io:println(a); // @output 15
}

Test-Case: output
Description: Test multiplicative expressions as integer addition operands.
Labels: additive-expr, DecimalNumber, int, multiplicative-expr

function init() {
    int a = (1 * 2) + (32 / 4);
    io:println(a); // @output 10
}

Test-Case: output
Description: Test binary bitwise expressions as integer addition operands.
Labels: additive-expr, binary-bitwise-expr, DecimalNumber, int

function init() {
    int a = (2 & 6) + (2 ^ 6);
    io:println(a); // @output 6
}

Test-Case: output
Description: Test checking expressions as integer addition operands.
Labels: additive-expr, check, checkpanic, DecimalNumber, error, int, optional-type, union-type

function init() returns error? {
    int|error a = 12;
    int c = check a + checkpanic a;
    io:println(c); // @output 24
}

Test-Case: output
Description: Test let expression in integer addition operands.
Labels: additive-expr, DecimalNumber, int, let-expr

function init() {
    int h = (let int h1 = 10 + 15 in h1) + 25;
    io:println(h); // @output 50
}

Test-Case: output
Description: Test shift expressions as integer addition operands.
Labels: additive-expr, DecimalNumber, int, shift-expr

function init() {
    int p = (1 << 2) + (100 >> 4);
    io:println(p); // @output 10
}

Test-Case: output
Description: Test conditional expressions as integer addition operands.
Labels: additive-expr, conditional-expr, DecimalNumber, error, int, nil-literal, optional-type, union-type

function init() {
    int|error a = 25;
    int? b = ();
    int c = (a is error ? 5 : a) + (b ?: 10);
    io:println(c); // @output 35
}

Test-Case: output
Description: Test lang.int constants as integer addition operands.
Labels: additive-expr, int, int:MIN_VALUE, int:UNSIGNED8_MAX_VALUE

function init() {
    int a = int:UNSIGNED8_MAX_VALUE + int:MIN_VALUE;
    io:println(a); // @output -9223372036854775553
}

Test-Case: error
Description: Test assigning the result of integer addition to an incompatible type.
Labels: additive-expr, decimal, DecimalNumber, float, function-call-expr, int, var

function errorFunction(int a, int b) {
    float _ = a + b; // @error static type of additive-expr with int operands is int

    var a1 = 1 + a;
    decimal _ = a1; // @error static type of additive-expr with int operands is int

    var a2 = getInt(12 + 2) + b;
    float _ = a2; // @error static type of additive-expr with int operands is int
}

function getInt(int i) returns int {
    return i + 1;
}

Test-Case: error
Description: Test assigning the result of integer addition with int? to an incompatible type.
Labels: additive-expr, DecimalNumber, function-call-expr, int, numeric-nil-lifting, optional-type

function errorFunction(int a, int? b) {
    int _ = a + b; // @error static type of additive-expr with at least one int? operand is int?
    int _ = getOptionalInt(1 + 2) + b; // @error static type of additive-expr with at least one int? operand is int?
    int _ = b + getOptionalInt(1 + 2); // @error static type of additive-expr with at least one int? operand is int?
    int _ = b + getInt(1); // @error static type of additive-expr with at least one int? operand is int?
}

function getInt(int i) returns int {
    return i + 1;
}

function getOptionalInt(int? i) returns int? {
    return i + 1;
}

Test-Case: error
Description: Test assigning the result of integer addition to a subtype of int.
Labels: additive-expr, byte, int:Signed16, int:Signed32, int:Signed8, int:Unsigned16, int:Unsigned32, int:Unsigned8,
        module-type-defn

type Ints 1|2;

function errorFunction(int:Signed8 a, int:Signed16 b, int:Signed32 c, int:Unsigned8 d, int:Unsigned16 e,
                     int:Unsigned32 f, byte g, Ints h) {
    int:Signed8 _ = a + a; // @error static type of additive-expr with operands of int subtypes is int
    int:Signed16 _ = b + b; // @error static type of additive-expr with operands of int subtypes is int
    int:Signed32 _ = c + b; // @error static type of additive-expr with operands of int subtypes is int
    int:Unsigned8 _ = d + d; // @error static type of additive-expr with operands of int subtypes is int
    byte _ = b + g; // @error static type of additive-expr with operands of int subtypes is int
    int:Unsigned16 _ = e + e; // @error static type of additive-expr with operands of int subtypes is int
    int:Unsigned32 _ = f + g; // @error static type of additive-expr with operands of int subtypes is int
    Ints _ = a + h; // @error static type of additive-expr with operands of int subtypes is int
}

Test-Case: error
Description: Test assigning the result of addition of optional integers to a subtype of int?.
Labels: additive-expr, byte, int:Signed16, int:Signed32, int:Signed8, int:Unsigned16, int:Unsigned32, int:Unsigned8,
        module-type-defn, optional-type

type Ints 1|2;

function errorFunction(int:Signed8? a, int:Signed16? b, int:Signed32? c, int:Unsigned8? d, int:Unsigned16? e,
                     int:Unsigned32? f, byte? g, Ints? h) {
    int:Signed8? _ = a + a; // @error static type of additive-expr with at least one operand of subtype of int? is int?
    int:Signed16? _ = b + b; // @error static type of additive-expr with at least one operand of subtype of int? is int?
    int:Signed32? _ = c + b; // @error static type of additive-expr with at least one operand of subtype of int? is int?
    int:Unsigned8? _ = d + d; // @error static type of additive-expr with at least one operand of subtype of int? is int?
    byte? _ = b + g; // @error static type of additive-expr with at least one operand of subtype of int? is int?
    int:Unsigned16? _ = e + e; // @error static type of additive-expr with at least one operand of subtype of int? is int?
    int:Unsigned32? _ = f + g; // @error static type of additive-expr with at least one operand of subtype of int? is int?
    Ints? _ = a + h; // @error static type of additive-expr with at least one operand of subtype of int? is int?

}
