Test-Case: output
Description: Test decimal addition with positive decimals.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, DecimalNumber, FloatingPointTypeSuffix, unary-plus

function init() {
    decimal a1 = +0.0d;
    decimal a2 = 4.9E-324;
    decimal a3 = 124;
    decimal a4 = 75647.096547382d;
    decimal a5 = +4657382.1234;
    decimal a6 = 1.7976931348623157E308;
    decimal a7 = 25.0E1742d;

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output 4.9E-324
    io:println(a1 + a3); // @output 124
    io:println(a1 + a4); // @output 75647.096547382
    io:println(a1 + a5); // @output 4657382.1234
    io:println(a1 + a6); // @output 1.7976931348623157E+308
    io:println(a1 + a7); // @output 2.50E+1743

    io:println(a2 + a1); // @output 4.9E-324
    io:println(a2 + a2); // @output 9.8E-324
    io:println(a2 + a3); // @output 124.0000000000000000000000000000000
    io:println(a2 + a4); // @output 75647.09654738200000000000000000000
    io:println(a2 + a5); // @output 4657382.123400000000000000000000000
    io:println(a2 + a6); // @output 1.797693134862315700000000000000000E+308
    io:println(a2 + a7); // @output 2.500000000000000000000000000000000E+1743

    io:println(a3 + a1); // @output 124
    io:println(a3 + a2); // @output 124.0000000000000000000000000000000
    io:println(a3 + a3); // @output 248
    io:println(a3 + a4); // @output 75771.096547382
    io:println(a3 + a5); // @output 4657506.1234
    io:println(a3 + a6); // @output 1.797693134862315700000000000000000E+308
    io:println(a3 + a7); // @output 2.500000000000000000000000000000000E+1743

    io:println(a4 + a1); // @output 75647.096547382
    io:println(a4 + a2); // @output 75647.09654738200000000000000000000
    io:println(a4 + a3); // @output 75771.096547382
    io:println(a4 + a4); // @output 151294.193094764
    io:println(a4 + a5); // @output 4733029.219947382
    io:println(a4 + a6); // @output 1.797693134862315700000000000000000E+308
    io:println(a4 + a7); // @output 2.500000000000000000000000000000000E+1743

    io:println(a5 + a1); // @output 4657382.1234
    io:println(a5 + a2); // @output 4657382.123400000000000000000000000
    io:println(a5 + a3); // @output 4657506.1234
    io:println(a5 + a4); // @output 4733029.219947382
    io:println(a5 + a5); // @output 9314764.2468
    io:println(a5 + a6); // @output 1.797693134862315700000000000000000E+308
    io:println(a5 + a7); // @output 2.500000000000000000000000000000000E+1743

    io:println(a6 + a1); // @output 1.7976931348623157E+308
    io:println(a6 + a2); // @output 1.797693134862315700000000000000000E+308
    io:println(a6 + a3); // @output 1.797693134862315700000000000000000E+308
    io:println(a6 + a4); // @output 1.797693134862315700000000000000000E+308
    io:println(a6 + a5); // @output 1.797693134862315700000000000000000E+308
    io:println(a6 + a6); // @output 3.5953862697246314E+308
    io:println(a6 + a7); // @output 2.500000000000000000000000000000000E+1743

    io:println(a7 + a1); // @output 2.50E+1743
    io:println(a7 + a2); // @output 2.500000000000000000000000000000000E+1743
    io:println(a7 + a3); // @output 2.500000000000000000000000000000000E+1743
    io:println(a7 + a4); // @output 2.500000000000000000000000000000000E+1743
    io:println(a7 + a5); // @output 2.500000000000000000000000000000000E+1743
    io:println(a7 + a6); // @output 2.500000000000000000000000000000000E+1743
    io:println(a7 + a7); // @output 5.00E+1743
}

Test-Case: output
Description: Test decimal addition with negative decimals.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, DecimalNumber, FloatingPointTypeSuffix, unary-minus

function init() {
    decimal a1 = -0.0d;
    decimal a2 = -4.9E-324;
    decimal a3 = -124;
    decimal a4 = -75647.096547382d;
    decimal a5 = -4657382.1234;
    decimal a6 = -1.7976931348623157E308;
    decimal a7 = -25.0E1742d;

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output -4.9E-324
    io:println(a1 + a3); // @output -124
    io:println(a1 + a4); // @output -75647.096547382
    io:println(a1 + a5); // @output -4657382.1234
    io:println(a1 + a6); // @output -1.7976931348623157E+308
    io:println(a1 + a7); // @output -2.50E+1743

    io:println(a2 + a1); // @output -4.9E-324
    io:println(a2 + a2); // @output -9.8E-324
    io:println(a2 + a3); // @output -124.0000000000000000000000000000000
    io:println(a2 + a4); // @output -75647.09654738200000000000000000000
    io:println(a2 + a5); // @output -4657382.123400000000000000000000000
    io:println(a2 + a6); // @output -1.797693134862315700000000000000000E+308
    io:println(a2 + a7); // @output -2.500000000000000000000000000000000E+1743

    io:println(a3 + a1); // @output -124
    io:println(a3 + a2); // @output -124.0000000000000000000000000000000
    io:println(a3 + a3); // @output -248
    io:println(a3 + a4); // @output -75771.096547382
    io:println(a3 + a5); // @output -4657506.1234
    io:println(a3 + a6); // @output -1.797693134862315700000000000000000E+308
    io:println(a3 + a7); // @output -2.500000000000000000000000000000000E+1743

    io:println(a4 + a1); // @output -75647.096547382
    io:println(a4 + a2); // @output -75647.09654738200000000000000000000
    io:println(a4 + a3); // @output -75771.096547382
    io:println(a4 + a4); // @output -151294.193094764
    io:println(a4 + a5); // @output -4733029.219947382
    io:println(a4 + a6); // @output -1.797693134862315700000000000000000E+308
    io:println(a4 + a7); // @output -2.500000000000000000000000000000000E+1743

    io:println(a5 + a1); // @output -4657382.1234
    io:println(a5 + a2); // @output -4657382.123400000000000000000000000
    io:println(a5 + a3); // @output -4657506.1234
    io:println(a5 + a4); // @output -4733029.219947382
    io:println(a5 + a5); // @output -9314764.2468
    io:println(a5 + a6); // @output -1.797693134862315700000000000000000E+308
    io:println(a5 + a7); // @output -2.500000000000000000000000000000000E+1743

    io:println(a6 + a1); // @output -1.7976931348623157E+308
    io:println(a6 + a2); // @output -1.797693134862315700000000000000000E+308
    io:println(a6 + a3); // @output -1.797693134862315700000000000000000E+308
    io:println(a6 + a4); // @output -1.797693134862315700000000000000000E+308
    io:println(a6 + a5); // @output -1.797693134862315700000000000000000E+308
    io:println(a6 + a6); // @output -3.5953862697246314E+308
    io:println(a6 + a7); // @output -2.500000000000000000000000000000000E+1743

    io:println(a7 + a1); // @output -2.50E+1743
    io:println(a7 + a2); // @output -2.500000000000000000000000000000000E+1743
    io:println(a7 + a3); // @output -2.500000000000000000000000000000000E+1743
    io:println(a7 + a4); // @output -2.500000000000000000000000000000000E+1743
    io:println(a7 + a5); // @output -2.500000000000000000000000000000000E+1743
    io:println(a7 + a6); // @output -2.500000000000000000000000000000000E+1743
    io:println(a7 + a7); // @output -5.00E+1743
}

Test-Case: output
Description: Test decimal addition when one operand is negative and the other is positive decimal.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, FloatingPointTypeSuffix, unary-minus, unary-plus

function init() {
    decimal a1 = -25.0E1742;
    decimal a2 = -2.345e02;
    decimal a3 = -12423.23;
    decimal a4 = -10.746d;
    decimal a5 = 30.25453213;
    decimal a6 = +235462;
    decimal a7 = 2.345e02;
    decimal a8 = 25.0E1742d;

    io:println(a1 + a5); // @output -2.500000000000000000000000000000000E+1743
    io:println(a1 + a6); // @output -2.500000000000000000000000000000000E+1743
    io:println(a1 + a7); // @output -2.500000000000000000000000000000000E+1743
    io:println(a1 + a8); // @output 0

    io:println(a2 + a5); // @output -204.24546787
    io:println(a2 + a6); // @output 235227.5
    io:println(a2 + a7); // @output 0
    io:println(a2 + a8); // @output 2.500000000000000000000000000000000E+1743

    io:println(a3 + a5); // @output -12392.97546787
    io:println(a3 + a6); // @output 223038.77
    io:println(a3 + a7); // @output -12188.73
    io:println(a3 + a8); // @output 2.500000000000000000000000000000000E+1743

    io:println(a4 + a5); // @output 19.50853213
    io:println(a4 + a6); // @output 235451.254
    io:println(a4 + a7); // @output 223.754
    io:println(a4 + a8); // @output 2.500000000000000000000000000000000E+1743

    io:println(a5 + a1); // @output -2.500000000000000000000000000000000E+1743
    io:println(a5 + a2); // @output -204.24546787
    io:println(a5 + a3); // @output -12392.97546787
    io:println(a5 + a4); // @output 19.50853213

    io:println(a6 + a1); // @output -2.500000000000000000000000000000000E+1743
    io:println(a6 + a2); // @output 235227.5
    io:println(a6 + a3); // @output 223038.77
    io:println(a6 + a4); // @output 235451.254

    io:println(a7 + a1); // @output -2.500000000000000000000000000000000E+1743
    io:println(a7 + a2); // @output 0
    io:println(a7 + a3); // @output -12188.73
    io:println(a7 + a4); // @output 223.754

    io:println(a8 + a1); // @output 0
    io:println(a8 + a2); // @output 2.500000000000000000000000000000000E+1743
    io:println(a8 + a3); // @output 2.500000000000000000000000000000000E+1743
    io:println(a8 + a4); // @output 2.500000000000000000000000000000000E+1743
}

Test-Case: output
Description: Test decimal addition with floating point literals.
Labels: additive-expr, DecimalFloatingPointNumber, FloatingPointTypeSuffix, unary-minus, unary-plus

function init() {
    io:println(-25.0E1742d + -25.0E1742d); // @output -5.00E+1743
    io:println(-25.0E1742d + -2.345e02d); // @output -2.500000000000000000000000000000000E+1743
    io:println(-25.0E1742d + -12423.23d); // @output -2.500000000000000000000000000000000E+1743
    io:println(-25.0E1742d + -10.746d); // @output -2.500000000000000000000000000000000E+1743
    io:println(-25.0E1742d + 30.25453213d); // @output -2.500000000000000000000000000000000E+1743
    io:println(-25.0E1742d + +235462d); // @output -2.500000000000000000000000000000000E+1743
    io:println(-25.0E1742d + 2.345e02d); // @output -2.500000000000000000000000000000000E+1743
    io:println(-25.0E1742d + 25.0E1742d); // @output 0

    io:println(-2.345e02d + -2.345e02d); // @output -469.0
    io:println(-2.345e02d + -12423.23d); // @output -12657.73
    io:println(-2.345e02d + -10.746d); // @output -245.246
    io:println(-2.345e02d + 30.25453213d); // @output -204.24546787
    io:println(-2.345e02d + +235462d); // @output 235227.5
    io:println(-2.345e02d + 2.345e02d); // @output 0
    io:println(-2.345e02d + 25.0E1742d); // @output 2.500000000000000000000000000000000E+1743

    io:println(-12423.23d + -12423.23d); // @output -24846.46
    io:println(-12423.23d + -10.746d); // @output -12433.976
    io:println(-12423.23d + 30.25453213d); // @output -12392.97546787
    io:println(-12423.23d + +235462d); // @output 223038.77
    io:println(-12423.23d + 2.345e02d); // @output -12188.73
    io:println(-12423.23d + 25.0E1742d); // @output 2.500000000000000000000000000000000E+1743

    io:println(-10.746d + -10.746d); // @output -21.492
    io:println(-10.746d + 30.25453213d); // @output 19.50853213
    io:println(-10.746d + +235462d); // @output 235451.254
    io:println(-10.746d + 2.345e02d); // @output 223.754
    io:println(-10.746d + 25.0E1742d); // @output 2.500000000000000000000000000000000E+1743

    io:println(30.25453213d + 30.25453213d); // @output 60.50906426
    io:println(30.25453213d + +235462d); // @output 235492.25453213
    io:println(30.25453213d + 2.345e02d); // @output 264.75453213
    io:println(30.25453213d + 25.0E1742d); // @output 2.500000000000000000000000000000000E+1743

    io:println(+235462d + +235462d); // @output 470924
    io:println(+235462d + 2.345e02d); // @output 235696.5
    io:println(+235462d + 25.0E1742d); // @output 2.500000000000000000000000000000000E+1743

    io:println(2.345e02d + 2.345e02d); // @output 469.0
    io:println(2.345e02d + 25.0E1742d); // @output 2.500000000000000000000000000000000E+1743

    io:println(25.0E1742d + 25.0E1742d); // @output 5.00E+1743
}

Test-Case: output
Description: Test decimal addition with user-defined subtypes of decimal.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, DecimalNumber, FloatingPointTypeSuffix, module-const-decl,
        module-type-defn, singleton-type, unary-minus, union-type

const decimal A = 1.25;
const decimal B = 2.0;

type DecimalType1 -2d|-1d|0d|1d|2d;

type DecimalType2 A|B;

type DecimalType3 DecimalType1|DecimalType2;

function init() {
    A a1 = 1.25d;
    DecimalType1 a2 = -1;
    DecimalType2 a3 = 2d;
    DecimalType3 a4 = -2.0;
    decimal a5 = 25.0E1742d;
    decimal a6 = -25.0E1742d;

    decimal a = a1 + a2;
    io:println(a); // @output 0.25

    a = a1 + a3;
    io:println(a); // @output 3.25

    a = a1 + a4;
    io:println(a); // @output -0.75

    a = a1 + a5;
    io:println(a); // @output 2.500000000000000000000000000000000E+1743

    a = a1 + a6;
    io:println(a); // @output -2.500000000000000000000000000000000E+1743

    a = a1 + 10;
    io:println(a); // @output 11.25

    a = a2 + a3;
    io:println(a); // @output 1

    a = a2 + a4;
    io:println(a); // @output -3.0

    a = a2 + a5;
    io:println(a); // @output 2.500000000000000000000000000000000E+1743

    a = a2 + a6;
    io:println(a); // @output -2.500000000000000000000000000000000E+1743

    a = a3 + a4;
    io:println(a); // @output 0

    a = a3 + a5;
    io:println(a); // @output 2.500000000000000000000000000000000E+1743

    a = a3 + a6;
    io:println(a); // @output -2.500000000000000000000000000000000E+1743
}

Test-Case: output
Description: Test decimal addition with user-defined subtypes of decimal.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, DecimalNumber, FloatingPointTypeSuffix, module-const-decl,
        module-type-defn, singleton-type, union-type

const decimal A = 1.25;
const decimal B = 2.0;

type DecimalType1 A|B;

function init() {
    A a = 1.25;
    decimal|DecimalType1 b = 25346.45d;

    decimal x = a + b;
    io:println(x); // @output 25347.70
}

Test-Case: output
Description: Test whether contextually expected type of operands is decimal when the contextually expected
             type of the additive-expr is decimal.
Labels: additive-expr, decimal, DecimalNumber

function init() {
    decimal a = 10 + 20;
    io:println(a); // @output 30
}

Test-Case: output
Description: Test assigning the result of an additive expression to a compatible type.
Labels: additive-expr, any, decimal, DecimalFloatingPointNumber, FloatingPointTypeSuffix, is-expr, string, union-type

function init() {
    decimal|string a = 10d + 20d;
    io:println(a); // @output 30
    io:println(a is decimal); // @output true

    any b = 10d + 20d;
    io:println(b); // @output 30
    io:println(a is decimal); // @output true
}

Test-Case: output
Description: Test assigning the result of an additive expression to var.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, FloatingPointTypeSuffix, is-expr, var

function init() {
    var a = 10d + 20d;
    io:println(a); // @output 30
    io:println(a is decimal); // @output true
}

Test-Case: output
Description: Test using additive expression at module level.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, FloatingPointTypeSuffix, is-expr, module-const-decl,
        module-init-var-decl, var

var a = 10d + 20d;

decimal b = 10d + 20d;

const decimal c = 10d + 20d;

function init() {
    io:println(a); // @output 30
    io:println(a is decimal); // @output true

    io:println(b); // @output 30

    io:println(c); // @output 30
}

Test-Case: output
Description: Test decimal addition when at least one or both of the operands are positive decimals or nil
             of type decimal?.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, DecimalNumber, FloatingPointTypeSuffix, nil-literal,
        numeric-nil-lifting, optional-type, value:toBalString

function init() {
    decimal? a1 = +0.0d;
    decimal? a2 = 4.9E-324;
    decimal? a3 = 124;
    decimal? a4 = 75647.096547382d;
    decimal? a5 = +4657382.1234;
    decimal? a6 = 1.7976931348623157E308;
    decimal? a7 = 25.0E1742d;
    decimal? a8 = ();

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output 4.9E-324
    io:println(a1 + a3); // @output 124
    io:println(a1 + a4); // @output 75647.096547382
    io:println(a1 + a5); // @output 4657382.1234
    io:println(a1 + a6); // @output 1.7976931348623157E+308
    io:println(a1 + a7); // @output 2.50E+1743
    io:println((a1 + a8).toBalString()); // @output ()

    io:println(a2 + a1); // @output 4.9E-324
    io:println(a2 + a2); // @output 9.8E-324
    io:println(a2 + a3); // @output 124.0000000000000000000000000000000
    io:println(a2 + a4); // @output 75647.09654738200000000000000000000
    io:println(a2 + a5); // @output 4657382.123400000000000000000000000
    io:println(a2 + a6); // @output 1.797693134862315700000000000000000E+308
    io:println(a2 + a7); // @output 2.500000000000000000000000000000000E+1743
    io:println((a2 + a8).toBalString()); // @output ()

    io:println(a3 + a1); // @output 124
    io:println(a3 + a2); // @output 124.0000000000000000000000000000000
    io:println(a3 + a3); // @output 248
    io:println(a3 + a4); // @output 75771.096547382
    io:println(a3 + a5); // @output 4657506.1234
    io:println(a3 + a6); // @output 1.797693134862315700000000000000000E+308
    io:println(a3 + a7); // @output 2.500000000000000000000000000000000E+1743
    io:println((a3 + a8).toBalString()); // @output ()

    io:println(a4 + a1); // @output 75647.096547382
    io:println(a4 + a2); // @output 75647.09654738200000000000000000000
    io:println(a4 + a3); // @output 75771.096547382
    io:println(a4 + a4); // @output 151294.193094764
    io:println(a4 + a5); // @output 4733029.219947382
    io:println(a4 + a6); // @output 1.797693134862315700000000000000000E+308
    io:println(a4 + a7); // @output 2.500000000000000000000000000000000E+1743
    io:println((a4 + a8).toBalString()); // @output ()

    io:println(a5 + a1); // @output 4657382.1234
    io:println(a5 + a2); // @output 4657382.123400000000000000000000000
    io:println(a5 + a3); // @output 4657506.1234
    io:println(a5 + a4); // @output 4733029.219947382
    io:println(a5 + a5); // @output 9314764.2468
    io:println(a5 + a6); // @output 1.797693134862315700000000000000000E+308
    io:println(a5 + a7); // @output 2.500000000000000000000000000000000E+1743
    io:println((a5 + a8).toBalString()); // @output ()

    io:println(a6 + a1); // @output 1.7976931348623157E+308
    io:println(a6 + a2); // @output 1.797693134862315700000000000000000E+308
    io:println(a6 + a3); // @output 1.797693134862315700000000000000000E+308
    io:println(a6 + a4); // @output 1.797693134862315700000000000000000E+308
    io:println(a6 + a5); // @output 1.797693134862315700000000000000000E+308
    io:println(a6 + a6); // @output 3.5953862697246314E+308
    io:println(a6 + a7); // @output 2.500000000000000000000000000000000E+1743
    io:println((a6 + a8).toBalString()); // @output ()

    io:println(a7 + a1); // @output 2.50E+1743
    io:println(a7 + a2); // @output 2.500000000000000000000000000000000E+1743
    io:println(a7 + a3); // @output 2.500000000000000000000000000000000E+1743
    io:println(a7 + a4); // @output 2.500000000000000000000000000000000E+1743
    io:println(a7 + a5); // @output 2.500000000000000000000000000000000E+1743
    io:println(a7 + a6); // @output 2.500000000000000000000000000000000E+1743
    io:println(a7 + a7); // @output 5.00E+1743
    io:println((a7 + a8).toBalString()); // @output ()

    io:println((a8 + a8).toBalString()); // @output ()
}

Test-Case: output
Description: Test decimal addition when at least one or both of the operands are negative decimals or nil
             of type decimal?.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, DecimalNumber, FloatingPointTypeSuffix, nil-literal,
        numeric-nil-lifting, optional-type, unary-minus, value:toBalString

function init() {
    decimal? a1 = -0.0d;
    decimal? a2 = -4.9E-324;
    decimal? a3 = -124;
    decimal? a4 = -75647.096547382d;
    decimal? a5 = -4657382.1234;
    decimal? a6 = -1.7976931348623157E308;
    decimal? a7 = -25.0E1742d;
    decimal? a8 = ();

    io:println(a1 + a1); // @output 0
    io:println(a1 + a2); // @output -4.9E-324
    io:println(a1 + a3); // @output -124
    io:println(a1 + a4); // @output -75647.096547382
    io:println(a1 + a5); // @output -4657382.1234
    io:println(a1 + a6); // @output -1.7976931348623157E+308
    io:println(a1 + a7); // @output -2.50E+1743
    io:println((a1 + a8).toBalString()); // @output ()

    io:println(a2 + a1); // @output -4.9E-324
    io:println(a2 + a2); // @output -9.8E-324
    io:println(a2 + a3); // @output -124.0000000000000000000000000000000
    io:println(a2 + a4); // @output -75647.09654738200000000000000000000
    io:println(a2 + a5); // @output -4657382.123400000000000000000000000
    io:println(a2 + a6); // @output -1.797693134862315700000000000000000E+308
    io:println(a2 + a7); // @output -2.500000000000000000000000000000000E+1743
    io:println((a2 + a8).toBalString()); // @output ()

    io:println(a3 + a1); // @output -124
    io:println(a3 + a2); // @output -124.0000000000000000000000000000000
    io:println(a3 + a3); // @output -248
    io:println(a3 + a4); // @output -75771.096547382
    io:println(a3 + a5); // @output -4657506.1234
    io:println(a3 + a6); // @output -1.797693134862315700000000000000000E+308
    io:println(a3 + a7); // @output -2.500000000000000000000000000000000E+1743
    io:println((a3 + a8).toBalString()); // @output ()

    io:println(a4 + a1); // @output -75647.096547382
    io:println(a4 + a2); // @output -75647.09654738200000000000000000000
    io:println(a4 + a3); // @output -75771.096547382
    io:println(a4 + a4); // @output -151294.193094764
    io:println(a4 + a5); // @output -4733029.219947382
    io:println(a4 + a6); // @output -1.797693134862315700000000000000000E+308
    io:println(a4 + a7); // @output -2.500000000000000000000000000000000E+1743
    io:println((a4 + a8).toBalString()); // @output ()

    io:println(a5 + a1); // @output -4657382.1234
    io:println(a5 + a2); // @output -4657382.123400000000000000000000000
    io:println(a5 + a3); // @output -4657506.1234
    io:println(a5 + a4); // @output -4733029.219947382
    io:println(a5 + a5); // @output -9314764.2468
    io:println(a5 + a6); // @output -1.797693134862315700000000000000000E+308
    io:println(a5 + a7); // @output -2.500000000000000000000000000000000E+1743
    io:println((a5 + a8).toBalString()); // @output ()

    io:println(a6 + a1); // @output -1.7976931348623157E+308
    io:println(a6 + a2); // @output -1.797693134862315700000000000000000E+308
    io:println(a6 + a3); // @output -1.797693134862315700000000000000000E+308
    io:println(a6 + a4); // @output -1.797693134862315700000000000000000E+308
    io:println(a6 + a5); // @output -1.797693134862315700000000000000000E+308
    io:println(a6 + a6); // @output -3.5953862697246314E+308
    io:println(a6 + a7); // @output -2.500000000000000000000000000000000E+1743
    io:println((a6 + a8).toBalString()); // @output ()

    io:println(a7 + a1); // @output -2.50E+1743
    io:println(a7 + a2); // @output -2.500000000000000000000000000000000E+1743
    io:println(a7 + a3); // @output -2.500000000000000000000000000000000E+1743
    io:println(a7 + a4); // @output -2.500000000000000000000000000000000E+1743
    io:println(a7 + a5); // @output -2.500000000000000000000000000000000E+1743
    io:println(a7 + a6); // @output -2.500000000000000000000000000000000E+1743
    io:println(a7 + a7); // @output -5.00E+1743
    io:println((a7 + a8).toBalString()); // @output ()

    io:println((a8 + a8).toBalString()); // @output ()
}

Test-Case: output
Description: Test decimal addition when one operand is a negative decimal or nil and the other is a positive decimal
             or nil of type decimal?.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, FloatingPointTypeSuffix, nil-literal, numeric-nil-lifting,
        optional-type, unary-minus, unary-plus, value:toBalString

function init() {
    decimal? a1 = -25.0E1742;
    decimal? a2 = -2.345e02;
    decimal? a3 = -12423.23;
    decimal? a4 = -10.746d;
    decimal? a5 = 30.25453213;
    decimal? a6 = +235462;
    decimal? a7 = 2.345e02;
    decimal? a8 = 25.0E1742d;
    decimal? a9 = ();

    io:println(a1 + a5); // @output -2.500000000000000000000000000000000E+1743
    io:println(a1 + a6); // @output -2.500000000000000000000000000000000E+1743
    io:println(a1 + a7); // @output -2.500000000000000000000000000000000E+1743
    io:println(a1 + a8); // @output 0
    io:println((a1 + a9).toBalString()); // @output ()

    io:println(a2 + a5); // @output -204.24546787
    io:println(a2 + a6); // @output 235227.5
    io:println(a2 + a7); // @output 0
    io:println(a2 + a8); // @output 2.500000000000000000000000000000000E+1743
    io:println((a2 + a9).toBalString()); // @output ()

    io:println(a3 + a5); // @output -12392.97546787
    io:println(a3 + a6); // @output 223038.77
    io:println(a3 + a7); // @output -12188.73
    io:println(a3 + a8); // @output 2.500000000000000000000000000000000E+1743
    io:println((a3 + a9).toBalString()); // @output ()

    io:println(a4 + a5); // @output 19.50853213
    io:println(a4 + a6); // @output 235451.254
    io:println(a4 + a7); // @output 223.754
    io:println(a4 + a8); // @output 2.500000000000000000000000000000000E+1743
    io:println((a4 + a9).toBalString()); // @output ()

    io:println(a5 + a1); // @output -2.500000000000000000000000000000000E+1743
    io:println(a5 + a2); // @output -204.24546787
    io:println(a5 + a3); // @output -12392.97546787
    io:println(a5 + a4); // @output 19.50853213
    io:println((a5 + a9).toBalString()); // @output ()

    io:println(a6 + a1); // @output -2.500000000000000000000000000000000E+1743
    io:println(a6 + a2); // @output 235227.5
    io:println(a6 + a3); // @output 223038.77
    io:println(a6 + a4); // @output 235451.254
    io:println((a6 + a9).toBalString()); // @output ()

    io:println(a7 + a1); // @output -2.500000000000000000000000000000000E+1743
    io:println(a7 + a2); // @output 0
    io:println(a7 + a3); // @output -12188.73
    io:println(a7 + a4); // @output 223.754
    io:println((a7 + a9).toBalString()); // @output ()

    io:println(a8 + a1); // @output 0
    io:println(a8 + a2); // @output 2.500000000000000000000000000000000E+1743
    io:println(a8 + a3); // @output 2.500000000000000000000000000000000E+1743
    io:println(a8 + a4); // @output 2.500000000000000000000000000000000E+1743
    io:println((a8 + a9).toBalString()); // @output ()
}

Test-Case: output
Description: Test decimal addition with user-defined subtypes of decimal?.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, DecimalNumber, FloatingPointTypeSuffix, module-const-decl,
        module-type-defn, nil-literal, numeric-nil-lifting, optional-type, singleton-type, unary-minus, union-type,
        value:toBalString

const decimal A = 1.25;
const decimal B = 2.0;

type DecimalType1 -2d|-1d|0d|1d|2d;

type DecimalType2 A|B;

type DecimalType3 DecimalType1|DecimalType2?;

function init() {
    A? a1 = 1.25d;
    DecimalType1? a2 = -1;
    DecimalType2? a3 = 2d;
    DecimalType3? a4 = -2.0;
    decimal? a5 = 25.0E1742d;
    decimal? a6 = -25.0E1742d;
    DecimalType3 a7 = ();

    decimal? a = a1 + a2;
    io:println(a); // @output 0.25

    a = a1 + a3;
    io:println(a); // @output 3.25

    a = a1 + a4;
    io:println(a); // @output -0.75

    a = a1 + a5;
    io:println(a); // @output 2.500000000000000000000000000000000E+1743

    a = a1 + a6;
    io:println(a); // @output -2.500000000000000000000000000000000E+1743

    a = a1 + a7;
    io:println(a.toBalString()); // @output ()

    a = a2 + a3;
    io:println(a); // @output 1

    a = a2 + a4;
    io:println(a); // @output -3.0

    a = a2 + a5;
    io:println(a); // @output 2.500000000000000000000000000000000E+1743

    a = a2 + a6;
    io:println(a); // @output -2.500000000000000000000000000000000E+1743

    a = a2 + a7;
    io:println(a.toBalString()); // @output ()

    a = a3 + a4;
    io:println(a); // @output 0

    a = a3 + a5;
    io:println(a); // @output 2.500000000000000000000000000000000E+1743

    a = a3 + a6;
    io:println(a); // @output -2.500000000000000000000000000000000E+1743

    a = a3 + a7;
    io:println(a.toBalString()); // @output ()
}

Test-Case: output
Description: Test decimal addition with operands of different nullable and non-nullable decimal subtypes.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, FloatingPointTypeSuffix, module-const-decl,
        module-type-defn, numeric-nil-lifting, optional-type, unary-minus, union-type, value:toBalString

const decimal A = 1.25;
const decimal B = 2.0;

type DecimalType1 -2d|-1d|0d|1d|2d;

type DecimalType2 A|B;

type DecimalType3 DecimalType1|DecimalType2?;

function init() {
    A? a1 = 1.25d;
    DecimalType1 a2 = -1d;
    DecimalType2? a3 = 2d;
    DecimalType3 a4 = -2.0d;
    decimal? a5 = 25.0E1742d;
    decimal a6 = -25.0E1742d;

    decimal? a = a1 + a2;
    io:println(a); // @output 0.25

    a = a1 + a4;
    io:println(a); // @output -0.75

    a = a1 + a6;
    io:println(a); // @output -2.500000000000000000000000000000000E+1743

    a = a1 + 10;
    io:println(a); // @output 11.25

    a = a2 + a3;
    io:println(a); // @output 1

    a = a2 + a4;
    io:println(a); // @output -3.0

    a = a2 + a5;
    io:println(a); // @output 2.500000000000000000000000000000000E+1743

    a = a2 + 10d;
    io:println(a); // @output 9

    a = a3 + a6;
    io:println(a); // @output -2.500000000000000000000000000000000E+1743

    a = a3 + 10d;
    io:println(a); // @output 12
}

Test-Case: output
Description: Test assigning the result of an additive expression to a compatible type.
Labels: additive-expr, any, decimal, DecimalFloatingPointNumber, FloatingPointTypeSuffix, is-expr, optional-type,
        string, union-type

function init() {
    decimal? x = 10d;
    decimal|string|() a = x + 20d;
    io:println(a); // @output 30
    io:println(a is decimal); // @output true

    any b = x + 20d;
    io:println(b); // @output 30
    io:println(b is decimal); // @output true
}

Test-Case: output
Description: Test assigning the result of an additive expression to var.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, FloatingPointTypeSuffix, is-expr, nil-literal,
        optional-type, value:toBalString, var

function init() {
    decimal? x = ();
    decimal? y = 15d;

    var a = x + 20d;
    io:println(a.toBalString()); // @output ()
    io:println(a is ()); // @output true

    var b = y + 20d;
    io:println(b); // @output 35
    io:println(b is decimal); // @output true
}

Test-Case: output
Description: Test using additive expression at module level.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, FloatingPointTypeSuffix, is-expr, module-const-decl,
        module-init-var-decl, nil-literal, optional-type, value:toBalString, var

decimal? x = 15d;
decimal? y = ();

var a = x + 20d;

decimal? b = y + 20d;

function init() {
    io:println(a); // @output 35
    io:println(a is decimal); // @output true

    io:println(b.toBalString()); // @output ()
}

Test-Case: output
Description: Test variable reference as decimal addition operands.
Labels: additive-expr, decimal, DecimalNumber, variable-reference-expr

function init() {
    decimal a = 2;
    decimal b = a + a;
    io:println(b); // @output 4
}

Test-Case: output
Description: Test field and member access as decimal addition operands.
Labels: additive-expr, array-type, decimal, DecimalNumber, field-access-expr, list-constructor-expr,
        mapping-constructor-expr, member-access-expr, module-type-defn, optional-field-access-expr, record-type

type Record record {
    decimal x;
    decimal y?;
};

function init() {
    Record c = {x: 10, y:20};
    decimal[] d = [30, 40];
    decimal? e = c.x + d[0] + c?.y;
    io:println(e); // @output 60
}

Test-Case: output
Description: Test function and method call as decimal addition operands.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, DecimalNumber, defaultable-param, explicit-new-expr,
        FloatingPointTypeSuffix, function-call-expr, method-call-expr, module-class-defn

class Class {
    function getFloat(decimal a) returns decimal {
        return 60 + a;
    }
}

function init() {
    Class f = new Class();
    decimal g = f.getFloat(12d + 20) + getFloat();
    io:println(g); // @output 137.0
}

function getFloat(decimal a = 10 + 30) returns decimal {
    return 2.0 + 3d + a;
}

Test-Case: output
Description: Test type cast expression in decimal addition operands.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, DecimalNumber, FloatingPointTypeSuffix, type-cast-expr

function init() {
    decimal i = <decimal> 6 + 7d;
    io:println(i); // @output 13
}

Test-Case: output
Description: Test unary expressions in decimal addition operands.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, DecimalNumber, FloatingPointTypeSuffix, unary-complement,
        unary-minus, unary-plus

function init() {
    decimal a1 = +4d + -3;
    io:println(a1); // @output 1

    decimal a2 = -(-2d + 5.0);
    io:println(a2); // @output -3.0
}

Test-Case: output
Description: Test additive expression in decimal addition operands.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, DecimalNumber, FloatingPointTypeSuffix

function init() {
    decimal a = 2.0 + 404d - 10d + 4;
    io:println(a); // @output 400.0
}

Test-Case: output
Description: Test additive expression in decimal addition operands.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, DecimalNumber, FloatingPointTypeSuffix

function init() {
    decimal a = 2 + (404d - 10d + 4);
    io:println(a); // @output 400
}

Test-Case: output
Description: Test precedence and associativity with additive expression.
Labels: additive-expr, DecimalNumber, FloatingPointTypeSuffix, int, multiplicative-expr

function init() {
    decimal a = 2d + 3d * 5d / 12d + 1d - 2d % 3d * 2d + 12d;
    io:println(a); // @output 12.25
}

Test-Case: output
Description: Test multiplicative expressions as decimal addition operands.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, DecimalNumber, FloatingPointTypeSuffix, multiplicative-expr

function init() {
    decimal a = (1 * 2d) + (32 / 4d);
    io:println(a); // @output 10
}

Test-Case: output
Description: Test checking expressions as decimal addition operands.
Labels: additive-expr, check, checkpanic, decimal, DecimalFloatingPointNumber, error, FloatingPointTypeSuffix,
        optional-type, union-type

function init() returns error? {
    decimal|error a = 12.25d;
    decimal c = check a + checkpanic a;
    io:println(c); // @output 24.50
}

Test-Case: output
Description: Test let expression in decimal addition operands.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, FloatingPointTypeSuffix, let-expr

function init() {
    decimal a = (let decimal b = 12.25 + 9.75d in b) + 36d;
    io:println(a); // @output 58.00
}

Test-Case: output
Description: Test conditional expressions as decimal addition operands.
Labels: additive-expr, conditional-expr, decimal, DecimalNumber, error, nil-literal, optional-type, union-type

function init() {
    decimal|error a = 25;
    decimal? b = ();
    decimal c = (a is error ? 5 : a) + (b ?: 10);
    io:println(c); // @output 35
}

Test-Case: error
Description: Test assigning the result of decimal addition to an incompatible type.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, float, function-call-expr, int, var

function errorFunction(decimal a, decimal b) {
    float _ = 1d + 2d; // @error static type of additive-expr with decimal operands is decimal
    int _ = 1d + 2d; // @error static type of additive-expr with decimal operands is decimal

    var a1 = a + b;
    float _ = a1; // @error static type of additive-expr with decimal operands is decimal

    int _ = a1; // @error static type of additive-expr with decimal operands is decimal

    var a2 = 1d + a;
    float _ = a2; // @error static type of additive-expr with decimal operands is decimal

    var a3 = getDecimal((20d + 2d)) + a;
    int _ = a3; // @error static type of additive-expr with decimal operands is decimal
}

function getDecimal(decimal d) returns decimal {
    return d + 2d;
}

Test-Case: error
Description: Test assigning the result of decimal addition with decimal? to an incompatible type.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, function-call-expr, numeric-nil-lifting, optional-type

function errorFunction(decimal e, decimal? f) {
    decimal _ = e + f; // @error static type of additive-expr with at least one decimal? operand is decimal?
    decimal _ = getOptionalDecimal(1d + 2.0d) + e; // @error static type of additive-expr with at least one decimal? operand is decimal?
    decimal _ = f + getOptionalDecimal(()); // @error static type of additive-expr with at least one decimal? operand is decimal?
    decimal _ = getOptionalDecimal(3) + getDecimal(1); // @error static type of additive-expr with at least one decimal? operand is decimal?
}

function getDecimal(decimal d) returns decimal {
    return d + 2d;
}

function getOptionalDecimal(decimal? d) returns decimal? {
    return d + 2d;
}

Test-Case: error
Description: Test assigning the result of decimal addition to a subtype of decimal.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, module-type-defn

type Decimals 10.0d|20d;

function errorFunction(Decimals a, decimal b) {
    Decimals _ = a + b; // @error static type of additive-expr with operands of decimal subtypes is decimal
    Decimals _ = a + a; // @error static type of additive-expr with operands of decimal subtypes is decimal
}

Test-Case: error
Description: Test assigning the result of addition of optional decimals to a subtype of decimal?.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, module-type-defn, numeric-nil-lifting, optional-type

type Decimals 10.0d|20d;

function errorFunction(Decimals? a, decimal? b) {
    Decimals? _ = a + b; // @error static type of additive-expr with at least one operand of subtype of decimal? is decimal?
    Decimals? _ = a + a; // @error static type of additive-expr with at least one operand of subtype of decimal? is decimal?
}
