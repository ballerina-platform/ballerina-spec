Test-Case: error
Description: Test additive expression with static types of operands belonging to different basic types
             resulting in an error.
Labels: additive-expr, decimal, float, int

function errorFunction(int a, float b, decimal c) {
    int _ = a + b; // @error + is not allowed with operands of different basic types
    int _ = a - b; // @error - is not allowed with operands of different basic types
    int _ = a + c; // @error + is not allowed with operands of different basic types
    int _ = a - c; // @error - is not allowed with operands of different basic types

    float _ = b + a; // @error + is not allowed with operands of different basic types
    float _ = b - a; // @error - is not allowed with operands of different basic types
    float _ = b + c; // @error + is not allowed with operands of different basic types
    float _ = b - c; // @error - is not allowed with operands of different basic types

    decimal _ = c + a; // @error + is not allowed with operands of different basic types
    decimal _ = c - a; // @error - is not allowed with operands of different basic types
    decimal _ = c + b; // @error + is not allowed with operands of different basic types
    decimal _ = c - b; // @error - is not allowed with operands of different basic types
}

Test-Case: error
Description: Test additive expression with static types of operands belonging to different optional
             basic types resulting in an error.
Labels: additive-expr, decimal, float, int, numeric-nil-lifting, optional-type

function errorFunction(int? a, float? b, decimal? c) {
    int? _ = a + b; // @error + is not allowed with operands of different basic types
    int? _ = a - b; // @error - is not allowed with operands of different basic types
    int? _ = a + c; // @error + is not allowed with operands of different basic types
    int? _ = a - c; // @error - is not allowed with operands of different basic types

    float? _ = b + a; // @error + is not allowed with operands of different basic types
    float? _ = b - a; // @error - is not allowed with operands of different basic types
    float? _ = b + c; // @error + is not allowed with operands of different basic types
    float? _ = b - c; // @error - is not allowed with operands of different basic types

    decimal? _ = c + a; // @error + is not allowed with operands of different basic types
    decimal? _ = c - a; // @error - is not allowed with operands of different basic types
    decimal? _ = c + b; // @error + is not allowed with operands of different basic types
    decimal? _ = c - b; // @error - is not allowed with operands of different basic types
}

Test-Case: error
Description: Test additive expression with static types of operands belonging to different optional and
             non-optional basic types resulting in an error.
Labels: additive-expr, decimal, float, int, numeric-nil-lifting, optional-type

function errorFunction(int a, float b, decimal c, int? d, float? e, decimal? f) {
    int _ = a + e; // @error + is not allowed with operands of different basic types
    int _ = a - e; // @error - is not allowed with operands of different basic types
    int _ = a + f; // @error + is not allowed with operands of different basic types
    int _ = a - f; // @error - is not allowed with operands of different basic types

    float _ = b + d; // @error + is not allowed with operands of different basic types
    float _ = b - d; // @error - is not allowed with operands of different basic types
    float _ = b + f; // @error + is not allowed with operands of different basic types
    float _ = b - f; // @error - is not allowed with operands of different basic types

    decimal _ = c + d; // @error + is not allowed with operands of different basic types
    decimal _ = c - d; // @error - is not allowed with operands of different basic types
    decimal _ = c + e; // @error + is not allowed with operands of different basic types
    decimal _ = c - e; // @error - is not allowed with operands of different basic types
}

Test-Case: error
Description: Test additive expression with static types of operands belonging to numeric and non-numeric basic types
             resulting in an error.
Labels: additive-expr, decimal, float, int, numeric-nil-lifting, optional-type, string

function errorFunction(int a, float b, decimal c, int? d, float? e, decimal? f, string g, string? h) {
    int _ = a + g; // @error + is not allowed with operands of different basic types
    int _ = a - g; // @error - is not allowed with operands of different basic types
    int _ = a + h; // @error + is not allowed with operands of different basic types
    int _ = a - h; // @error - is not allowed with operands of different basic types

    float _ = b + g; // @error + is not allowed with operands of different basic types
    float _ = b - g; // @error - is not allowed with operands of different basic types
    float _ = b + h; // @error + is not allowed with operands of different basic types
    float _ = b - h; // @error - is not allowed with operands of different basic types

    decimal _ = c + g; // @error + is not allowed with operands of different basic types
    decimal _ = c - g; // @error - is not allowed with operands of different basic types
    decimal _ = c + h; // @error + is not allowed with operands of different basic types
    decimal _ = c - h; // @error - is not allowed with operands of different basic types

    int? _ = d + g; // @error + is not allowed with operands of different basic types
    int? _ = d - g; // @error - is not allowed with operands of different basic types
    int? _ = d + h; // @error + is not allowed with operands of different basic types
    int? _ = d - h; // @error - is not allowed with operands of different basic types

    float? _ = e + g; // @error + is not allowed with operands of different basic types
    float? _ = e - g; // @error - is not allowed with operands of different basic types
    float? _ = e + h; // @error + is not allowed with operands of different basic types
    float? _ = e - h; // @error - is not allowed with operands of different basic types

    decimal? _ = f + g; // @error + is not allowed with operands of different basic types
    decimal? _ = f - g; // @error - is not allowed with operands of different basic types
    decimal? _ = f + h; // @error + is not allowed with operands of different basic types
    decimal? _ = f - h; // @error - is not allowed with operands of different basic types
}

Test-Case: error
Description: Test additive expression with static types of operands belonging to different basic types
             resulting in an error when the static type of at least one operand is a subtype of a numeric type.
Labels: additive-expr, byte, decimal, DecimalFloatingPointNumber, DecimalNumber, float, int, int:Signed16, int:Signed32,
        int:Signed8, int:Unsigned16, int:Unsigned32, int:Unsigned8, module-type-defn, numeric-nil-lifting,
        optional-type, singleton-type, union-type

type Ints 1|2;
type Floats 2.0|3.0|4.0;
type Decimals 1d|4.12d;

function errorFunction(int:Signed8 a, int:Signed16 b, int:Signed32 c, int:Unsigned8 d, int:Unsigned16 e,
                     int:Unsigned32 f, byte g, Ints h, Floats i, Decimals j, int:Unsigned8? k,
                     Ints? l, Floats? m, Decimals? n) {
    int:Signed8 _ = a + i; // @error + is not allowed with operands of different basic types
    int _ = a - j; // @error - is not allowed with operands of different basic types
    int _ = a + m; // @error + is not allowed with operands of different basic types
    int _ = a - n; // @error - is not allowed with operands of different basic types

    int:Signed16 v = b + i; // @error + is not allowed with operands of different basic types
    int _ = b - j; // @error - is not allowed with operands of different basic types
    int _ = b + m; // @error + is not allowed with operands of different basic types
    int _ = b - n; // @error - is not allowed with operands of different basic types

    int:Signed32 _ = c + i; // @error + is not allowed with operands of different basic types
    int _ = c - j; // @error - is not allowed with operands of different basic types
    int _ = c + m; // @error + is not allowed with operands of different basic types
    int _ = c - n; // @error - is not allowed with operands of different basic types

    int:Unsigned8 _ = d + i; // @error + is not allowed with operands of different basic types
    int _ = d - j; // @error - is not allowed with operands of different basic types
    int _ = d + m; // @error + is not allowed with operands of different basic types
    int _ = d - n; // @error - is not allowed with operands of different basic types

    int:Unsigned16 _ = e + i; // @error + is not allowed with operands of different basic types
    int _ = e - j; // @error - is not allowed with operands of different basic types
    int _ = e + m; // @error + is not allowed with operands of different basic types
    int _ = e - n; // @error - is not allowed with operands of different basic types

    int:Unsigned32 _ = f + i; // @error + is not allowed with operands of different basic types
    int _ = f - j; // @error - is not allowed with operands of different basic types
    int _ = f + m; // @error + is not allowed with operands of different basic types
    int _ = f - n; // @error - is not allowed with operands of different basic types

    byte _ = g + i; // @error + is not allowed with operands of different basic types
    int _ = g - j; // @error - is not allowed with operands of different basic types
    int _ = g + m; // @error + is not allowed with operands of different basic types
    int _ = g - n; // @error - is not allowed with operands of different basic types

    Ints _ = h + i; // @error + is not allowed with operands of different basic types
    int _ = h - j; // @error - is not allowed with operands of different basic types
    int _ = h + m; // @error + is not allowed with operands of different basic types
    int _ = h - n; // @error - is not allowed with operands of different basic types

    Floats _ = i + j; // @error + is not allowed with operands of different basic types
    float _ = i - k; // @error - is not allowed with operands of different basic types
    float _ = i + l; // @error + is not allowed with operands of different basic types
    float _ = i - n; // @error - is not allowed with operands of different basic types

    Decimals a37 = j + k; // @error + is not allowed with operands of different basic types
    decimal? a38 = j - l; // @error - is not allowed with operands of different basic types
    decimal? a39 = j + m; // @error + is not allowed with operands of different basic types
    decimal? a40 = j - k; // @error - is not allowed with operands of different basic types
}

Test-Case: parser-error
Description: Test syntax errors in additive expression
Labels: additive-expr, DecimalNumber, int

function errorFunction() {
    int _ = 12 + ; // @error missing RHS operand
}

Test-Case: parser-error
Description: Test syntax errors in additive expression
Labels: additive-expr, DecimalNumber, int

function errorFunction() {
    int _ = 12 - ; // @error missing RHS operand
}

Test-Case: error
Description: Test invalid subtraction with subtypes of string.
Labels: additive-expr, module-type-defn, singleton-type, string, string:Char, union-type

type Strings "foo"|"bar";

function errorFunction(string a, string:Char b, Strings c) {
    string _ = a - a; // @error - not defined for operands of basic type string
    string _ = a - b; // @error - not defined for operands of basic type string
    string _ = a - c; // @error - not defined for operands of basic type string
    string _ = b - a; // @error - not defined for operands of basic type string
    string _ = b - b; // @error - not defined for operands of basic type string
    string _ = b - c; // @error - not defined for operands of basic type string
    string _ = c - a; // @error - not defined for operands of basic type string
    string _ = c - b; // @error - not defined for operands of basic type string
    string _ = c - c; // @error - not defined for operands of basic type string
    string _ = c - b - a; // @error - not defined for operands of basic type string
    string _ = a - c - b - a; // @error - not defined for operands of basic type string
}

Test-Case: error
Description: Test invalid subtraction with subtypes of xml.
Labels: additive-expr, never, xml-type-parameter, xml:Comment, xml:Element, xml:ProcessingInstruction, xml:Text

function errorFunction(xml a, xml:Element b, xml:Comment c, xml:ProcessingInstruction d, xml:Text e, xml<xml:Element|xml:Comment> f, xml<never> g) {
    _ = a - a; // @error - not defined for operands of basic type xml
    _ = a - b; // @error - not defined for operands of basic type xml
    _ = a - c; // @error - not defined for operands of basic type xml
    _ = b - a; // @error - not defined for operands of basic type xml
    _ = b - b; // @error - not defined for operands of basic type xml
    _ = b - c; // @error - not defined for operands of basic type xml
    _ = c - a; // @error - not defined for operands of basic type xml
    _ = c - b; // @error - not defined for operands of basic type xml
    _ = c - c; // @error - not defined for operands of basic type xml
    _ = d - e; // @error - not defined for operands of basic type xml
    _ = e - f; // @error - not defined for operands of basic type xml
    _ = f - g; // @error - not defined for operands of basic type xml
    _ = d - g; // @error - not defined for operands of basic type xml
    _ = c - b - a; // @error - not defined for operands of basic type xml
    _ = a - c - b - a; // @error - not defined for operands of basic type xml
    _ = a - d - b - f; // @error - not defined for operands of basic type xml
    _ = f - g - f; // @error - not defined for operands of basic type xml
}

Test-Case: error
Description: Test invalid subtraction with subtypes of string and xml.
Labels: additive-expr, module-type-defn, never, singleton-type, string, string:Char, union-type, xml-type-parameter,
        xml:Comment, xml:Element, xml:ProcessingInstruction, xml:Text

type Strings "foo"|"bar";

function errorFunction(xml a, xml:Element b, xml:Comment c, xml:ProcessingInstruction d, xml:Text e, xml<xml:Element|xml:Comment> f, xml<never> g,
                      string h, string:Char i, Strings j) {
    _ = a - h; // @error - not defined for operands of basic type xml and string
    _ = a - i; // @error - not defined for operands of basic type xml and string
    _ = a - j; // @error - not defined for operands of basic type xml and string
    _ = b - h; // @error - not defined for operands of basic type xml and string
    _ = b - i; // @error - not defined for operands of basic type xml and string
    _ = b - j; // @error - not defined for operands of basic type xml and string
    _ = c - j; // @error - not defined for operands of basic type xml and string
    _ = c - i; // @error - not defined for operands of basic type xml and string
    _ = c - h; // @error - not defined for operands of basic type xml and string
    _ = d - j; // @error - not defined for operands of basic type xml and string
    _ = e - i; // @error - not defined for operands of basic type xml and string
    _ = f - h; // @error - not defined for operands of basic type xml and string
    _ = d - i; // @error - not defined for operands of basic type xml and string
    _ = c - j - a; // @error - not defined for operands of basic type xml and string
    _ = a - j - b - h; // @error - not defined for operands of basic type xml and string
    _ = a - h - h - f; // @error - not defined for operands of basic type xml and string
    _ = h - g - j; // @error - not defined for operands of basic type xml and string
    _ = h - a; // @error - not defined for operands of basic type xml and string
    _ = i - b; // @error - not defined for operands of basic type xml and string
    _ = j - c; // @error - not defined for operands of basic type xml and string
    _ = j - d; // @error - not defined for operands of basic type xml and string
    _ = i - e; // @error - not defined for operands of basic type xml and string
    _ = h - f; // @error - not defined for operands of basic type xml and string
    _ = h - g; // @error - not defined for operands of basic type xml and string
}
