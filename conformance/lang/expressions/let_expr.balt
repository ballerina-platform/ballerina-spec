Test-Case: parser-error
Description: Test let expression with missing tokens.
Labels: int, let-expr

function errorFunction() {
    io:println(let int i in i); // @error missing variable initialization
    io:println(let i = 2 in i); // @error missing type descriptor
    io:println(let int i = 2 i); // @error missing in keyword
    io:println(let int i = 2 int j = 2 in i + j); // @error missing comma token
    io:println(let in i); // @error missing let variable declaration
    io:println(let i); // @error variable initialization and expression after in keyword
}

Test-Case: output
Description: Test nil-literal and nil-type in let-var-decl.
Labels: function-call-expr, let-expr, nil-literal, nil-type, null

function init() {
    io:println(let () n = () in n.toBalString()); // @output ()
    io:println(let null n = () in n.toBalString()); // @output ()
}

Test-Case: output
Description: Test nil-type, boolean in let-var-decl.
Labels: boolean, boolean-literal, function-call-expr, let-expr, nil-literal, nil-type, null,

function init() {
    io:println(let null n = null in n.toBalString()); // @output ()
    io:println(let boolean b = true in b); // @output true
}

Test-Case: output
Description: Test StringNumericEscape in the expression of let-var-decl.
Labels: function-call-expr, let-expr, string, StringNumericEscape

function init() {
    io:println(let string s = "\u{0633}" in s); // @output Ø³
    io:println(let string s = "ABC \u{0633} CDE \u{0644} DEF \u{0644} XYZ" in s); // @output ABC Ø³ CDE Ù„ DEF Ù„ XYZ
}

Test-Case: output
Description: Test let expression when expression after `in` is a list-constructor-expr.
Labels: boolean, boolean-literal, function-call-expr, let-expr, list-constructor-expr, nil-literal, nil-type, null, string

function init() {
    io:println(let null n = () in [n, n, n]); // @output [null,null,null]
    io:println(let null n = () in [n, [n, n]]); // @output [null,[null,null]]
    io:println(let boolean b1 = true, boolean b2 = false in [b1, b2, b1]); // @output [true,false,true]
    io:println(let boolean b1 = true, boolean b2 = false in [b2, [b1, b2]]); // @output [false,[true,false]]
}

Test-Case: output
Description: Test let expression when expression after `in` is a mapping-constructor-expr.
Labels: boolean, boolean-literal, function-call-expr, let-expr, mapping-constructor-expr, nil-literal, nil-type, null

function init() {
    io:println(let null nx = (), null ny = () in {"n": nx, n1: nx, ny, ["a"]: [nx, ny]}); // @output {"n":null,"n1":null,"ny":null,"a":[null,null]}
    io:println(let null nx = (), null ny = () in {"n": {nx, ny}}); // @output {"n":{"nx":null,"ny":null}}
    io:println(let boolean b1 = true, boolean b2 = false in {"b": b1, b1: b1, b2, ["a"]: [b1, b2]}); // @output {"b":true,"b1":true,"b2":false,"a":[true,false]}
    io:println(let boolean b1 = true, boolean b2 = false in {"b": {b1, b2}}); // @output {"b":{"b1":true,"b2":false}}
}

Test-Case: output
Description: Test let expression when expression after `in` is a mapping-constructor-expr.
Labels: function-call-expr, int, let-expr, mapping-constructor-expr, nil-literal, nil-type, null, module-type-defn, optional-type, record-type, union-type

type Record record {|
    int|boolean? i;
|};

function init() {
    Record r = let null n = () in {i: n};
    io:println(r); // @output {"i":null}
}

Test-Case: output
Description: Test let expression when expression after `in` is a mapping-constructor-expr.
Labels: boolean, boolean-literal, function-call-expr, int, let-expr, mapping-constructor-expr, module-type-defn, record-type, union-type

type Record record {|
    int|boolean? i;
|};

function init() {
    Record r = let boolean b = false in {i: b};
    io:println(r); // @output {"i":false}
    io:println(let boolean b1 = true, boolean b2 = !b1 in {"b": {b1, b2}}); // @output {"b":{"b1":true,"b2":false}}
}

Test-Case: output
Description: Test let expression when expression after `in` is a mapping-constructor-expr.
Labels: array-type, let-expr, mapping-constructor-expr, module-type-defn, record-type, string

type Names record {|
    string country;
    string[] names;
|};

function init() {
    record {| string myField; |} r = let string smiley = "hðŸ˜€llo" in {myField: smiley};
    io:println(r.myField); // @output hðŸ˜€llo
}

Test-Case: output
Description: Test let expression when expression after `in` is a table-constructor-expr.
Labels: array-type, boolean, boolean-literal, function-call-expr, let-expr, module-type-defn, null, record-type, string, table-constructor-expr, table-constructor-key-specifier, table-type

type Names record {|
    string country;
    string[] names;
|};

type Rec1 record {|
    readonly string n1;
    int? n2;
|};

type Rec2 record {|
    readonly string name;
    boolean isValid;
|};

function init() {
    table<Rec1> key(n1) tbl1 = let null n = () in table key(n1) [{n1: "N1", n2: n}, {n1: "N2", n2: n}];
    io:println(tbl1.get("N1").n2 is ()); // @output true
    io:println(tbl1.get("N2").n2 is ()); // @output true
    table<Rec2> key(name) tbl2 = let boolean b1 = true, boolean b2 = true
        in table key(name) [{isValid: b1, name: "XX"}, {isValid: b2, name: "YY"}];
    io:println(tbl2.get("XX").isValid); // @output true
    io:println(tbl2.get("YY").isValid); // @output true
    table<Rec2> key(name) tbl3 = let boolean b1 = true, boolean b2 = false in table key(name) [{isValid: b1 && b2, name: "XX"}];
    io:println(tbl3.get("XX").isValid); // @output false
    table<Names> tbNames = table [];
    _ = let Names val = let string[] names = ["Sam", "John", "Ann"] in {country: "Ireland", names: names} in tbNames.add(val);
    io:println(tbNames); // @output [{"country":"Ireland","names":["Sam","John","Ann"]}]
}

Test-Case: output
Description: Test let expression when expression after `in` is an object-constructor-expr.
Labels: equality, explicit-new-expr, field-access-expr, function-call-expr, implicit-new-expr, let-expr, method-call-expr, module-class-defn, nil-literal, nil-type, null, object-constructor-expr, object-type, var

class NilClass {
    null n;
    function init(null n) {
        self.n = n;
    }

    function getNil() returns () {
        return self.n;
    }

    function isNil(int? i) returns boolean {
        return i == ();
    }
}

function init() {
    var obj = let null n = () in object {
        null nx = n;
        function init() {
            io:println(self.nx == ()); // @output true
        }
    };
    io:println(obj.nx == ()); // @output true

    var obj1 = let null n = () in new NilClass(n);
    io:println(obj1.getNil() == ()); // @output true
    NilClass obj2 = let null n = () in new (n);
    io:println(obj2.getNil() == ()); // @output true
}

Test-Case: output
Description: Test let expression when expression after `in` is an object-constructor-expr.
Labels: boolean, boolean-literal, explicit-new-expr, function-call-expr, let-expr, logical-expr, method-call-expr, module-class-defn, object-constructor-expr, object-type

class BoolClass {
    boolean b1;
    boolean b2;

    function init(boolean b1, boolean b2) {
        self.b1 = b1;
        self.b2 = b2;
    }

    function foo() returns boolean {
        return self.b1 && !self.b2;
    }
}

function init() {
    object { public boolean b; } obj = let boolean b1 = true in object {
                                                                    public boolean b = b1; };
    io:println(obj.b); // @output true

    BoolClass boolObj = let boolean b1 = true, boolean b2 = false in new BoolClass(b1, b2);
    io:println(boolObj.foo()); // @output true
}

Test-Case: output
Description: Test let expression when expression after `in` is a function-call-expr.
Labels: boolean, boolean-literal, equality, function-call-expr, function-defn, let-expr, nil-literal, nil-type, null, optional-type

function init() {
    io:println(let null n = () in isNil(n)); // @output true
    io:println(let boolean b = true in isTrue(b)); // @output true
}

function isNil(int? i) returns boolean {
    return i == ();
}

function isTrue(boolean b) returns boolean {
    return b;
}

Test-Case: output
Description: Test let expression when expression after `in` is an object-constructor-expr.
Labels: let-expr, method-call-expr, module-class-defn, implicit-new-expr, nil-literal, nil-type, null

class NilClass {
    null n;
    function init(null n) {
        self.n = n;
    }

    function isNil(int? i) returns boolean {
        return i == ();
    }
}

function init() {
    NilClass obj = new(null);
    io:println(let null n = () in obj.isNil(n)); // @output true
}

Test-Case: output
Description: Test let expression when expression after `in` is an error-constructor-expr.
Labels: boolean, boolean-literal, error-constructor-expr, let-expr, nil-literal, nil-type, null

function init() {
    io:println(let null n = null in error("Message", n, n = n)); // @output error("Message",n=null)
    io:println(let null n = null in error("Message", error("Message", n = n), n = n)); // @output error("Message",error("Message",n=null),n=null)
}

Test-Case: output
Description: Test let expression when expression after `in` is a let-expr.
Labels: error-constructor-expr, let-expr, nil-literal, nil-type, null

function init() {
    io:println(() == let null n1 = null in let null n2 = n1 in n2); // @output true
    io:println(let null n1 = null in let null n2 = n1 in error("Message", n1, n = n2)); // @output error("Message",n=null)
    io:println(let boolean b1 = false in let boolean b2 = b1 in b2); // @output false
    io:println(let boolean b1 = true in let boolean b2 = b1 in [b1, b2]); // @output [true,true]
}

Test-Case: output
Description: Test let expression when expression after `in` is a type-cast-expr.
Labels: let-expr, nil-literal, nil-type, null, type-cast-expr

function init() {
    io:println(() == let null n = null in <()>n); // @output true
}

Test-Case: output
Description: Test let expression when expression after `in` is a typeof-expr.
Labels: let-expr, nil-literal, nil-type, null, typeof-expr

function init() {
    io:println(let null n = null in typeof n); // @output typedesc ()
}

Test-Case: output
Description: Test let expression when expression after `in` is a unary-logical-expr.
Labels: equality, exact-equality, let-expr, nil-literal, nil-type, null

function init() {
    io:println(let null n = null in !(n == ())); // @output false
    io:println(let null n = null in n == null); // @output true
    io:println(let null n = null in n != null); // @output false
    io:println(let null n = null in n === null); // @output true
    io:println(let null n = null in n !== null); // @output false
}

Test-Case: output
Description: Test let expression when expression after `in` is a is-expr.
Labels: is-expr, let-expr, nil-literal, nil-type, null

function init() {
    io:println(let null n = null in n is null); // @output true
}

Test-Case: output
Description: Test let expression when expression after `in` is a conditional-expr.
Labels: binary-conditional-expr, let-expr, nil-literal, nil-type, null

function init() {
    io:println(let null n = null in n == () ? true : false); // @output true
}

Test-Case: output
Description: Test let expression when expression after `in` is a query-expr.
Labels: field-access-expr, let-expr, list-constructor-expr, query-expr, mapping-constructor-expr, method-call-expr, nil-literal, nil-type, null, optional-type, string, var

function init() {
    var a = let null n = null in from var i in [1, n, 2, n] select i;
    io:println(a); // @output [1,null,2,null]
    var b = let null n1 = null, null n2 = null in from var i in [1, n1, 2, n2] select i;
    io:println(b); // @output [1,null,2,null]
    var c = let null n = null in from var i in [1, n, 2, n]
                                let int? x = i
                                select x;
    io:println(c); // @output [1,null,2,null]
    var d = let null n = null in from var x in [
                                                {id: 1, name: "X"},
                                                {id: 2, name: n}
                                            ]
                                join var y in [
                                                {id: 1, name: "Y"},
                                                {id: 3, name: n}
                                            ]
                                on x.name equals y.name
                                select x.id.toString() + " " + y.id.toString();
    io:println(d); // @output ["2 3"]
    var strSplit = let string str = "ABCD" in from string s in str select s;
    io:println(strSplit); // @output ABCD
}

Test-Case: output
Description: Test let expression, when type-descriptor is a int-type-descriptor or floating-point-type-descriptor.
Labels: decimal, DecimalFloatingPointNumber, int, float, function-call-expr, let-expr, list-constructor-expr, optional-type, type-cast-expr

function init() {
    io:println(let int i = 2, float f = 2.2f, decimal d = 1.2d in i + <int>f + <int>d); // @output 5
    io:println(let int i = 2, float f = 2.2f, decimal d = 1.2d in [i, f, d]); // @output [2,2.2,1.2]
    io:println(let decimal d = 12e43d in d.abs()); // @output 1.2E+44
    io:println(let int i = 2, int j = 3 in foo(i) + bar(j)); // @output 5
    io:println(() == let int i = 2, int j = 3 in foo(i) + baz(j)); // @output true
}

function foo(int? i) returns int? {
    return i;
}

function bar(int i) returns int? {
    return i;
}

function baz(int i) returns int? {
    return;
}

Test-Case: output
Description: Test string in let expression.
Labels: function-call-expr, let-expr, string, string-template-expr

function init() {
    io:println(() == let string str = "ABCDEF", string subStr = "PQR" in str.indexOf(subStr)); // @output true
    io:println(let string str = "abc" in str.toUpperAscii()); // @output ABC
    io:println(let string firstName = "John", string lastName = "Smith"
        in string `Hello ${lastName}, ${firstName} !!!`); // @output Hello Smith, John !!!
}

Test-Case: output
Description: Test let expression, when type-descriptor is a xml-type-descriptor.
Labels: let-expr, xml, xml:Comment, xml:Element, xml:ProcessingInstruction, xml:Text, xml-type-parameter

function init() {
    xmlns "foo" as ns;
    io:println(let xml x1 = xml `<ns:root></ns:root>` in x1.<*>); // @output <ns:root xmlns:ns="foo"/>
    io:println(let xml x1 = xml `<ns:root></ns:root>` in x1.<ns:*>); // @output <ns:root xmlns:ns="foo"/>
    io:println(let xml x1 = xml `<ns:root></ns:root>` in x1.<ns:root>); // @output <ns:root xmlns:ns="foo"/>
    io:println(let string v1 = "interpolation1", string v2 = "interpolation2"
        in (xml `text1${v1}<foo>foo</foo>text2${v2}<!--comment ${v2}-->text3`).toString()); // @output text1interpolation1<foo>foo</foo>text2interpolation2<!--comment interpolation2-->text3
    io:println(let xml<'xml:ProcessingInstruction> x1 = xml `<?foo?><?faa?>` in x1.toString()); // @output <?foo ?><?faa ?>
    io:println(let string v = "str" in (xml `text1 ${v}`).toString()); // @output text1 str
    io:println(let string v1 = "11", string v2 = "22" in (xml `aaa${v1}bbb${v2}ccc`).toString()); // @output aaa11bbb22ccc
    io:println(let string v1 = "11", string v2 = "22" in (xml `<!--aaa${v1}bbb${v2}ccc-->`).toString()); // @output <!--aaa11bbb22ccc-->
    io:println(let string v1 = "11", string v2 = "22" in (xml `<?foo aaa${v1}bbb${v2}ccc?>`).toString()); // @output <?foo aaa11bbb22ccc?>
    io:println(let string v1 = "11", string v2 = "22" in (xml `<foo bar="aaa${v1}bb'b${v2}ccc?"/>`).toString()); // @output <foo bar="aaa11bb'b22ccc?"/>
    io:println(let int i = 42, float f = 3.14, decimal d = 31.4444, string s = "this-is-a-string",
    xml elem = xml `<abc/>` in (xml `<elem>${i}|${f}|${d}|${s}|${elem}</elem>`).toString()); // @output <elem>42|3.14|31.4444|this-is-a-string|<abc/></elem>
}

Test-Case: output
Description: Test let expression, when type-descriptor is a list-type-descriptor.
Labels: array:length, array:push, array-type, function-call-expr, let-expr, list-constructor-expr, member-access-expr, method-call-expr, nil-literal, tuple-type, var

function init() {
    io:println(let var l = ["A", 2] in l[0]); // @output A
    io:println(let var l = [["A", 2], ["B", 3, "C"]] in l[1][2]); // @output C
    io:println(let int[] arr = [23, 34] in arr.length()); // @output 2
    io:println(let [int, boolean][3] sealedArray = [[2, true], [3, false], [6, true]]
        in sealedArray.length()); // @output 3
    io:println(() == let [int, string...] x = [1, "a", "b"] in x.push("2")); // @output true
    io:println(let string str = "ABCDEF" in str[1]); // @output B
}

Test-Case: output
Description: Test let expression, when type-descriptor is a mapping-type-descriptor.
Labels: any, anydata, let-expr, mapping-constructor-expr, map-type, member-access-expr

function init() {
    io:println(() == let map<any> addressOne = {city: "Colombo", "country": "SriLanka"}, map<any>[] array = []
        in array.push(addressOne)); // @output true
    io:println(let map<any> animals = {"animal1":"Lion", "animal2":"Cat"} in animals.get("animal1")); // @output Lion
    io:println(let map<any> animals = {"animal1":"Lion", "animal2":"Cat"} in animals.keys()); // @output ["animal1","animal2"]
    io:println(let map<any> animals = {"animal1":"Lion", "animal2":"Cat"} in animals.entries()); // @output {"animal1":["animal1","Lion"],"animal2":["animal2","Cat"]}
    io:println(let string i = "i", float f = 2.0, map<anydata> b = {s: "hello", [i]: 1, f: f}
        in b["s"] == "hello" && b["i"] == 1 && b["f"] == 2.0); // @output true
    io:println(let map<any> list1 = {"item1": "item1"} in list1["item1"] is string); // @output true
    io:println(let map<any> address = {country: "SriLanka"}, map<any> info = {name: "Supun", address: address}
        in (<map<any>> (info["address"]))["country"]); // @output SriLanka
}

Test-Case: output
Description: Test let expression, when type-descriptor is a record-type-descriptor.
Labels: array-type, let-expr, list-constructor-expr, mapping-constructor-expr, module-type-defn, record-type

type Department record {
    string dptName = "";
    Person[] employees = [];
};

type Person record {|
    string name = "default name";
    Family family = {};
|};

type Family record {
    string spouse = "";
    int noOfChildren = 0;
    string[] children = [];
};

type Student record {
    int id;
    string name?;
};

function init() {
    io:println(let Family family1 = {spouse: "Ann", noOfChildren: 0}, Person emp1 = {family: family1},
        Person[] emps = [emp1], Department dpt = {dptName: "HR", employees: emps} in dpt.employees[0].family); // @output {"spouse":"Ann","noOfChildren":0,"children":[]}
    io:println(let Family family1 = {spouse: "Ann", noOfChildren: 0}, Person emp1 = {family: family1}
        in emp1.entries()); // @output {"name":["name","default name"],"family":["family",{"spouse":"Ann","noOfChildren":0,"children":[]}]}
    io:println(let Student s = {id : 1, name : "Andrew"} in s.removeIfHasKey("name")); // @output Andrew
    io:println(() == let Student s = {id : 1, name : "Andrew"} in s.removeIfHasKey("firstName")); // @output true
}

Test-Case: output
Description: Test let expression, when type-descriptor is a table-type-descriptor.
Labels: let-expr, module-type-defn, record-type, table-constructor-expr

type Foo record {
    readonly map<string> m;
    int age;
};

type Student record {|
    readonly string name;
    int id?;
    Address address;
|};

type Address record {
    string city;
    string? country;
};

function init() {
    io:println(let table<map<any>> tbl = table [{ id: 13 , name: "Emm", lname: "Dean" }] in tbl); // @output [{"id":13,"name":"Emm","lname":"Dean"}]
    io:println(() == let table<Foo> key(m) tbl = table [{m: {"AAA": "DDDD"}, age: 31 }]
        in tbl.add({ m: {"CCC":"EEEE"}, age: 34 })); // @output true
    io:println(let table<Student> key(name) tbl = table [{name: "Amy", id: 1234, address:
        {"street": "Main Street", "city": "Colombo", "country": ()}}] in tbl["Amy"]["address"]["country"] == ()); // @output true
}

Test-Case: output
Description: Test let expression with query expressions.
Labels: array-type, let-expr, list-constructor-expr, module-type-defn, record-type, var

type Department record {|
   int id;
   string name;
|};

type Person record {|
   int id;
   string fname;
   string lname;
|};

type DeptPerson record {|
   string fname;
   string lname;
   string? dept;
|};

Person[] personList = [
    {id: 1, fname: "Alex", lname: "George"}
];

Department[] deptList = [
    {id: 1, name:"HR"}
];

function init() {
    var l = let Person[] personList = [{id: 1, fname: "Sam", lname: "George"}],
                   Department[] deptList = [{id: 1, name:"HR"}] in
                   from var person in personList
                        join var {id: deptId, name: deptName} in deptList
                        on person.id equals deptId
                        select {
                            fname : person.fname,
                            lname : person.lname,
                            dept : deptName
                        };
    io:println(l); // @output [{"fname":"Sam","lname":"George","dept":"HR"}]
}

Test-Case: error
Description: Test let expression when let variable is declared outside let expression.
Labels: int, let-expr

function errorFunction() {
    int i = 2;
    io:println(let int i = 2 in i); // @error redeclared symbol 'i'
}

Test-Case: error
Description: Test let expression when the type of let variables does not compatible with let expression.
Labels: function-call-expr, int, let-expr, optional-type, string, string-literal, var

function errorFunction() {
    io:println(let string i = "2", int j = 3 in i + j); // @error operator '+' not defined for 'string' and 'int'
    io:println(let int i = 2 in foo(i)); // @error incompatible types: expected 'string?', found 'int'
    io:println(let var i = 2 in foo(i)); // @error incompatible types: expected 'string?', found 'int'
}

function foo(string? s) returns string? {
    return s;
}

Test-Case: error
Description: Test let expression when when the let variables are incorrect.
Labels: int, let-expr, string-literal

function errorFunction() {
    io:println(let int i = "not int" in i); // @error incompatible types: expected 'int', found 'string'
}

Test-Case: output
Description: Test let expression being an isolated expression, when the expression following `in` is isolated.
             A reference in that expression to a variable bound by a let-var-decl will be treated as isolated
             if the expression initializing the variable in the let-var-decl is isolated.
Labels: function-call-expr, int, let-expr

isolated int x = 2;
isolated int y = 4;

isolated function bar(int i) returns int {
    return i;
}

isolated function init() {
    lock {
        x = let int i = 20 in i;
        io:println(x); // @output 20
        x = let int i = 22 in bar(i);
        io:println(x); // @output 22
    }

    lock {
        int x1 = let int i = y in bar(i);
        io:println(x1); // @output 4
        int x2 = let int i = bar(200) in bar(i);
        io:println(x2); // @output 200
    }
}

Test-Case: error
Description: Test error cases when let expression is assigned to an isolated variable.
             Non isolated expressions cannot be used to initialize let-var-decl when expression following in expected to be isolated.
Labels: array-type, function-call-expr, let-expr

isolated int[] x = [];

function foo() {
    lock {
        int[] y = [23];
        x = let int[] i = y in i; // @error the let expression is not isolated because the expression that initializes variable i is not isolated
    }
}

function errorFunction() {
    foo();
}

Test-Case: output
Description: Test behaviour if the typed-binding-pattern uses var.
             The type of the variable should be inferred from the precise static type of the expression following =.
Fail-Issue: ballerina-platform/ballerina-lang#35527
Labels: function-call-expr, let-expr, module-type-defn, singleton-type, string-literal, var

type X "char_X";

function foo(X x) returns boolean {
    return x == "char_X";
}

function init() {
    _ = let var x = "char_X" in foo(x); // @output true
}

Test-Case: output
Description: Test let expression located in module level.
Labels: function-call-expr, int, let-expr, nil-literal, nil-type, var

var t1 = let int i = 2, int j = 3 in i + j;
var t2 = let () n = () in n.toBalString();

function init() {
    io:println(t1); // @output 5
    io:println(t2); // @output ()
}

Test-Case: error
Description: Test let expression when the variables bound in a let-var-decl are modified.
Fail-Issue: ballerina-platform/ballerina-lang#37595
Labels: let-expr, string, string-literal, var

public function init() {
    var r = let string str = "hello" in function () {
        str = "bye"; // @error the variables bound in a let-var-decl are implicitly final
    };
}

Test-Case: output
Description: Test let expression when annotations are attached to let-var-decl.
Labels: annotation-decl, int, let-expr, module-type-defn, record-type, string, string-literal

type Annot record {
    string val;
};

public const annotation Annot v1 on source var;

function init() {
    int y = let @v1 {val: "v1"} int x = 4 in 2 * x;
    io:println(y); // @output 8
}
