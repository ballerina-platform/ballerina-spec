Test-Case: parser-error
Description: Test missing key expression in member access expression.
Labels: array-type, int, list-constructor-expr, member-access-expr

function errorFunction() {
    int[] arr = [1, 2, 3];
    _ = arr[]; // @error missing key expression
}

Test-Case: output
Description: Test using a value of a static type that is int as the key expression when the basic type of the
             container expression is an array.
Labels: array-type, DecimalNumber, int, list-constructor-expr, member-access-expr

function init() {
    int[] arr = [10, 20, 30, 40, 50, 60, 70, 80];

    int i0 = 0;
    io:println(arr[i0]); // @output 10

    io:println(arr[5]); // @output 60
}

Test-Case: output
Description: Test using a value of a static type that is a subtype of int as the key expression when the basic type of the
             container expression is an array.
Labels: array-type, int, list-constructor-expr, member-access-expr, module-const-decl, module-type-defn, union-type

const i1 = 0;
const i2 = 5;

type IntType1 i1|i2;

function init() {
    int[] arr = [10, 20, 30, 40, 50, 60, 70, 80];

    io:println(arr[i1]); // @output 10

    IntType1 i3 = 5;
    io:println(arr[i3]); // @output 60
}

Test-Case: output
Description: Test using a value of a static type that is a subtype of int as the key expression when the basic type of the
             container expression is an array.
Labels: array-type, int, list-constructor-expr, member-access-expr, module-type-defn, singleton-type, union-type

type IntType1 3|4;

function init() {
    int[] arr = [10, 20, 30, 40, 50, 60, 70, 80];

    IntType1 i1 = 4;
    io:println(arr[i1]); // @output 50

    3 i2 = 3;
    io:println(arr[i2]); // @output 40

    1|2 i3 = 1;
    io:println(arr[i3]); // @output 20
}

Test-Case: output
Description: Test using a value of a static type that is a subtype of int as the key expression when the basic type of
             the container expression is an array.
Labels: array-type, byte, int, int:Signed8, int:Unsigned8, list-constructor-expr, member-access-expr

function init() {
    int[] arr = [10, 20, 30, 40, 50, 60, 70, 80];

    int:Signed8 i1 = 1;
    io:println(arr[i1]); // @output 20

    byte i2 = 2;
    io:println(arr[i2]); // @output 30

    int:Unsigned8 i3 = 2;
    io:println(arr[i3]); // @output 30
}

Test-Case: output
Description: Test using a value of a static type that is a subtype of int as the key expression when the basic type of
             the container expression is an array.
Fail-Issue: ballerina-platform/ballerina-lang#35974
Labels: array-type, int, int:Signed16, int:Signed32, int:Signed8, int:Unsigned16, list-constructor-expr,
        member-access-expr, module-type-defn, union-type

type IntType1 int:Signed8|int:Unsigned16;

function init() {
    int[] arr = [10, 20, 30, 40, 50, 60, 70, 80];

    int:Signed32|int:Signed16 i4 = 3;
    io:println(arr[i4]); // @output 40

    IntType1 i5 = 5;
    io:println(arr[i5]); // @output 60
}

Test-Case: error
Description: Test key expression with invalid static type.
Labels: any, array-type, DecimalFloatingPointNumber, float, int, list-constructor-expr, member-access-expr,
        module-type-defn, module-const-decl, singleton-type, string, union-type

type SomeType "2"|"3";

const c = "4";

function errorFunction() {
    int[] arr = [1, 2, 3, 4, 5];

    _ = arr["1"]; // @error expected a value of subtype int as key

    string a = "2";
    _ = arr[a]; // @error expected a value of subtype int as key

    SomeType b = "3";
    _ = arr[b]; // @error expected a value of subtype int as key

    _ = arr[c]; // @error expected a value of subtype int as key

    any d = 1;
    _ = arr[d]; // @error expected a value of subtype int as key

    int|float e = 2;
    _ = arr[e]; // @error expected a value of subtype int as key

    _ = arr[2.0]; // @error expected a value of subtype int as key
}

Test-Case: output
Description: Test the result of evaluating a member access expression when basic type of the evaluated value of the
             container expression is an array.
Labels: array-type, int, list-constructor-expr, mapping-constructor-expr, member-access-expr, module-type-defn,
        record-type-readonly-field, record-type, string, table-constructor-expr, table-type, table-type-key-specifier,
        union-type

type Record record {|
    readonly int a;
    string b?;
|};

type RecordTable table<Record> key(a);

function init() {
    int[] intArr = [10, 20, 30, 40, 50, 60, 70, 80];
    io:println(intArr[6]); // @output 70

    (int|string)[] arr = [1, "ABC", "DEF", 2];
    io:println(arr[1]); // @output ABC

    Record[] recArr = [{a: 1, b: "ABC"}, {a: 2}, {a: 3, b: "DEF"}];
    io:println(recArr[2]); // @output {"a":3,"b":"DEF"}

    RecordTable[] tableArr = [
        table [
                {a: 1, b: "ABC"},
                {a: 2},
                {a: 3, b: "DEF"}
            ],
        table [
                {a: 4},
                {a: 5, b: "GHI"},
                {a: 6}
            ]
    ];
    io:println(tableArr[1]); // @output [{"a":4},{"a":5,"b":"GHI"},{"a":6}]
}

Test-Case: panic
Description: Test the result of evaluating a member access expression when the evaluated value(k) of the
             key expression is less than 0 with container expression whose basic type is an array (k < 0).
Labels: array-type, int, list-constructor-expr, member-access-expr, unary-minus

function init() {
    int[] intArr = [10, 20, 30, 40, 50, 60, 70, 80];

    _ = intArr[-3]; // @panic index out of range
}

Test-Case: panic
Description: Test the result of evaluating a member access expression when the evaluated value(k) of the
             key expression is equal to the length of the evaluated value(c) of the
             container expression whose basic type is an array (k = length(c)).
Labels: array-type, int, list-constructor-expr, member-access-expr

function init() {
    int[] intArr = [10, 20, 30, 40, 50, 60, 70, 80];

    _ = intArr[8]; // @panic index out of range
}

Test-Case: panic
Description: Test the result of evaluating a member access expression when the evaluated value(k) of the
             key expression is greater than the length of the evaluated value(c) of the
             container expression whose basic type is an array (k > length(c)).
Labels: array-type, int, list-constructor-expr, member-access-expr

function init() {
    int[] intArr = [10, 20, 30, 40, 50, 60, 70, 80];

    _ = intArr[10]; // @panic index out of range
}

Test-Case: output
Description: Test the static type of member access expression when the container expression is of basic type list.
Labels: array-type, int, list-constructor-expr, mapping-constructor-expr, member-access-expr, module-type-defn,
        record-type, record-type-readonly-field, string, table-constructor-expr, table-type, table-type-key-specifier,
        union-type

type Record record {|
    readonly int a;
    string b?;
|};

type RecordTable table<Record> key(a);

function init() {
    int[] intArr = [10, 20, 30, 40, 50, 60, 70, 80];
    int x1 = intArr[6];
    io:println(x1); // @output 70

    (int|string)[] arr = [1, "ABC", "DEF", 2];
    int|string x2 = arr[2];
    io:println(x2); // @output DEF

    Record[] recArr = [{a: 1, b: "ABC"}, {a: 2}, {a: 3, b: "DEF"}];
    Record x3 = recArr[2];
    io:println(x3); // @output {"a":3,"b":"DEF"}

    RecordTable[] tableArr = [
        table [
                {a: 1, b: "ABC"},
                {a: 2},
                {a: 3, b: "DEF"}
            ],
        table [
                {a: 4},
                {a: 5, b: "GHI"},
                {a: 6}
            ]
    ];
    RecordTable x4 = tableArr[1];
    io:println(x4); // @output [{"a":4},{"a":5,"b":"GHI"},{"a":6}]
}

Test-Case: error
Description: Test assigning result of member access expression to an invalid type.
Labels: array-type, int, list-constructor-expr, member-access-expr

function errorFunction() {
    int[] arr = [1, 2, 3];
    string _ = arr[1]; // @error expected string, static type of the accessed value is int
}

Test-Case: output
Description: Test variable reference expression as container expression of basic type list.
Labels: array-type, int, list-constructor-expr, member-access-expr, variable-reference-expr

function init() {
    int[] intArr = [10, 20, 30, 40, 50, 60, 70, 80];
    io:println(intArr[5]); // @output 60
}

Test-Case: output
Description: Test field access expression as container expression of basic type list.
Labels: array-type, field-access-expr, list-constructor-expr, mapping-constructor-expr, member-access-expr,
        module-type-defn, record-type, string

type Record record {|
    string[] cities;
|};

function init() {
    Record rec = {cities: ["NY", "CL", "SF"]};
    io:println(rec.cities[1]); // @output CL
}

Test-Case: output
Description: Test member access expression as container expression of basic type list.
Labels: array-type, list-constructor-expr, member-access-expr, string

function init() {
    string[][] strArr = [["HeLlO", "BaLlErInA", "WoRlD"], ["ABC", "DEF"]];
    io:println(strArr[0][1]); // @output BaLlErInA
}

Test-Case: output
Description: Test function call expression as container expression of basic type list.
Labels: array-type, function-call-expr, int, list-constructor-expr, member-access-expr

function init() {
    io:println(getArr()[2]); // @output 30
}

function getArr() returns int[] {
    return [10, 20, 30, 40];
}

Test-Case: output
Description: Test method call expression as container expression of basic type list.
Labels: array-type, explicit-new-expr, int, list-constructor-expr, member-access-expr, method-call-expr,
        module-class-defn

class Array {
    function getArr() returns int[] {
        return [10, 20, 30, 40];
    }
}

function init() {
    Array arr = new Array();
    io:println(arr.getArr()[2]); // @output 30
}

Test-Case: output
Description: Test let expression as container expression of basic type list.
Labels: array-type, int, let-expr, list-constructor-expr, member-access-expr

function init() {
    io:println((let int[] b = [10, 20, 30, 40] in b)[3]); // @output 40
}

Test-Case: output
Description: Test type cast expression as container expression of basic type list.
Labels: array-type, int, list-constructor-expr, member-access-expr, optional-type, type-cast-expr

function init() {
    int[]? value = [10, 20, 30, 40];
    io:println((<int[]>value)[3]); // @output 40
}

Test-Case: output
Description: Test conditional expression as container expression of basic type list.
Labels: conditional-expr, int, list-constructor-expr, member-access-expr, relational-expr

function init() {
    int x = 5;
    io:println((x < 10 ? [5, 6, 7] : [11, 12, 13])[2]); // @output 7
}

Test-Case: output
Description: Test checking expression as container expression of basic type list.
Labels: array-type, check, checkpanic, error-type, int, list-constructor-expr, member-access-expr, union-type

function init() returns error? {
    int[]|error val = [10, 20, 30, 40, 50];
    io:println((check val)[3]); // @output 40
    io:println((checkpanic val)[3]); // @output 40
}

Test-Case: output
Description: Test query expression as container expression of basic type list.
Labels: array-type, int, list-constructor-expr, member-access-expr, multiplicative-expr, query-expr

function init() {
    int[] arr = [1, 2, 3, 4, 5];
    io:println((from int i in arr select i * 10)[4]); // @output 50
}

Test-Case: output
Description: Test int literal as key expression with container expression of basic type list.
Labels: array-type, DecimalNumber, int, list-constructor-expr, member-access-expr

function init() {
    int[] arr = [1, 2, 3, 4, 5];
    io:println(arr[4]); // @output 5
}

Test-Case: output
Description: Test variable reference as key expression with container expression of basic type list.
Labels: array-type, int, list-constructor-expr, member-access-expr, variable-reference-expr

function init() {
    int[] arr = [1, 2, 3, 4, 5];
    int index = 4;

    io:println(arr[index]); // @output 5
}

Test-Case: output
Description: Test field access expression as key expression with container expression of basic type list.
Labels: array-type, field-access-expr, int, list-constructor-expr, mapping-constructor-expr, member-access-expr,
        record-type

type Record record {|
    int index;
|};

function init() {
    int[] arr = [1, 2, 3, 4, 5];
    Record rec = {index: 1};

    io:println(arr[rec.index]); // @output 2
}

Test-Case: output
Description: Test member access expression as key expression with container expression of basic type list.
Labels: array-type, int, list-constructor-expr, member-access-expr

function init() {
    int[] arr = [1, 2, 3, 4, 5];
    io:println(arr[arr[3]]); // @output 5
}

Test-Case: output
Description: Test functional call as key expression with container expression of basic type list.
Labels: array-type, function-call-expr, int, list-constructor-expr, member-access-expr

function init() {
    int[] arr = [1, 2, 3, 4, 5];
    io:println(arr[getPosition()]); // @output 3
}

function getPosition() returns int {
    return 2;
}

Test-Case: output
Description: Test method call as key expression with container expression of basic type list.
Labels: array-type, explicit-new-expr, int, list-constructor-expr, member-access-expr, method-call-expr,
        module-class-defn

class Position {
    function getPosition(int pos) returns int {
        return pos + 1;
    }
}

function init() {
    int[] arr = [1, 2, 3, 4, 5];
    Position pos = new Position();

    io:println(arr[pos.getPosition(2)]); // @output 4
}

Test-Case: output
Description: Test let expression as key expression with container expression of basic type list.
Labels: array-type, int, let-expr, list-constructor-expr, member-access-expr

function init() {
    int[] arr = [1, 2, 3, 4, 5];
    io:println(arr[let int i = 1 + 2 in i]); // @output 4
}

Test-Case: output
Description: Test type cast expression as key expression with container expression of basic type list.
Labels: array-type, int, list-constructor-expr, member-access-expr, type-cast-expr

function init() {
    int[] arr = [1, 2, 3, 4, 5];
    io:println(arr[<int> 4]); // @output 5
}

Test-Case: output
Description: Test unary numeric expression as key expression with container expression of basic type list.
Labels: array-type, DecimalNumber, int, list-constructor-expr, member-access-expr, unary-complement, unary-minus,
        unary-plus

function init() {
    int[] arr = [1, 2, 3, 4, 5];

    io:println(arr[+4]); // @output 5
    io:println(arr[-(-3)]); // @output 4
    io:println(arr[~(-3)]); // @output 3
}

Test-Case: output
Description: Test additive expression as key expression with container expression of basic type list.
Labels: additive-expr, array-type, DecimalNumber, int, list-constructor-expr, member-access-expr

function init() {
    int[] arr = [1, 2, 3, 4, 5];

    io:println(arr[2 + 1]); // @output 4
    io:println(arr[4 - 2]); // @output 3
}

Test-Case: output
Description: Test multiplicative expression as key expression with container expression of basic type list.
Labels: array-type, DecimalNumber, int, list-constructor-expr, member-access-expr, multiplicative-expr

function init() {
    int[] arr = [1, 2, 3, 4, 5];

    io:println(arr[2 * 1]); // @output 3
    io:println(arr[4 / 2]); // @output 3
    io:println(arr[5 % 2]); // @output 2
}

Test-Case: output
Description: Test shift expression as key expression with container expression of basic type list.
Labels: array-type, DecimalNumber, int, list-constructor-expr, member-access-expr, shift-expr

function init() {
    int[] arr = [1, 2, 3, 4, 5];

    io:println(arr[1 << 2]); // @output 5
    io:println(arr[4 >> 2]); // @output 2
}

Test-Case: output
Description: Test binary bitwise expression as key expression with container expression of basic type list.
Labels: array-type, binary-bitwise-expr, DecimalNumber, int, list-constructor-expr, member-access-expr

function init() {
    int[] arr = [1, 2, 3, 4, 5];

    io:println(arr[2 & 6]); // @output 3
    io:println(arr[2 ^ 6]); // @output 5
}

Test-Case: output
Description: Test checking expression as key expression with container expression of basic type list.
Labels: array-type, check, checkpanic, error-type, int, list-constructor-expr, member-access-expr, optional-type,
        union-type

function init() returns error? {
    int[] arr = [1, 2, 3, 4, 5];
    int|error pos = 3;

    io:println(arr[check pos]); // @output 4
    io:println(arr[checkpanic pos]); // @output 4
}

Test-Case: output
Description: Test conditional expression as key expression with container expression of basic type list.
Labels: array-type, conditional-expr, int, is-expr, list-constructor-expr, member-access-expr, optional-type

function init() {
    int[] arr = [1, 2, 3, 4, 5];
    int? pos = 3;

    io:println(arr[pos is int ? pos : 0]); // @output 4
}

Test-Case: output
Description: Test member access expression at module level.
Labels: array-type, int, list-constructor-expr, member-access-expr, module-init-var-decl

int[] arr = [1, 2, 3, 4, 5];

int num = arr[0];

function init() {
    io:println(num); // @output 1
}

Test-Case: output
Description: Test member access expression with container expression of basic type list as array member.
Labels: array-type, int, list-constructor-expr, member-access-expr

function init() {
    int[] arr = [1, 2, 3, 4, 5];
    int[] anotherArr = [arr[3], arr[0], arr[4]];

    io:println(anotherArr[1]); // @output 1
}

Test-Case: output
Description: Test member access expression with container expression of basic type list as default expression
             for a field.
Labels: array-type, field-access-expr, int, intersection-type, list-constructor-expr, mapping-constructor-expr,
        member-access-expr, module-init-var-decl, module-type-defn, readonly-type, record-type

final int[] & readonly arr = [1, 2, 3, 4, 5];

type Record record {|
    int a = arr[2];
|};

function init() {
    Record rec = {};
    io:println(rec.a); // @output 3
}

Test-Case: output
Description: Test member access expression with container expression of basic type list as defaultable
             function parameter.
Labels: array-type, defaultable-param, function-call-expr, int, intersection-type, list-constructor-expr,
        member-access-expr, module-init-var-decl, readonly-type

final int[] & readonly arr = [1, 2, 3, 4, 5];

function init() {
    io:println(getInt()); // @output 5
}

function getInt(int a = arr[4]) returns int {
    return a;
}

Test-Case: output
Description: Test member access expression with container expression of basic type list as expression in
             return statement.
Labels: array-type, function-call-expr, int, list-constructor-expr, member-access-expr, return-stmt

function init() {
    io:println(getInt([1, 2, 3, 4, 5])); // @output 5
}

function getInt(int[] arr) returns int {
    return arr[4];
}

Test-Case: output
Description: Test assigning a value to member access expression.
Labels: array-type, int, list-constructor-expr, member-access-lvexpr

function init() {
    int[] arr = [1, 2, 3];
    arr[1] = 12;
    io:println(arr[1]); // @output 12
}

Test-Case: error
Description: Test accessing members of an invalid structure.
Labels: array-type, int, list-constructor-expr, member-access-expr, optional-type

function errorFunction() {
    int[]? arr = [1, 2, 3];
    _ = arr[1]; // @error int[]? does not support member access
}

Test-Case: error
Description: Test assigning an invalid value to member access expression.
Labels: array-type, int, list-constructor-expr, member-access-lvexpr, string

function errorFunction() {
    int[] arr = [1, 2, 3];
    arr[1] = "12"; // @error expected an int value, found a string
}

Test-Case: error
Description: Test invalid member access using multi key expression.
Labels: array-type, int, list-constructor-expr, member-access-expr

function errorFunction() {
    int[] arr = [1, 2, 3];
    _ = arr[1, 2]; // @error member access with multi-key expression is not allowed with array
}
