Test-Case: parser-error
Description: Test missing key expression in member access expression.
Labels: int, mapping-constructor-expr, member-access-expr, module-type-defn, record-type, string

type Record record {|
    int id;
    string name;
|};

function errorFunction() {
    Record p1 = {id: 1, name: "Mike"};
    _ = p1[]; // @error missing key expression
}

Test-Case: output
Description: Test using a value of a static type that is a subtype of string as the key expression when the basic type
             of the container expression is a record.
Labels: mapping-constructor-expr, member-access-expr, module-const-decl, module-type-defn, record-type, string,
        union-type

type Person record {|
    int id;
    string name;
    int age;
|};

const idf = "id";

type StringType1 "id"|"name";

function init() {
    Person p1 = {id: 1, name: "John", age: 23};

    io:println(p1["id"]); // @output 1

    io:println(p1[idf]); // @output 1

    string idf1 = "name";
    io:println(p1[idf1]); // @output John

    StringType1 idf2 = "name";
    io:println(p1[idf2]); // @output John
}

Test-Case: error
Description: Test key expression with invalid static type.
Labels: any, int, mapping-constructor-expr, member-access-expr, module-type-defn, record-type, string, union-type

type Person record {|
    int id;
    string name;
|};

function errorFunction() {
    Person p1 = {id: 5, name: "Mike"};

    int a = 1;
    _ = p1[a]; // @error expected a key of type string, found int

    int|string b = "id";
    _ = p1[b]; // @error expected a key of type string, found (int|string)

    any c = "id";
    _ = p1[c]; // @error expected a key of type string, found any
}

Test-Case: output
Description: Test using a value of a static type that is a subtype of string as the key expression when the basic type
             of the container expression is a union of record and nil.
Labels: mapping-constructor-expr, member-access-expr, module-const-decl, module-type-defn, optional-type, record-type,
        string, union-type

type Person record {|
    int id;
    string name;
    int age;
|};

const idf = "id";

type StringType1 "id"|"name";

function init() {
    Person? p1 = {id: 1, name: "John", age: 23};

    io:println(p1["id"]); // @output 1

    io:println(p1[idf]); // @output 1

    string idf1 = "name";
    io:println(p1[idf1]); // @output John

    StringType1 idf2 = "name";
    io:println(p1[idf2]); // @output John
}

Test-Case: output
Description: Test the result of evaluating a member access expression when basic type of the evaluated value of the
             container expression is a record.
Labels: mapping-constructor-expr, member-access-expr, method-call-expr, module-const-decl, module-type-defn, optional-type,
        record-rest-descriptor, record-type, string, union-type, value:toBalString

const A = 10;

type Type1 int|float;

type Record record {|
    int a;
    string? b;
    Type1 c;
    A d;
    decimal e?;
    OtherRecord f;
    float g = 10.5;
    int...;
|};

type OtherRecord record {|
    int m;
|};

function init() {
    Record rec = {a: 1, b: (), c: 12, d: 10, e: 12.2, f: {m: 3}, g: 9, "h": 30, "i": 24};

    io:println(rec["a"]); // @output 1
    io:println(rec["b"].toBalString()); // @output ()
    io:println(rec["c"]); // @output 12
    io:println(rec["d"]); // @output 10
    io:println(rec["e"]); // @output 12.2
    io:println(rec["f"]); // @output {"m":3}
    io:println(rec["g"]); // @output 9.0
    io:println(rec["h"]); // @output 30
    io:println(rec["i"]); // @output 24

    Record rec2 = {a: 1, b: "A", c: 12, d: 10, f: {m: 3}, "h": 30};

    io:println(rec2["a"]); // @output 1
    io:println(rec2["b"]); // @output A
    io:println(rec2["c"]); // @output 12
    io:println(rec2["d"]); // @output 10
    io:println(rec2["e"].toBalString()); // @output ()
    io:println(rec2["f"]); // @output {"m":3}
    io:println(rec2["g"]); // @output 10.5
    io:println(rec2["h"]); // @output 30
    io:println(rec2["i"].toBalString()); // @output ()
}

Test-Case: output
Description: Test the result of evaluating a member access expression when type of the evaluated value of the
             container expression is nil.
Labels: is-expr, member-access-expr, method-call-expr, module-type-defn, optional-type, record-type, table-constructor-expr,
        table-type, value:toBalString

type Person record {|
    readonly int id;
    string name;
    int age;
|};

type PersonTable table<Person> key(id);

function init() {
    PersonTable tbl = table [
            {id: 1, name: "Mike", age: 15},
            {id: 2, name: "Tobi", age: 16},
            {id: 3, name: "Frank", age: 14}
        ];

    Person? p = tbl[4];
    io:println(p is ()); // @output true

    io:println(p["id"].toBalString()); // @output ()
}

Test-Case: output
Description: Test the result of evaluating a member access expression when basic type of the evaluated value of the
             container expression is a union of record and nil.
Labels: mapping-constructor-expr, member-access-expr, method-call-expr, module-const-decl, module-type-defn, optional-type,
        record-rest-descriptor, record-type, string, union-type, value:toBalString

const A = 10;

type Type1 int|float;

type Record record {|
    int a;
    string? b;
    Type1 c;
    A d;
    decimal e?;
    OtherRecord f;
    float g = 10.5;
    int...;
|};

type OtherRecord record {|
    int m;
|};

function init() {
    Record? rec = {a: 1, b: (), c: 12, d: 10, e: 12.2, f: {m: 3}, g: 9, "h": 30, "i": 24};

    io:println(rec["a"]); // @output 1
    io:println(rec["b"].toBalString()); // @output ()
    io:println(rec["c"]); // @output 12
    io:println(rec["d"]); // @output 10
    io:println(rec["e"]); // @output 12.2
    io:println(rec["f"]); // @output {"m":3}
    io:println(rec["g"]); // @output 9.0
    io:println(rec["h"]); // @output 30
    io:println(rec["i"]); // @output 24

    Record? rec2 = {a: 1, b: "A", c: 12, d: 10, f: {m: 3}, "h": 30};

    io:println(rec2["a"]); // @output 1
    io:println(rec2["b"]); // @output A
    io:println(rec2["c"]); // @output 12
    io:println(rec2["d"]); // @output 10
    io:println(rec2["e"].toBalString()); // @output ()
    io:println(rec2["f"]); // @output {"m":3}
    io:println(rec2["g"]); // @output 10.5
    io:println(rec2["h"]); // @output 30
    io:println(rec2["i"].toBalString()); // @output ()
}

Test-Case: output
Description: Test the static type of member access expression when the container expression is of record type
             and the specified key is not of an optional key type.
Labels: float, int, mapping-constructor-expr, member-access-expr, module-const-decl, module-type-defn, optional-type,
        record-type, string, union-type

const A = 10;

type Type1 int|float;

type Record record {|
    int a;
    string? b;
    Type1 c;
    A d;
    OtherRecord f;
    float g = 10.5;
|};

type OtherRecord record {|
    int m;
|};

function init() {
    Record rec = {a: 1, b: "A", c: 12, d: 10, f: {m: 3}};

    int a = rec["a"];
    io:println(a); // @output 1

    string? b = rec["b"];
    io:println(b); // @output A

    Type1 c = rec["c"];
    io:println(c); // @output 12

    A d = rec["d"];
    io:println(d); // @output 10

    OtherRecord f = rec["f"];
    io:println(f); // @output {"m":3}

    float g = rec["g"];
    io:println(g); // @output 10.5
}

Test-Case: output
Description: Test the static type of member access expression when the container expression is a union of record and nil
             and the specified key is not of an optional key type.
Labels: float, int, mapping-constructor-expr, member-access-expr, module-const-decl, module-type-defn, optional-type,
        record-type, string, union-type

const A = 10;

type Type1 int|float;

type Record record {|
    int a;
    string? b;
    Type1 c;
    A d;
    OtherRecord f;
    float g = 10.5;
|};

type OtherRecord record {|
    int m;
|};

function init() {
    Record? rec = {a: 1, b: "A", c: 12, d: 10, f: {m: 3}};

    int? a = rec["a"];
    io:println(a); // @output 1

    string? b = rec["b"];
    io:println(b); // @output A

    Type1? c = rec["c"];
    io:println(c); // @output 12

    A? d = rec["d"];
    io:println(d); // @output 10

    OtherRecord? f = rec["f"];
    io:println(f); // @output {"m":3}

    float? g = rec["g"];
    io:println(g); // @output 10.5
}

Test-Case: output
Description: Test the static type of member access expression when the container expression is of record type
             and the specified key is optional.
Labels: decimal, int, mapping-constructor-expr, member-access-expr, method-call-expr, module-const-decl, module-type-defn,
        optional-type, record-type, union-type, value:toBalString

type Record record {|
    decimal e?;
    int...;
|};

function init() {
    Record rec = {"h": 30};

    decimal? e = rec["e"];
    io:println(e.toBalString()); // @output ()

    int? h = rec["h"];
    io:println(h); // @output 30

    int? i = rec["i"];
    io:println(i.toBalString()); // @output ()

    Record rec2 = {e: 10.5, "i": 30};

    decimal? e2 = rec2["e"];
    io:println(e2); // @output 10.5

    int? h2 = rec2["h"];
    io:println(h2.toBalString()); // @output ()

    int? i2 = rec2["i"];
    io:println(i2); // @output 30
}

Test-Case: output
Description: Test the static type of member access expression when the container expression is a union of record and nil
             and the specified key is optional.
Labels: decimal, int, mapping-constructor-expr, member-access-expr, method-call-expr, module-const-decl, module-type-defn,
        optional-type, record-type, union-type, value:toBalString

type Record record {|
    decimal e?;
    int...;
|};

function init() {
    Record? rec = {"h": 30};

    decimal? e = rec["e"];
    io:println(e.toBalString()); // @output ()

    int? h = rec["h"];
    io:println(h); // @output 30

    int? i = rec["i"];
    io:println(i.toBalString()); // @output ()

    Record rec2 = {e: 10.5, "i": 30};

    decimal? e2 = rec2["e"];
    io:println(e2); // @output 10.5

    int? h2 = rec2["h"];
    io:println(h2.toBalString()); // @output ()

    int? i2 = rec2["i"];
    io:println(i2); // @output 30
}

Test-Case: error
Description: Test assigning result of accessing members of a record type to an invalid type.
Labels: mapping-constructor-expr, member-access-expr, module-type-defn, record-type, string

type Person record {|
    int id;
    string name;
|};

function errorFunction() {
    Person p1 = {id: 5, name: "Mike"};

    string _ = p1["id"]; // @error expected a string, static type of the accessed value is int
}

Test-Case: error
Description: Test assigning result of accessing members of a union of record and nil type to an invalid type.
Labels: int, mapping-constructor-expr, member-access-expr, module-type-defn, optional-type, record-type, string

type Person record {|
    int id;
    string name;
|};

function errorFunction() {
    Person? p1 = {id: 5, name: "Mike"};

    int _ = p1["id"]; // @error expected an `int`, but the static type of the accessed value is `int?`
}

Test-Case: output
Description: Test field access expression as container expression of type record.
Labels: field-access-expr, mapping-constructor-expr, member-access-expr, module-type-defn, record-type

type Person record {|
    int id;
    string name;
|};

type Record record {|
    Person p;
|};

function init() {
    Record rec = {p: {id: 1, name: "John"}};
    io:println(rec.p["name"]); // @output John
}

Test-Case: output
Description: Test member access expression as container expression of type record.
Labels: mapping-constructor-expr, member-access-expr, module-type-defn, record-type

type Person record {|
    int id;
    string name;
|};

type Record record {|
    Person p;
|};

function init() {
    Record rec = {p: {id: 1, name: "John"}};
    io:println(rec["p"]["id"]); // @output 1
}

Test-Case: output
Description: Test function call expression as container expression of type record.
Labels: function-call-expr, mapping-constructor-expr, member-access-expr, module-type-defn, record-type

type Person record {|
    int id;
    string name;
|};

function init() {
    io:println(getPerson()["name"]); // @output John
}

function getPerson() returns Person {
    return {id: 1, name: "John"};
}

Test-Case: output
Description: Test method call expression as container expression of type record.
Labels: explicit-new-expr, mapping-constructor-expr, member-access-expr, method-call-expr, module-class-defn,
        module-type-defn, record-type

type Person record {|
    int id;
    string name;
|};

class Record {
    function getPerson() returns Person {
        return {id: 1, name: "John"};
    }
}

function init() {
    Record rec = new();
    io:println(rec.getPerson()["name"]); // @output John
}

Test-Case: output
Description: Test let expression as container expression of type record.
Labels: let-expr, mapping-constructor-expr, member-access-expr, module-type-defn, record-type

type Person record {|
    int id;
    string name;
|};

function init() {
    io:println((let Person p = {id: 1, name: "John"} in p)["name"]); // @output John
}

Test-Case: output
Description: Test type cast expression as container expression of type record.
Labels: mapping-constructor-expr, member-access-expr, module-type-defn, optional-type, record-type, type-cast-expr

type Person record {|
    int id;
    string name;
|};

function init() {
    Person? p = {id: 1, name: "John"};
    io:println((<Person>p)["name"]); // @output John
}

Test-Case: output
Description: Test conditional expression as container expression of type record.
Labels: ternary-conditional-expr, int, mapping-constructor-expr, member-access-expr, module-type-defn, record-type,
        relational-expr

type Person record {|
    int id;
    string name;
|};

function init() {
    int c = 4;
    Person p1 = {id: 10, name: "John"};
    Person p2 = {id: 5, name: "Mike"};

    io:println((c >= 10 ? p1 : p2)["name"]); // @output Mike
}

Test-Case: output
Description: Test checking expression as container expression of type record.
Labels: check, checkpanic, error-type, mapping-constructor-expr, member-access-expr, module-type-defn, optional-type,
        record-type, union-type

type Person record {|
    int id;
    string name;
|};

function init() returns error? {
    Person|error p = {id: 5, name: "Mike"};

    io:println((check p)["name"]); // @output Mike
    io:println((checkpanic p)["name"]); // @output Mike
}

Test-Case: output
Description: Test field access expression as key expression with container expression of type record.
Labels: field-access-expr, mapping-constructor-expr, member-access-expr, module-type-defn, record-type

type Person record {|
    int id;
    string name;
|};

type Record record {|
    string f1;
|};

function init() {
    Person p = {id: 5, name: "Mike"};
    Record r = {f1: "name"};

    io:println(p[r.f1]); // @output Mike
}

Test-Case: output
Description: Test member access expression as key expression with container expression of type record.
Labels: mapping-constructor-expr, member-access-expr, module-type-defn, record-type

type Person record {|
    int id;
    string name;
|};

type Record record {|
    string f1;
|};

function init() {
    Person p = {id: 5, name: "Mike"};
    Record r = {f1: "name"};

    io:println(p[r["f1"]]); // @output Mike
}

Test-Case: output
Description: Test functional call as key expression with container expression of type record.
Labels: function-call-expr, mapping-constructor-expr, member-access-expr, module-type-defn, record-type

type Person record {|
    int id;
    string name;
|};

function init() {
    Person p = {id: 5, name: "Mike"};

    io:println(p[getField()]); // @output Mike
}

function getField() returns string {
    return "name";
}

Test-Case: output
Description: Test method call as key expression with container expression of type record.
Labels: explicit-new-expr, mapping-constructor-expr, member-access-expr, method-call-expr, module-class-defn,
        module-type-defn, record-type

type Person record {|
    int id;
    string name;
|};

class Field {
    function getField() returns string {
        return "name";
    }
}

function init() {
    Person p = {id: 5, name: "Mike"};
    Field f = new ();

    io:println(p[f.getField()]); // @output Mike
}

Test-Case: output
Description: Test let expression as key expression with container expression of type record.
Labels: let-expr, mapping-constructor-expr, member-access-expr, module-type-defn, record-type, string

type Person record {|
    int id;
    string name;
|};

function init() {
    Person p = {id: 5, name: "Mike"};

    io:println(p[let string i = "id" in i]); // @output 5
}

Test-Case: output
Description: Test type cast expression as key expression with container expression of type record.
Labels: mapping-constructor-expr, member-access-expr, module-type-defn, record-type, string, type-cast-expr

type Person record {|
    int id;
    string name;
|};

function init() {
    Person p = {id: 5, name: "Mike"};

    io:println(p[<string> "id"]); // @output 5
}

Test-Case: output
Description: Test additive expression as key expression with container expression of type record.
Labels: additive-expr, mapping-constructor-expr, member-access-expr, module-type-defn, record-type, string

type Person record {|
    int id;
    string name;
|};

function init() {
    Person p = {id: 5, name: "Mike"};

    io:println(p["na" + "me"]); // @output Mike
}

Test-Case: output
Description: Test checking expression as key expression with container expression of type record.
Labels: check, checkpanic, error-type, mapping-constructor-expr, member-access-expr, module-type-defn, record-type,
        string

type Person record {|
    int id;
    string name;
|};

function init() returns error? {
    Person p = {id: 5, name: "Mike"};
    string|error nm = "name";

    io:println(p[check nm]); // @output Mike
    io:println(p[checkpanic nm]); // @output Mike
}

Test-Case: output
Description: Test conditional expression as key expression with container expression of type record.
Labels: ternary-conditional-expr, is-expr, mapping-constructor-expr, member-access-expr, module-type-defn, record-type, string

type Person record {|
    int id;
    string name;
|};

function init() {
    Person p = {id: 5, name: "Mike"};
    string? nm = "name";

    io:println(p[nm is string ? "name" : ""]); // @output Mike
}

Test-Case: output
Description: Test member access expression at module level.
Labels: mapping-constructor-expr, member-access-expr, module-init-var-decl, module-type-defn, record-type, string

type Person record {|
    int id;
    string name;
|};

Person p = {id: 5, name: "Mike"};

string nm = p["name"];

function init() {
    io:println(nm); // @output Mike
}

Test-Case: output
Description: Test member access expression when the basic type of the container expression is inferred.
Labels: mapping-constructor-expr, member-access-expr, module-type-defn, record-type, var

function init() {
    var p = {id: 5, name: "Mike"};

    io:println(p["id"]); // @output 5
}

Test-Case: output
Description: Test member access expression with container expression of type record as array member.
Labels: array-type, int, list-constructor-expr, mapping-constructor-expr, member-access-expr, module-type-defn,
        record-type

type Person record {|
    int id;
    string name;
|};

function init() {
    Person p1 = {id: 5, name: "Mike"};
    Person p2 = {id: 1, name: "John"};

    int[] arr = [p1["id"], p2["id"]];
    io:println(arr[1]); // @output 1
}

Test-Case: output
Description: Test member access expression with container expression of type record as default expression
             for a field.
Labels: field-access-expr, intersection-type, mapping-constructor-expr, member-access-expr, module-init-var-decl,
        module-type-defn, readonly-type, record-type

type Person record {|
    int id;
    string name;
|};

final Person & readonly p1 = {id: 5, name: "Mike"};

type Record record {|
    int a = p1["id"];
|};

function init() {
    Record r = {};
    io:println(r.a); // @output 5
}

Test-Case: output
Description: Test member access expression with container expression of type record as defaultable
             function parameter.
Labels: defaultable-param, function-call-expr, intersection-type, mapping-constructor-expr, member-access-expr,
        method-call-expr, module-init-var-decl, module-type-defn, readonly-type, record-type

type Person record {|
    int id;
    string name;
|};

final Person & readonly p1 = {id: 5, name: "Mike"};

function init() {
    io:println(getRecord()); // @output 5
}

function getRecord(int id = p1["id"]) returns int {
    return id;
}

Test-Case: output
Description: Test member access expression with container expression of type record as expression in
             return statement.
Labels: function-call-expr, mapping-constructor-expr, member-access-expr, module-type-defn, record-type, return-stmt

type Person record {|
    int id;
    string name;
|};

function init() {
    io:println(getRecordId()); // @output 5
}

function getRecordId() returns int {
    Person p1 = {id: 5, name: "Mike"};
    return p1["id"];
}

Test-Case: output
Description: Test assigning a value to member access expression.
Labels: mapping-constructor-expr, member-access-lvexpr, module-type-defn, record-type

type Person record {|
    int id;
    string name;
|};

function init() {
    Person p1 = {id: 5, name: "Mike"};

    p1["id"] = 7;
    io:println(p1["id"]); // @output 7
}

Test-Case: error
Description: Test accessing members of an invalid structure.
Labels: error-type, mapping-constructor-expr, member-access-expr, module-type-defn, record-type, union-type

type Person record {|
    int id;
    string name;
|};

function errorFunction() {
    Person|error p1 = {id: 5, name: "Mike"};

    _ = p1["id"]; // @error type (Person|error) does not support member access
}

Test-Case: error
Description: Test assigning an invalid value to member access expression.
Labels: mapping-constructor-expr, member-access-expr, module-type-defn, record-type, string

type Person record {|
    int id;
    string name;
|};

function errorFunction() {
    Person p1 = {id: 5, name: "Mike"};

    p1["id"] = "7"; // @error expected int, found string
}

Test-Case: error
Description: Test invalid member access using multi key expression.
Labels: mapping-constructor-expr, member-access-expr, module-type-defn, record-type, string

type Person record {|
    int id;
    string name;
|};

function errorFunction() {
    Person p1 = {id: 5, name: "Mike"};

    _ = p1["id", "name"]; // @error member access with multi-key expression is not allowed with record
}
