Test-Case: output
Description: Test unary positive expression for positive integers, no overflow scenarios.
Labels: DecimalNumber, int, unary-plus

function init() {
   int a = 1;
   a = +a;
   int b = 101;
   b = +b;
   int c = 0;
   c = +c;
   int d = 9223372036854775807;
   d = +d;
   io:println(a); // @output 1
   io:println(b); // @output 101
   io:println(c); // @output 0
   io:println(d); // @output 9223372036854775807
}

Test-Case: output
Description: Test unary positive expression for negative integers with no overflow scenarios.
Labels: DecimalNumber, int, signed-zero, unary-minus, unary-plus

function init() {
   int a = -1;
   a = +a;
   int b = -101;
   b = +b;
   int c = -0;
   c = +c;
   int d = -9223372036854775807;
   d = +d;
   io:println(a); // @output -1
   io:println(b); // @output -101
   io:println(c); // @output 0
   io:println(d); // @output -9223372036854775807
}

Test-Case: output
Description: Test unary plus expression using HexIntLiteral.
Labels: HexIntLiteral, unary-plus

function init() {
   io:println(+0xAB55); // @output 43861
   io:println(+0xABF5); // @output 44021
   io:println(+0xDBF5); // @output 56309
}

Test-Case: output
Description: Test unary positive expression for positive int:Unsigned8 with no overflow scenarios.
Labels: DecimalNumber, int:Unsigned8, unary-plus

function init() {
   int:Unsigned8 a = 1;
   int:Unsigned8 a1 = +a;
   int:Unsigned8 b = 2;
   int:Unsigned8 b1 = +b;
   int:Unsigned8 c = 101;
   int:Unsigned8 c1 = +c;
   int:Unsigned8 d = 255;
   int:Unsigned8 d1 = +d;

   io:println(a1); // @output 1
   io:println(b1); // @output 2
   io:println(c1); // @output 101
   io:println(d1); // @output 255
}

Test-Case: output
Description: Test unary positive expression for positive byte with no overflow scenarios.
Labels: byte, DecimalNumber, unary-plus

function init() {
   byte a = 1;
   byte a1 = +a;
   byte b = 2;
   byte b1 = +b;
   byte c = 101;
   byte c1 = +c;
   byte d = 255;
   byte d1 = +d;

   io:println(a1); // @output 1
   io:println(b1); // @output 2
   io:println(c1); // @output 101
   io:println(d1); // @output 255
}

Test-Case: output
Description: Test unary positive expression for positive int:Unsigned16 with no overflow scenarios.
Labels: DecimalNumber, int:Unsigned16, unary-plus

function init() {
   int:Unsigned16 a = 1;
   int:Unsigned16 a1 = +a;
   int:Unsigned16 b = 2;
   int:Unsigned16 b1 = +b;
   int:Unsigned16 c = 40123;
   int:Unsigned16 c1 = +c;
   int:Unsigned16 d = 65535;
   int:Unsigned16 d1 = +d;

   io:println(a1); // @output 1
   io:println(b1); // @output 2
   io:println(c1); // @output 40123
   io:println(d1); // @output 65535
}

Test-Case: output
Description: Test unary positive expression for positive int:Unsigned32 with no overflow scenarios.
Labels: DecimalNumber, int:Unsigned32, unary-plus

function init() {
   int:Unsigned32 a = 1;
   int:Unsigned32 a1 = +a;
   int:Unsigned32 b = 2;
   int:Unsigned32 b1 = +b;
   int:Unsigned32 c = 40123;
   int:Unsigned32 c1 = +c;
   int:Unsigned32 d = 429496729;
   int:Unsigned32 d1 = +d;

   io:println(a1); // @output 1
   io:println(b1); // @output 2
   io:println(c1); // @output 40123
   io:println(d1); // @output 429496729
}

Test-Case: output
Description: Test unary positive expression for positive int:Signed8 with no overflow scenarios.
Labels: DecimalNumber, int:Signed8, unary-plus

function init() {
   int:Signed8 a = 1;
   int:Signed8 a1 = +a;
   int:Signed8 b = 2;
   int:Signed8 b1 = +b;
   int:Signed8 c = 101;
   int:Signed8 c1 = +c;
   int:Signed8 d = 127;
   int:Signed8 d1 = +d;

   io:println(a1); // @output 1
   io:println(b1); // @output 2
   io:println(c1); // @output 101
   io:println(d1); // @output 127
}

Test-Case: output
Description: Test unary positive expression for negative int:Signed8 with no overflow scenarios.
Labels: DecimalNumber, int:Signed8, unary-minus, unary-plus

function init() {
   int:Signed8 a = -1;
   int:Signed8 a1 = +a;
   int:Signed8 b = -2;
   int:Signed8 b1 = +b;
   int:Signed8 c = -101;
   int:Signed8 c1 = +c;
   int:Signed8 d = -128;
   int:Signed8 d1 = +d;

   io:println(a1); // @output -1
   io:println(b1); // @output -2
   io:println(c1); // @output -101
   io:println(d1); // @output -128
}

Test-Case: output
Description: Test unary positive expression for positive int:Signed16 with no overflow scenarios.
Labels: DecimalNumber, int:Signed16, unary-plus

function init() {
   int:Signed16 a = 1;
   int:Signed16 a1 = +a;
   int:Signed16 b = 2;
   int:Signed16 b1 = +b;
   int:Signed16 c = 12345;
   int:Signed16 c1 = +c;
   int:Signed16 d = 32767;
   int:Signed16 d1 = +d;

   io:println(a1); // @output 1
   io:println(b1); // @output 2
   io:println(c1); // @output 12345
   io:println(d1); // @output 32767
}

Test-Case: output
Description: Test unary positive expression for negative int:Signed16 with no overflow scenarios.
Labels: DecimalNumber, int:Signed16, unary-minus, unary-plus

function init() {
   int:Signed16 a = -1;
   int:Signed16 a1 = +a;
   int:Signed16 b = -2;
   int:Signed16 b1 = +b;
   int:Signed16 c = -12345;
   int:Signed16 c1 = +c;
   int:Signed16 d = -32768;
   int:Signed16 d1 = +d;

   io:println(a1); // @output -1
   io:println(b1); // @output -2
   io:println(c1); // @output -12345
   io:println(d1); // @output -32768
}

Test-Case: output
Description: Test unary positive expression for positive int:Signed32 with no overflow scenarios.
Labels: DecimalNumber, int:Signed32, unary-plus

function init() {
   int:Signed32 a = 1;
   int:Signed32 a1 = +a;
   int:Signed32 b = 2;
   int:Signed32 b1 = +b;
   int:Signed32 c = 40123;
   int:Signed32 c1 = +c;
   int:Signed32 d = 2147483647;
   int:Signed32 d1 = +d;

   io:println(a1); // @output 1
   io:println(b1); // @output 2
   io:println(c1); // @output 40123
   io:println(d1); // @output 2147483647
}

Test-Case: output
Description: Test unary positive expression for negative int:Signed32 with no overflow scenarios.
Labels: DecimalNumber, int:Signed32, unary-minus, unary-plus

function init() {
   int:Signed32 a = -1;
   int:Signed32 a1 = +a;
   int:Signed32 b = -2;
   int:Signed32 b1 = +b;
   int:Signed32 c = -40123;
   int:Signed32 c1 = +c;
   int:Signed32 d = -2147483648;
   int:Signed32 d1 = +d;

   io:println(a1); // @output -1
   io:println(b1); // @output -2
   io:println(c1); // @output -40123
   io:println(d1); // @output -2147483648
}

Test-Case: output
Description: Test unary positive expression for positive user-defined sub-types of int with
             no overflow scenarios.
Labels: DecimalNumber, module-type-defn, singleton-type, unary-plus, union-type

type Ints -2|-1|0|1|2;

function init() {
   Ints a = 1;
   Ints b = 2;
   Ints c = 0;

   io:println(+a); // @output 1
   io:println(+b); // @output 2
   io:println(+c); // @output 0
}

Test-Case: output
Description: Test unary positive expression for negative user-defined sub-types of int with
             no overflow scenarios.
Labels: DecimalNumber, module-type-defn, singleton-type, unary-minus, unary-plus, union-type

type Ints -2|-1|0|1|2;

function init() {
   Ints a = -1;
   Ints b = -2;

   io:println(+a); // @output -1
   io:println(+b); // @output -2
}

Test-Case: output
Description: Test unary plus expression for user-defined sub-types of integer built-in sub-types with
             no overflow scenarios.
Labels: DecimalNumber, int:Signed8, int:Unsigned32, module-type-defn, unary-plus, union-type

type Ints int:Signed8|int:Unsigned32;

function init() {
   Ints a = 12;
   int:Signed8|int:Unsigned32 b = 12;
   int a1 = +a;
   int b1 = +b;

   io:println(a1); // @output 12
   io:println(b1); // @output 12
}

Test-Case: output
Description: Test unary positive expression for positive optional integers with no overflow scenarios.
Labels: DecimalNumber, int, nil-literal, numeric-nil-lifting, optional-type, unary-plus, value:toBalString

function init() {
   int? a = 1;
   int? b = 101;
   int? c = 0;
   int? d = ();
   io:println(+a); // @output 1
   io:println(+b); // @output 101
   io:println(+c); // @output 0
   io:println((+d).toBalString()); // @output ()
}

Test-Case: output
Description: Test unary positive expression for negative optional integers with no overflow scenarios.
Labels: DecimalNumber, int, nil-literal, numeric-nil-lifting, optional-type, unary-minus, unary-plus, value:toBalString

function init() {
   int? a = -1;
   int? b = -101;
   int? c = ();
   io:println(+a); // @output -1
   io:println(+b); // @output -101
   io:println((+c).toBalString()); // @output ()
}

Test-Case: output
Description: Test unary positive expression for positive optional int:Unsigned8 with no overflow scenarios.
Labels: DecimalNumber, int:Unsigned8, nil-literal, numeric-nil-lifting, optional-type, unary-plus, value:toBalString

function init() {
   int:Unsigned8? a = 1;
   int:Unsigned8? b = 2;
   int:Unsigned8? c = ();
   int:Unsigned8? d = 255;

   io:println(+a); // @output 1
   io:println(+b); // @output 2
   io:println((+c).toBalString()); // @output ()
   io:println(+d); // @output 255
}

Test-Case: output
Description: Test unary positive expression for positive optional byte with no overflow scenarios.
Labels: byte, DecimalNumber, nil-literal, numeric-nil-lifting, optional-type, unary-plus, value:toBalString

function init() {
   byte? a = 1;
   byte? b = 2;
   byte? c = ();
   byte? d = 255;

   io:println(+a); // @output 1
   io:println(+b); // @output 2
   io:println((+c).toBalString()); // @output ()
   io:println(+d); // @output 255
}

Test-Case: output
Description: Test unary positive expression for positive optional int:Unsigned16 with no overflow scenarios.
Labels: DecimalNumber, int:Unsigned16, nil-literal, numeric-nil-lifting, optional-type, unary-plus, value:toBalString

function init() {
   int:Unsigned16? a = 1;
   int:Unsigned16? b = 2;
   int:Unsigned16? c = ();
   int:Unsigned16? d = 65535;

   io:println(+a); // @output 1
   io:println(+b); // @output 2
   io:println((+c).toBalString()); // @output ()
   io:println(+d); // @output 65535
}

Test-Case: output
Description: Test unary positive expression for positive optional int:Unsigned32 with no overflow scenarios.
Labels: DecimalNumber, int:Unsigned32, nil-literal, numeric-nil-lifting, optional-type, unary-plus, value:toBalString

function init() {
   int:Unsigned32? a = 1;
   int:Unsigned32? b = 2;
   int:Unsigned32? c = ();
   int:Unsigned32? d = 429496729;

   io:println(+a); // @output 1
   io:println(+b); // @output 2
   io:println((+c).toBalString()); // @output ()
   io:println(+d); // @output 429496729
}

Test-Case: output
Description: Test unary positive expression for positive optional int:Signed8 with no overflow scenarios.
Labels: DecimalNumber, int:Signed8, nil-literal, numeric-nil-lifting, optional-type, unary-minus, unary-plus,
        value:toBalString

function init() {
   int:Signed8? a = 1;
   int:Signed8? b = 2;
   int:Signed8? c = ();
   int:Signed8? d = 127;

   io:println(+a); // @output 1
   io:println(+b); // @output 2
   io:println((+c).toBalString()); // @output ()
   io:println(+d); // @output 127
}

Test-Case: output
Description: Test unary positive expression for negative optional int:Signed8 with no overflow scenarios.
Labels: DecimalNumber, int:Signed8, nil-literal, numeric-nil-lifting, optional-type, unary-minus, unary-plus,
        value:toBalString

function init() {
   int:Signed8? a = -1;
   int:Signed8? b = -2;
   int:Signed8? c = ();
   int:Signed8? d = -128;

   io:println(+a); // @output -1
   io:println(+b); // @output -2
   io:println((+c).toBalString()); // @output ()
   io:println(+d); // @output -128
}

Test-Case: output
Description: Test unary positive expression for positive optional int:Signed16 with no overflow scenarios.
Labels: DecimalNumber, int:Signed16, nil-literal, numeric-nil-lifting, optional-type, unary-plus, value:toBalString

function init() {
   int:Signed16? a = 1;
   int:Signed16? b = 2;
   int:Signed16? c = ();
   int:Signed16? d = 32767;

   io:println(+a); // @output 1
   io:println(+b); // @output 2
   io:println((+c).toBalString()); // @output ()
   io:println(+d); // @output 32767
}

Test-Case: output
Description: Test unary positive expression for negative optional int:Signed16 with no overflow scenarios.
Labels: DecimalNumber, int:Signed16, nil-literal, numeric-nil-lifting, optional-type, unary-minus, unary-plus,
        value:toBalString

function init() {
   int:Signed16? a = -1;
   int:Signed16? b = -2;
   int:Signed16? c = ();
   int:Signed16? d = -32768;

   io:println(+a); // @output -1
   io:println(+b); // @output -2
   io:println((+c).toBalString()); // @output ()
   io:println(+d); // @output -32768
}

Test-Case: output
Description: Test unary positive expression for positive optional int:Signed32 with no overflow scenarios.
Labels: DecimalNumber, int:Signed32, nil-literal, numeric-nil-lifting, optional-type, unary-plus, value:toBalString

function init() {
   int:Signed32? a = 1;
   int:Signed32? b = 2;
   int:Signed32? c = ();
   int:Signed32? d = 2147483647;

   io:println(+a); // @output 1
   io:println(+b); // @output 2
   io:println((+c).toBalString()); // @output ()
   io:println(+d); // @output 2147483647
}

Test-Case: output
Description: Test unary positive expression for negative optional int:Signed32 with no overflow scenarios.
Labels: DecimalNumber, int:Signed32, nil-literal, numeric-nil-lifting, optional-type, unary-minus, unary-plus,
        value:toBalString

function init() {
   int:Signed32? a = -1;
   int:Signed32? b = -2;
   int:Signed32? c = ();
   int:Signed32? d = -2147483648;

   io:println(+a); // @output -1
   io:println(+b); // @output -2
   io:println((+c).toBalString()); // @output ()
   io:println(+d); // @output -2147483648
}

Test-Case: output
Description: Test unary positive expression for positive optional user-defined sub-types of int with
             no overflow scenarios.
Labels: DecimalNumber, module-type-defn, numeric-nil-lifting, optional-type, singleton-type, unary-plus, union-type,
        value:toBalString

type Ints -2|-1|0|1|2;

function init() {
   Ints? a = 1;
   Ints? b = ();
   Ints? c = 0;

   io:println(+a); // @output 1
   io:println((+b).toBalString()); // @output ()
   io:println(+c); // @output 0
}

Test-Case: output
Description: Test unary positive expression for negative optional user-defined sub-types of int with
             no overflow scenarios.
Labels: DecimalNumber, module-type-defn, numeric-nil-lifting, optional-type, singleton-type, unary-minus, unary-plus,
        union-type, value:toBalString

type Ints -2|-1|0|1|2;

function init() {
   Ints? a = -1;
   Ints? b = ();
   Ints? c = -2;

   io:println(+a); // @output -1
   io:println((+b).toBalString()); // @output ()
   io:println(+c); // @output -2
}

Test-Case: output
Description: Test unary plus expression for optional user-defined sub-types of integer built-in sub-types with
             no overflow scenarios.
Labels: DecimalNumber, int:Signed8, int:Unsigned32, module-type-defn, numeric-nil-lifting, optional-type, unary-plus,
        union-type

type Ints int:Signed8|int:Unsigned32;

function init() {
   Ints? a = 12;
   int:Signed8|int:Unsigned32? b = 12;

   io:println(+a); // @output 12
   io:println(+b); // @output 12
}

Test-Case: output
Description: Test unary positive expression for positive floats with no overflow scenarios.
Labels: DecimalFloatingPointNumber, float, unary-plus

function init() {
   float a = 1.0;
   a = +a;
   float b = 101.5;
   b = +b;
   float c = 0;
   c = +c;
   float d = 922439289.0;
   d = +d;
   io:println(a); // @output 1.0
   io:println(b); // @output 101.5
   io:println(c); // @output 0.0
   io:println(d); // @output 9.22439289E8
}

Test-Case: output
Description: Test unary positive expression for negative floats with no overflow scenarios.
Labels: DecimalFloatingPointNumber, float, unary-minus, unary-plus

function init() {
   float a = -1.0;
   a = +a;
   float b = -101.5;
   b = +b;
   float c = -922439289.0;
   c = +c;
   io:println(a); // @output -1.0
   io:println(b); // @output -101.5
   io:println(c); // @output -9.22439289E8
}

Test-Case: output
Description: Test unary plus expression for very large floating point number.
Labels: DecimalFloatingPointNumber, float, FloatingPointTypeSuffix, unary-plus

function init() {
   float a = 1.0 / 0;
   float b = +a;
   io:println(b); // @output Infinity
}

Test-Case: output
Description: Test unary positive expression for positive user-defined sub-types of float with
             no overflow scenarios.
Labels: DecimalFloatingPointNumber, module-type-defn, singleton-type, unary-plus, union-type

type Floats -2.0|-1.0|0.0|1.0|2.0;

function init() {
   Floats a = 1.0;
   Floats b = 2.0;
   Floats c = 0;

   io:println(+a); // @output 1.0
   io:println(+b); // @output 2.0
   io:println(+c); // @output 0.0
}

Test-Case: output
Description: Test unary plus expression for user-defined sub-types of float
Labels: DecimalFloatingPointNumber, float, FloatingPointTypeSuffix, module-const-decl, module-type-defn, singleton-type,
        unary-minus, unary-plus, union-type

const float A = -10f;
const float B = -20f;

type Floats1 -2.0|-1.0|0.0|1.0|2.0;

type Floats2 A|B;

type Floats3 Floats1|Floats2;

function init() {
   Floats2 a = -10f;
   Floats3 b = -1.0;

   float a1 = +a;
   float b1 = +b;

   io:println(+a1); // @output -10.0
   io:println(+b1); // @output -1.0
}

Test-Case: output
Description: Test unary positive expression for positive decimals with no overflow scenarios.
Labels: decimal, DecimalFloatingPointNumber, unary-plus

function init() {
   decimal a = 1.0;
   a = +a;
   decimal b = 101.5;
   b = +b;
   decimal c = 0;
   c = +c;
   decimal d = 922439289.0;
   d = +d;
   io:println(a); // @output 1.0
   io:println(b); // @output 101.5
   io:println(c); // @output 0
   io:println(d); // @output 922439289.0
}

Test-Case: output
Description: Test unary positive expression for negative decimals with no overflow scenarios.
Labels: decimal, DecimalFloatingPointNumber, unary-minus, unary-plus

function init() {
   decimal a = -1.0;
   a = +a;
   decimal b = -101.5;
   b = +b;
   decimal c = 0;
   c = +c;
   decimal d = -922439289.0;
   d = +d;
   io:println(a); // @output -1.0
   io:println(b); // @output -101.5
   io:println(c); // @output 0
   io:println(d); // @output -922439289.0
}

Test-Case: output
Description: Test unary positive expression for user-defined sub-types of decimals with
             no overflow scenarios.
Labels: DecimalFloatingPointNumber, FloatingPointTypeSuffix, module-type-defn, singleton-type, unary-plus, union-type

type Decimals -2.0d|-1.0d|0d|1.0d|2.0d;

function init() {
   Decimals a = 1.0;
   Decimals b = 2.0;
   Decimals c = 0;

   io:println(+a); // @output 1.0
   io:println(+b); // @output 2.0
   io:println(+c); // @output 0
}

Test-Case: output
Description: Test unary plus expression for positive user-defined sub-types of decimals with
             no overflow scenarios.
Labels: decimal, DecimalFloatingPointNumber, FloatingPointTypeSuffix, module-const-decl, module-type-defn,
        singleton-type, unary-minus, unary-plus, union-type

const decimal A = -10d;
const decimal B = -20d;

type Decimals1 -2.0d|-1.0d|0d|1.0d|2.0d;

type Decimals2 A|B;

type Decimals3 Decimals1|Decimals2;

function init() {
   Decimals2 a = -10;
   Decimals3 b = -1.0;

   io:println(+a); // @output -10
   io:println(+b); // @output -1.0
}

Test-Case: output
Description: Test unary positive expression for positive optional floats with no overflow scenarios.
Labels: DecimalFloatingPointNumber, float, nil-literal, numeric-nil-lifting, optional-type, unary-plus,
        value:toBalString

function init() {
   float? a = 1.0;
   float? b = 101.5;
   float? c = ();
   float? d = 922439289.0;
   io:println(+a); // @output 1.0
   io:println(+b); // @output 101.5
   io:println((+c).toBalString()); // @output ()
   io:println(+d); // @output 9.22439289E8
}

Test-Case: output
Description: Test unary positive expression for negative optional floats with no overflow scenarios.
Labels: DecimalFloatingPointNumber, float, nil-literal, numeric-nil-lifting, optional-type, unary-minus, unary-plus,
        value:toBalString

function init() {
   float? a = -1.0;
   float? b = ();
   float? c = -922439289.0;
   io:println(+a); // @output -1.0
   io:println((+b).toBalString()); // @output ()
   io:println(+c); // @output -9.22439289E8
}

Test-Case: output
Description: Test unary positive expression for positive optional user-defined sub-types of float with
             no overflow scenarios.
Labels: DecimalFloatingPointNumber, float, module-type-defn, numeric-nil-lifting, optional-type, singleton-type,
        unary-plus, union-type, value:toBalString

type Floats -2.0|-1.0|0.0|1.0|2.0;

function init() {
   Floats? a = 1.0;
   Floats? b = 2.0;
   Floats? c = ();

   io:println(+a); // @output 1.0
   io:println(+b); // @output 2.0
   io:println((+c).toBalString()); // @output ()
}

Test-Case: output
Description: Test unary plus expression for optional user-defined sub-types of float
Labels: DecimalFloatingPointNumber, float, FloatingPointTypeSuffix, module-const-decl, module-type-defn,
        numeric-nil-lifting, optional-type, singleton-type, unary-minus, unary-plus, union-type

const float A = -10f;
const float B = -20f;

type Floats1 -2.0|-1.0|0.0|1.0|2.0;

type Floats2 A|B;

type Floats3 Floats1|Floats2;

function init() {
   Floats2? a = -10f;
   Floats3? b = -1.0;

   io:println(+a); // @output -10.0
   io:println(+b); // @output -1.0
}

Test-Case: output
Description: Test unary positive expression for positive optional decimals, no overflow scenarios.
Labels: decimal, DecimalFloatingPointNumber, nil-literal, numeric-nil-lifting, optional-type, unary-plus,
        value:toBalString

function init() {
   decimal? a = 1.0;
   decimal? b = 101.5;
   decimal? c = ();
   decimal? d = 922439289.0;
   io:println(+a); // @output 1.0
   io:println(+b); // @output 101.5
   io:println((+c).toBalString()); // @output ()
   io:println(+d); // @output 922439289.0
}

Test-Case: output
Description: Test unary positive expression for negative optional decimals, no overflow scenarios.
Labels: decimal, DecimalFloatingPointNumber, nil-literal, numeric-nil-lifting, optional-type, unary-minus, unary-plus,
        value:toBalString

function init() {
   decimal? a = -1.0;
   decimal? b = -101.5;
   decimal? c = ();
   decimal? d = -922439289.0;
   io:println(+a); // @output -1.0
   io:println(+b); // @output -101.5
   io:println((+c).toBalString()); // @output ()
   io:println(+d); // @output -922439289.0
}

Test-Case: output
Description: Test unary plus expression for optional user-defined sub-types of decimals,
             no overflow scenarios.
Labels: DecimalFloatingPointNumber, FloatingPointTypeSuffix, module-type-defn, numeric-nil-lifting, optional-type,
        singleton-type, unary-minus, unary-plus, union-type

type Decimals -2.0d|-1.0d|0d|1.0d|2.0d;

function init() {
   Decimals? a = 1.0;
   Decimals? b = 2.0;
   Decimals? c = 0;

   io:println(+a); // @output 1.0
   io:println(+b); // @output 2.0
   io:println(+c); // @output 0
}

Test-Case: output
Description: Test unary plus expression for user-defined sub-types of decimals,
             no overflow scenarios.
Labels: DecimalFloatingPointNumber, FloatingPointTypeSuffix, module-const-decl, module-type-defn, numeric-nil-lifting,
        optional-type, singleton-type, unary-minus, unary-plus, union-type

const decimal A = -10d;
const decimal B = -20d;

type Decimals1 -2.0d|-1.0d|0d|1.0d|2.0d;

type Decimals2 A|B;

type Decimals3 Decimals1|Decimals2;

function init() {
   Decimals2? a = -10;
   Decimals3? b = -1.0;

   io:println(+a); // @output -10
   io:println(+b); // @output -1.0
}

Test-Case: output
Description: Test field and member access as unary positive operands.
Labels: array-type, DecimalNumber, field-access-expr, int, list-constructor-expr, mapping-constructor-expr,
        member-access-expr, module-type-defn, record-type, unary-plus

type Record record {
   int x;
};

function init() {
   Record c = {x: 10};
   int[] d = [30, 40];
   int e = +d[0];
   int f = +c.x;
   io:println(e); // @output 30
   io:println(f); // @output 10
}

Test-Case: output
Description: Test function call as unary negation operand.
Labels: DecimalNumber, function-call-expr, int, unary-plus

public function main() {
   int a = +getInt();
   io:println(a); // @output 5
}

function getInt() returns int {
   return 5;
}

Test-Case: output
Description: Test let expression in unary positive operands.
Labels: DecimalNumber, int, let-expr, unary-plus

function init() {
   int a = +(let int h1 = 3 * 4 in h1);
   io:println(a); // @output 12
}

Test-Case: output
Description: Test multiplicative and additive expression in unary positive operands.
Labels: additive-expr, DecimalNumber, int, multiplicative-expr, unary-plus

function init() {
   int a = +(1 + 49);
   int b = +(23 * 4);
   int c = +(100 / 4);
   int d = +(99 % 5);
   io:println(a); // @output 50
   io:println(b); // @output 92
   io:println(c); // @output 25
   io:println(d); // @output 4
}

Test-Case: output
Description: Test assignability result of unary positive expression to any.
Labels: any, DecimalNumber, int, unary-plus

function init() {
   int a = 5;
   any b = +a;
   io:println(b == 5); // @output true
}

Test-Case: output
Description: Test assignability result of unary positive expression to union type.
Labels: DecimalNumber, int, string, unary-plus, union-type

function init() {
   int a = 5;
   int|string b = +a;
   io:println(b == 5); // @output true
}

Test-Case: output
Description: Test unary expression as the operand of unary positive.
Labels: DecimalNumber, int, unary-complement, unary-minus, unary-plus

function init() {
   int a = 5;
   a = ++5;
   io:println(a); // @output 5

   a = 5;
   a = +-5;
   io:println(a); // @output -5

   a = 5;
   a = +~5;
   io:println(a); // @output -6
}

Test-Case: output
Description: Test type cast expression in integer unary plus operands.
Labels: DecimalNumber, int, type-cast-expr, unary-plus

function init() {
   int i = +<int> 6;
   io:println(i); // @output 6
}

Test-Case: output
Description: Test type cast expression in float unary plus operands.
Labels: DecimalNumber, float, type-cast-expr, unary-plus

function init() {
   float i = +<float> 6;
   io:println(i); // @output 6.0
}

Test-Case: output
Description: Test shift expressions as unary positive operands.
Labels: DecimalNumber, int, shift-expr, unary-plus

function init() {
   int p = +(1 << 2);
   io:println(p); // @output 4
}

Test-Case: output
Description: Test binary bitwise expressions as unary positive operands.
Labels: binary-bitwise-expr, DecimalNumber, int, unary-plus

function init() {
   int a = +(2 & 6);
   int b = +(2 ^ 6);
   io:println(a); // @output 2
   io:println(b); // @output 4
}

Test-Case: output
Description: Test conditional expressions as unary positive operands.
Labels: binary-conditional-expr, DecimalNumber, error-type, int, optional-type, ternary-conditional-expr, unary-plus,
        union-type

function init() {
   int|error a = 12;
   int? b = ();
   int c = +(a is error ? 2 : a);
   int d =  +(b ?: 13);
   io:println(c); // @output 12
   io:println(d); // @output 13
}

Test-Case: output
Description: Test checking expressions as unary positive operands.
Labels: check, checkpanic, DecimalNumber, error-type, int, optional-type, unary-plus, union-type

function init() returns error? {
   int|error a = 12;
   int c = +check a;
   int d = +checkpanic a;
   io:println(c); // @output 12
   io:println(d); // @output 12
}

Test-Case: output
Description: Test static type of result is contextually expected type.
Labels: decimal, DecimalFloatingPointNumber, float, int, unary-plus

function init() {
   float a = +12;
   decimal b = +12;
   io:println(a); // @output 12.0
   io:println(b); // @output 12
}

Test-Case: output
Description: Test unary plus expression with singleton type operand.
Labels: DecimalNumber, singleton-type, unary-plus

function init() {
   +1 a = +1;
   io:println(a); // @output 1
}

Test-Case: error
Description: Test the static type of operands belonging to non-numeric basic types resulting in an error
           in unary expression.
Labels: anydata, string, unary-plus

function errorFunction(string a, anydata n) {
   string _ = +a; // @error '+' is not allowed with operands of non-numeric basic types
   int _ = +"12"; // @error '+' is not allowed with operands of non-numeric basic types
   _ = +n; // @error '+' is not allowed with operands of non-numeric basic types
}

Test-Case: error
Description: Test the static type of the result is the basic type of the static type of the operand, 
           for int type operands via invalid assignment with inference.
Labels: decimal, float, int, unary-plus, var

function errorFunction(int a) {
   var a1 = +a;
   float _ = a1; // @error static type of unary-plus expression with int operands is int

   var a3 = +a;
   decimal _ = a3; // @error static type of unary-plus expression with int operands is int
}

Test-Case: error
Description: Test the static type of the result is the basic type of the static type of the operand, 
           for float type operands via invalid assignment with inference.
Labels: decimal, float, int, unary-plus, var

function errorFunction(float c) {
   var a1 = +c;
   int _ = a1; // @error static type of unary-plus expression with float operands is float

   var a3 = +c;
   decimal _ = a3; // @error static type of unary-plus expression with float operands is float
}

Test-Case: error
Description: Test the static type of the result is the basic type of the static type of the operand, 
           for decimal type operands via invalid assignment with inference.
Labels: decimal, float, int, unary-plus, var

function errorFunction(decimal c) {
   var a1 = +c;
   int _ = a1; // @error static type of unary-plus expression with decimal operands is decimal

   var a3 = +c;
   float _ = a3; // @error static type of unary-plus expression with decimal operands is decimal
}

Test-Case: error
Description: Test for optional type the static type of the result being the basic type of the operands via invalid assignment.
Labels: decimal, float, int, optional-type, unary-plus

function errorFunction(int? a, float? b, decimal? c) {
   int _ = +a; // @error incompatible types: expected 'int', found 'int?'
   float _ = +b; // @error incompatible types: expected 'float', found 'float?'
   decimal _ = +c; // @error incompatible types: expected 'decimal', found 'decimal?'
}
