Test-Case: output
Description: Test `toHexString` function with integers of type Signed32.
Labels: DecimalNumber, function-call-expr, int:Signed32, int:toHexString, method-call-expr, string, unary-minus

function init() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = 10;
    int:Signed32 a3 = 2147483647;

    string b1 = a1.toHexString();
    io:println(b1); // @output -80000000

    b1 = a2.toHexString();
    io:println(b1); // @output a

    b1 = int:toHexString(a3);
    io:println(b1); // @output 7fffffff
}

Test-Case: output
Description: Test `toHexString` function with hex int literals of type Signed32.
Labels: function-call-expr, HexIntLiteral, int:Signed32, int:toHexString, method-call-expr, string, unary-minus

function init() {
    int:Signed32 a1 = 0xffecda;
    int:Signed32 a2 = -0x123fAbCD;

    string b1 = a1.toHexString();
    io:println(b1); // @output ffecda

    b1 = a2.toHexString();
    io:println(b1); // @output -123fabcd

    b1 = int:toHexString(a1);
    io:println(b1); // @output ffecda

    io:println(int:toHexString(a2)); // @output -123fabcd
}

Test-Case: output
Description: Test `toHexString` function with integers of type Signed16.
Labels: DecimalNumber, function-call-expr, int:Signed16, int:toHexString, method-call-expr, string, unary-minus

function init() {
    int:Signed16 a1 = -32768;
    int:Signed16 a2 = 10;
    int:Signed16 a3 = 32767;

    string b1 = a1.toHexString();
    io:println(b1); // @output -8000

    b1 = a2.toHexString();
    io:println(b1); // @output a

    b1 = int:toHexString(a3);
    io:println(b1); // @output 7fff
}

Test-Case: output
Description: Test `toHexString` function with hex int literals of type Signed16.
Labels: function-call-expr, HexIntLiteral, int:Signed16, int:toHexString, method-call-expr, string, unary-minus

function init() {
    int:Signed16 a1 = 0xacd;
    int:Signed16 a2 = -0x4FEa;

    string b1 = a1.toHexString();
    io:println(b1); // @output acd

    b1 = a2.toHexString();
    io:println(b1); // @output -4fea

    b1 = int:toHexString(a1);
    io:println(b1); // @output acd

    io:println(int:toHexString(a2)); // @output -4fea
}

Test-Case: output
Description: Test `toHexString` function with integers of type Signed8.
Labels: DecimalNumber, function-call-expr, int:Signed8, int:toHexString, method-call-expr, string, unary-minus

function init() {
    int:Signed8 a1 = -128;
    int:Signed8 a2 = -20;
    int:Signed8 a3 = 127;

    string b1 = a1.toHexString();
    io:println(b1); // @output -80

    b1 = a2.toHexString();
    io:println(b1); // @output -14

    b1 = int:toHexString(a3);
    io:println(b1); // @output 7f
}

Test-Case: output
Description: Test `toHexString` function with hex int literals of type Signed8.
Labels: function-call-expr, HexIntLiteral, int:Signed8, int:toHexString, method-call-expr, string, unary-minus

function init() {
    int:Signed8 a1 = 0x7d;
    int:Signed8 a2 = -0x7a;

    string b1 = a1.toHexString();
    io:println(b1); // @output 7d

    b1 = a2.toHexString();
    io:println(b1); // @output -7a

    b1 = int:toHexString(a1);
    io:println(b1); // @output 7d

    io:println(int:toHexString(a2)); // @output -7a
}

Test-Case: output
Description: Test `toHexString` function with integers of type Unsigned32.
Labels: DecimalNumber, function-call-expr, int:toHexString, int:Unsigned32, method-call-expr, string

function init() {
    int:Unsigned32 a1 = 0;
    int:Unsigned32 a2 = 125;
    int:Unsigned32 a3 = 36272;
    int:Unsigned32 a4 = 4294967295;

    string b1 = a1.toHexString();
    io:println(b1); // @output 0

    b1 = a2.toHexString();
    io:println(b1); // @output 7d

    b1 = int:toHexString(a3);
    io:println(b1); // @output 8db0

    io:println(a4.toHexString()); // @output ffffffff
}

Test-Case: output
Description: Test `toHexString` function with hex int literals of type Unsigned32.
Labels: function-call-expr, HexIntLiteral, int:toHexString, int:Unsigned32, method-call-expr, string

function init() {
    int:Unsigned32 a1 = 0xabc12DE;

    string b1 = a1.toHexString();
    io:println(b1); // @output abc12de

    io:println(int:toHexString(a1)); // @output abc12de
}

Test-Case: output
Description: Test `toHexString` function with integers of type Unsigned16.
Labels: DecimalNumber, function-call-expr, int:toHexString, int:Unsigned16, method-call-expr, string

function init() {
    int:Unsigned16 a1 = 0;
    int:Unsigned16 a2 = 125;
    int:Unsigned16 a3 = 2321;
    int:Unsigned16 a4 = 65535;

    string b1 = a1.toHexString();
    io:println(b1); // @output 0

    b1 = a2.toHexString();
    io:println(b1); // @output 7d

    b1 = int:toHexString(a3);
    io:println(b1); // @output 911

    io:println(a4.toHexString()); // @output ffff
}

Test-Case: output
Description: Test `toHexString` function with hex int literals of type Unsigned16.
Labels: function-call-expr, HexIntLiteral, int:toHexString, int:Unsigned16, method-call-expr, string

function init() {
    int:Unsigned16 a1 = 0xfAe1;

    string b1 = a1.toHexString();
    io:println(b1); // @output fae1

    io:println(int:toHexString(a1)); // @output fae1
}

Test-Case: output
Description: Test `toHexString` function with integers of type Unsigned8.
Labels: DecimalNumber, function-call-expr, int:toHexString, int:Unsigned8, method-call-expr, string

function init() {
    int:Unsigned8 a1 = 0;
    int:Unsigned8 a2 = 10;
    int:Unsigned8 a3 = 120;
    int:Unsigned8 a4 = 255;

    string b1 = a1.toHexString();
    io:println(b1); // @output 0

    b1 = a2.toHexString();
    io:println(b1); // @output a

    b1 = int:toHexString(a3);
    io:println(b1); // @output 78

    io:println(a4.toHexString()); // @output ff
}

Test-Case: output
Description: Test `toHexString` function with hex int literals of type Unsigned8.
Labels: function-call-expr, HexIntLiteral, int:toHexString, int:Unsigned8, method-call-expr, string

function init() {
    int:Unsigned8 a1 = 0xa2;

    string b1 = a1.toHexString();
    io:println(b1); // @output a2

    io:println(int:toHexString(a1)); // @output a2
}

Test-Case: output
Description: Test `toHexString` function with byte.
Labels: byte, DecimalNumber, function-call-expr, int:toHexString, method-call-expr, string

function init() {
    byte a1 = 0;
    byte a2 = 10;
    byte a3 = 120;
    byte a4 = 255;

    string b1 = a1.toHexString();
    io:println(b1); // @output 0

    b1 = a2.toHexString();
    io:println(b1); // @output a

    b1 = int:toHexString(a3);
    io:println(b1); // @output 78

    io:println(a4.toHexString()); // @output ff
}

Test-Case: output
Description: Test `toHexString` function with hex int literals of type byte.
Labels: byte, function-call-expr, HexIntLiteral, int:toHexString, method-call-expr, string

function init() {
    byte a1 = 0xa2;

    string b1 = a1.toHexString();
    io:println(b1); // @output a2

    io:println(int:toHexString(a1)); // @output a2
}

Test-Case: output
Description: Test `toHexString` function with integers of type int.
Labels: additive-expr, DecimalNumber, function-call-expr, int, int:MIN_VALUE, int:toHexString, int:Unsigned32,
        method-call-expr, string, unary-minus, unary-plus

function init() {
    int a1 = int:MIN_VALUE;
    int a2 = 125;
    int a3 = 9223372036854775807;
    int a4 = +1231238231;

    string b1 = a1.toHexString();
    io:println(b1); // @output -8000000000000000

    b1 = a2.toHexString();
    io:println(b1); // @output 7d

    io:println(a3.toHexString()); // @output 7fffffffffffffff

    io:println(int:toHexString(a3)); // @output 7fffffffffffffff

    io:println(int:toHexString(a4)); // @output 49633457
}

Test-Case: output
Description: Test `toHexString` function with hex int literals of type int.
Labels: function-call-expr, HexIntLiteral, int, int:toHexString, method-call-expr, string, unary-minus

function init() {
    int a1 = 0x4abcdef12;
    int a2 = -0x4ABCDEF12;

    string b1 = a1.toHexString();
    io:println(b1); // @output 4abcdef12

    b1 = a2.toHexString();
    io:println(b1); // @output -4abcdef12

    b1 = int:toHexString(a1);
    io:println(b1); // @output 4abcdef12

    io:println(int:toHexString(a2)); // @output -4abcdef12
}

Test-Case: output
Description: Test `toHexString` function with user-defined subtypes of int.
Labels: DecimalNumber, function-call-expr, int:toHexString, method-call-expr, module-const-decl, module-type-defn,
        singleton-type, string, union-type

const A = 10;
const B = 20;

type IntType1 10|20|30;

type IntType2 A|B;

type IntType3 IntType1|IntType2;

function init() {
    A a1 = 10;
    IntType1 a2 = 30;
    IntType2 a3 = 20;
    IntType3 a4 = 10;

    io:println(int:toHexString(a1)); // @output a

    string b1 = int:toHexString(a2);
    io:println(b1); // @output 1e

    io:println(B.toHexString()); // @output 14

    io:println(int:toHexString(a3)); // @output 14

    io:println(a4.toHexString()); // @output a
}

Test-Case: output
Description: Test `toHexString` function with int subtypes.
Labels: DecimalNumber, function-call-expr, int:Signed8, int:toHexString, int:Unsigned32, method-call-expr,
        module-type-defn, string, union-type

type IntType int:Signed8|int:Unsigned32;

function init() {
    int:Signed8|int:Unsigned32 a1 = 235262;
    IntType a2 = 4563;

    string b1 = a1.toHexString();
    io:println(b1); // @output 396fe

    b1 = int:toHexString(a1);
    io:println(b1); // @output 396fe

    b1 = a2.toHexString();
    io:println(b1); // @output 11d3

    b1 = int:toHexString(a2);
    io:println(b1); // @output 11d3
}

Test-Case: output
Description: Test assignability of `toHexString` function result with compatible types.
Labels: any, DecimalNumber, function-call-expr, int, int:toHexString, method-call-expr, optional-type, string

function init() {
    int a1 = 2345;

    string? b1 = a1.toHexString();
    io:println(b1); // @output 929

    testAny(int:toHexString(a1)); // @output 929
}

function testAny(any i) {
    io:println(i);
}

Test-Case: output
Description: Test `toHexString` function result belonging to a type.
Labels: DecimalNumber, function-call-expr, int, int:toHexString, is-expr, unary-minus, var

function init() {
    int a1 = -1234;

    io:println(int:toHexString(a1) is string); // @output true

    var b1 = int:toHexString(a1);
    io:println(b1 is string); // @output true
}

Test-Case: output
Description: Test equality with `toHexString` function result.
Labels: DecimalNumber, equality, function-call-expr, HexIntLiteral, int, int:Signed32, int:toHexString, string

function init() {
    int a1 = 15;
    int a2 = 0xf;
    int:Signed32 a3 = 0xf;
    string a4 = "f";

    io:println(int:toHexString(a1) == int:toHexString(a2)); // @output true

    io:println(int:toHexString(a2) == int:toHexString(a3)); // @output true

    io:println(int:toHexString(a1) == a4); // @output true
}

Test-Case: output
Description: Test `toHexString` method call as expression in return statement.
Labels: DecimalNumber, int:toHexString, method-call-expr, return-stmt

function init() {
    io:println(getString(34526)); // @output 86de
}

function getString(int i) returns string {
    return i.toHexString();
}

Test-Case: output
Description: Test `toHexString` method call as expression in list constructor.
Labels: array-type, DecimalNumber, function-call-expr, HexIntLiteral, int:toHexString, list-constructor-expr,
        method-call-expr, string

function init() {
    string[] arr = [23.toHexString(), int:toHexString(3452), (0xacd).toHexString()];
    io:println(arr); // @output ["17","d7c","acd"]
}

Test-Case: output
Description: Test `toHexString` method call as expression in method call expression.
Labels: DecimalNumber, function-call-expr, int:toHexString, method-call-expr, value:toString

function init() {
    io:println(int:toHexString(100).toString()); // @output 64
}

Test-Case: output
Description: Test `toHexString` method call as expression in map constructor.
Labels: DecimalNumber, function-call-expr, HexIntLiteral, int:toHexString, map-type, mapping-constructor-expr,
        method-call-expr, string

function init() {
    map<string> intMap = {"One": 23.toHexString(), "Two": int:toHexString(0xf)};
    io:println(intMap); // @output {"One":"17","Two":"f"}
}

Test-Case: output
Description: Test `toHexString` method call as expression in additive expression.
Labels: additive-expr, DecimalNumber, function-call-expr, int:toHexString, method-call-expr, string

function init() {
    string a = int:toHexString(120) + 100.toHexString();
    io:println(a); // @output 7864
}

Test-Case: output
Description: Test `toHexString` method call as expression in if else statement.
Labels: DecimalNumber, function-call-expr, if-else-stmt, int:toHexString, method-call-expr, relational-expr, string

function init() {
    compare(25); // @output true
    compare(40); // @output true
    compare(60); // @output true
}

function compare(int i) {
    if int:toHexString(i) < "1e" {
        io:println(int:toHexString(i) < "1e");
    } else if i.toHexString() < "32" {
        io:println(i.toHexString() < "32");
    } else {
        io:println(i.toHexString() > "32");
    }
}

Test-Case: error
Description: Test assigning the result of `toHexString` function to an incompatible type.
Labels: function-call-expr, int, int:toHexString, method-call-expr, string:Char

function errorFunction(int a1) {
    string:Char _ = a1.toHexString(); // @error expects a string:Char, but toHexString() returns a string

    int _ = int:toHexString(a1); // @error expects an int, but toHexString() returns a string

    int _ = a1.toHexString(); // @error expects an int, but toHexString() returns a string
}

Test-Case: error
Description: Test passing invalid value to `toHexString` function.
Labels: function-call-expr, int, int:toHexString, string, union-type

function errorFunction(int|string a1) {
    string _ = int:toHexString(a1); // @error expects an int argument
}

Test-Case: error
Description: Test `toHexString` function on invalid type.
Labels: int, int:toHexString, method-call-expr, string, union-type

function errorFunction(int|string a1) {
    string _ = a1.toHexString(); // @error toHexString() is not defined for (int|string)
}

Test-Case: error
Description: Test missing required parameter in `toHexString` function call.
Labels: function-call-expr, int:toHexString, string

function errorFunction() {
    string _ = int:toHexString(); // @error missing int argument
}

Test-Case: error
Description: Test passing too many arguments to `toHexString`.
Labels: function-call-expr, int, int:toHexString, method-call-expr, string

function errorFunction(int a1) {
    string _ = a1.toHexString(a1); // @error too many arguments
    string _ = int:toHexString(a1, a1); // @error too many arguments
}
