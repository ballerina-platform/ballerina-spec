Test-Case: output
Description: Test `fromHexString` function.
Labels: error, function-call-expr, int, int:fromHexString, is-expr, string, unary-minus, union-type

function init() {
    string a1 = "4abcdef12";
    string a2 = "4ABCDEF12";
    string a3 = "+7ABffdea1";
    string a4 = "-7fffffffffffffff";
    string a5 = "+7fffffffffffffff";
    string a6 = "1234";
    string a7 = "affde";

    int|error b1 = int:fromHexString(a1);
    io:println(b1); // @output 20062269202

    io:println(int:fromHexString(a2)); // @output 20062269202

    b1 = int:fromHexString(a3);
    io:println(b1); // @output 32950443681

    io:println(int:fromHexString(a4)); // @output -9223372036854775807

    io:println(int:fromHexString(a5)); // @output 9223372036854775807

    io:println(int:fromHexString(a6)); // @output 4660

    io:println(int:fromHexString(a7)); // @output 720862
}

Test-Case: output
Description: Test `fromHexString` function with values not in integer range.
Labels: error, function-call-expr, int, int:fromHexString, is-expr, string, union-type

function init() {
    string a1 = "ffffffff80000000";
    string a2 = "ffffffffffff8000";
    string a3 = "ffffffffffffffec";
    string a4 = "8000000000000000";

    int|error b1 = int:fromHexString(a1);
    io:println(b1 is error); // @output true
    io:println((<error>b1).message()); // @output {ballerina/lang.int}NumberParsingError

    b1 = int:fromHexString(a2);
    io:println(b1 is error); // @output true
    io:println((<error>b1).message()); // @output {ballerina/lang.int}NumberParsingError

    b1 = int:fromHexString(a3);
    io:println(b1 is error); // @output true
    io:println((<error>b1).message()); // @output {ballerina/lang.int}NumberParsingError

    b1 = int:fromHexString(a4);
    io:println(b1 is error); // @output true
    io:println((<error>b1).message()); // @output {ballerina/lang.int}NumberParsingError
}

Test-Case: output
Description: Test `fromHexString` function with string literals.
Labels: error, function-call-expr, int, int:fromHexString, is-expr, string, union-type

function init() {
    int|error b1 = int:fromHexString("7fffffff");
    io:println(b1); // @output 2147483647

    io:println(int:fromHexString("7fff")); // @output 32767

    b1 = int:fromHexString("911");
    io:println(b1); // @output 2321

    io:println(int:fromHexString("7fffffffffffffff")); // @output 9223372036854775807
}

Test-Case: output
Description: Test `fromHexString` function with string literal values not in integer range.
Labels: error, function-call-expr, int, int:fromHexString, is-expr, string, union-type

function init() {
    int|error b1 = int:fromHexString("ffffffff80000000");
    io:println(b1 is error); // @output true
    io:println((<error>b1).message()); // @output {ballerina/lang.int}NumberParsingError

    b1 = int:fromHexString("ffffffffffff8000");
    io:println(b1 is error); // @output true
    io:println((<error>b1).message()); // @output {ballerina/lang.int}NumberParsingError

    b1 = int:fromHexString("ffffffffffffffec");
    io:println(b1 is error); // @output true
    io:println((<error>b1).message()); // @output {ballerina/lang.int}NumberParsingError

    b1 = int:fromHexString("8000000000000000");
    io:println(b1 is error); // @output true
    io:println((<error>b1).message()); // @output {ballerina/lang.int}NumberParsingError
}

Test-Case: output
Description: Test `fromHexString` function with string template expression.
Labels: error, function-call-expr, int, int:fromHexString, is-expr, string, string-template-expr, union-type

function init() {
    string a1 = string `7fffffff`;
    string a2 = string `911`;
    string a3 = string `cad`;

    int|error b1 = int:fromHexString(string `7fff`);
    io:println(b1); // @output 32767

    io:println(int:fromHexString(a1)); // @output 2147483647

    b1 = int:fromHexString(a2);
    io:println(b1); // @output 2321

    io:println(int:fromHexString(string `7fffffffffffffff`)); // @output 9223372036854775807

    b1 = int:fromHexString(a3);
    io:println(b1); // @output 3245
}

Test-Case: output
Description: Test `fromHexString` function with string template with interpolation.
Labels: error, function-call-expr, int, int:fromHexString, is-expr, string, string-template-expr, union-type

function init() {
    string a1 = "ffffff";
    string a2 = string `c`;

    int|error b1 = int:fromHexString(string `7fffffffff${a1}`);
    io:println(b1); // @output 9223372036854775807

    io:println(int:fromHexString(string `${a2}ad`)); // @output 3245

    io:println(int:fromHexString(string `${a1}${a2}`)); // @output 268435452
}

Test-Case: output
Description: Test `fromHexString` function with user-defined subtypes of string.
Labels: error, function-call-expr, int, int:fromHexString, is-expr, module-const-decl, module-type-defn, singleton-type,
        string, string:Char, union-type

const A = "7fffffff";
const B = "cad";

type StringType1 "7fff"|"ffffffff"|"cad";

type StringType2 string:Char;

type StringType3 A|B;

function init() {
    string:Char a1 = "f";
    string|string:Char a2 = "7fffffffffffffff";
    StringType1 a3 = "ffffffff";
    StringType2 a4 = "c";
    StringType3 a5 = "7fffffff";

    int|error b1 = int:fromHexString(a1);
    io:println(b1); // @output 15

    io:println(int:fromHexString(a2)); // @output 9223372036854775807

    b1 = int:fromHexString(a3);
    io:println(b1); // @output 4294967295

    io:println(int:fromHexString(A)); // @output 2147483647

    io:println(int:fromHexString(a4)); // @output 12

    io:println(int:fromHexString(a5)); // @output 2147483647
}

Test-Case: output
Description: Test `fromHexString` function with string values from various expressions.
Labels: additive-expr, DecimalNumber, error, function-call-expr, HexIntLiteral, int, int:fromHexString, is-expr, string,
        string-template-expr, union-type

function init() {
    int a1 = 0xf;
    int a2 = 125365;
    string a3 = "7fff";

    int|error b1 = int:fromHexString(a1.toString());
    io:println(b1); // @output 21

    io:println(int:fromHexString(3546372.toString())); // @output 55862130

    b1 = int:fromHexString(getString() + string `${a2}` + "2" + a3);
    io:println(b1); // @output 1488880740833853439
}

function getString() returns string {
    return "14a99";
}

Test-Case: output
Description: Test assignability of `fromHexString` function result.
Labels: any, error, function-call-expr, int, int:fromHexString, is-expr, module-type-defn, string, union-type, var

type Type int|error;

function init() {
    string a1 = "12a3b79cd4e8f56";

    any|error b1 = int:fromHexString(a1);
    io:println(b1 is any); // @output true
    io:println(b1); // @output 83944937381334870

    Type b2 = int:fromHexString(a1);
    io:println(b2 is int); // @output true
    io:println(b2); // @output 83944937381334870

    var b3 = int:fromHexString(a1);
    io:println(b3 is int); // @output true
    io:println(b3); // @output 83944937381334870
}

Test-Case: output
Description: Test `fromHexString` function with invalid strings.
Labels: error, float, function-call-expr, int, int:fromHexString, is-expr, string, union-type

function init() {
    string a1 = "FFFFF999ABfdec364432";
    float a2 = 10;

    int|error b1 = int:fromHexString(a1);
    io:println(b1 is error); // @output true

    b1 = int:fromHexString("FFDEFF999ABfdec364432"); // @output true
    io:println(b1 is error);

    io:println(int:fromHexString(string `xyz123`) is error); // @output true

    io:println(int:fromHexString(getString()) is error); // @output true

    b1 = int:fromHexString(string `${a2}`);
    io:println(b1 is error); // @output true

    int|error b2 = int:fromHexString("9223372036854775808");
    io:println(b2 is error); // @output true

    b2 = int:fromHexString("-9223372036854775809");
    io:println(b2 is error); // @output true
}

function getString() returns string {
    return "12536.26";
}

Test-Case: panic
Description: Test `fromHexString` function with invalid strings.
Labels: error, float, function-call-expr, if-else-stmt, int, int:fromHexString, is-expr, panic, string, union-type

function init() {
    testResult(int:fromHexString("sfg12")); // @panic number parsing error for input string
}

function testResult(int|error i) {
    if i is error {
        panic i;
    }
}

Test-Case: output
Description: Test `fromHexString` function result belonging to a type.
Labels: function-call-expr, int, int:fromHexString, is-expr, string, var

function init() {
    string a1 = "4abcdef12";

    io:println(int:fromHexString(a1) is int); // @output true

    var b1 = int:fromHexString(a1);
    io:println(b1 is int); // @output true
}

Test-Case: output
Description: Test equality with `fromHexString` function result.
Labels: DecimalNumber, error, function-call-expr, HexIntLiteral, if-else-stmt, int, int:fromHexString, int:Unsigned32,
        is-expr, logical-expr, string, union-type

function init() {
    string a1 = "4abcdef12";
    int a2 = 0x4abcdef12;
    int:Unsigned32 a3 = 78368239;

    int|error b1 = int:fromHexString(a1);
    int|error b2 = int:fromHexString("4abcdef12");

    testEquality(b1, b2); // @output a1 is int && a2 is int
                          // @output true

    testEquality(int:fromHexString(a1), int:fromHexString("4abcdef12")); // @output a1 is int && a2 is int
                                                                         // @output true

    testEquality(int:fromHexString(a1), int:fromHexString("4352")); // @output a1 is int && a2 is int
                                                                    // @output false

    testEquality(int:fromHexString(a3.toHexString()), a3); // @output a1 is int && a2 is int
                                                           // @output true
}

function testEquality(int|error a1, int|error a2) {
    if a1 is int && a2 is int {
        io:println("a1 is int && a2 is int");
        io:println(a1 == a2);
    } else if a1 is int && a2 is error {
        io:println("a1 is int && a2 is error");
    } else if a1 is error && a2 is int {
        io:println("a1 is error && a2 is int");
    } else {
        io:println("a1 is error && a2 is error");
    }
}

Test-Case: output
Description: Test `fromHexString` method call as expression in return statement.
Labels: error, function-call-expr, int, int:fromHexString, string, union-type

function init() {
    io:println(getInt("4abcdef12")); // @output 20062269202
}

function getInt(string s) returns int|error {
    return int:fromHexString(s);
}

Test-Case: output
Description: Test `fromHexString` method call as expression in list constructor.
Labels: array-type, error, function-call-expr, int, int:fromHexString, list-constructor-expr, union-type

function init() {
    (int|error)[] arr = [int:fromHexString("24"), int:fromHexString("-10"), int:fromHexString("10")];
    io:println(arr); // @output [36,-16,16]
}

Test-Case: output
Description: Test `fromHexString` method call as expression in map constructor.
Labels: error, function-call-expr, int, int:fromHexString, map-type, mapping-constructor-expr, string, union-type

function init() {
    map<int|error> a = {"One": int:fromHexString("23"), "Two": int:fromHexString("30")};
    io:println(a); // @output {"One":35,"Two":48}
}

Test-Case: output
Description: Test `fromHexString` method call as expression in typeof expression.
Labels: function-call-expr, int:fromHexString, string, typedesc-type, typeof-expr

function init() {
    typedesc j = typeof int:fromHexString("123");
    io:println(j); // @output typedesc 291
}

Test-Case: error
Description: Test passing invalid value to `fromHexString` function.
Labels: error, float, function-call-expr, int, int:fromHexString, string, union-type

function errorFunction(float a, string|int b) {
    int|error b1 = int:fromHexString(a); // @error float is not a subtype of string

    b1 = int:fromHexString(b); // @error (string|int) is not a subtype of string

    b1 = int:fromHexString(12d); // @error decimal is not a subtype of string
}

Test-Case: error
Description: Test assigning the result of `fromHexString` function to an incompatible type.
Labels: error, function-call-expr, int, int:fromHexString, int:Signed32, string, union-type

function errorFunction() {
    int _ = int:fromHexString("100"); // @error expects an int, but fromHexString() returns (int|error)

    int:Signed32|error _ = int:fromHexString("100"); // @error expects a (int:Signed32|error), but fromHexString() returns (int|error)
}

Test-Case: error
Description: Test incorrect `fromHexString` function call.
Labels: any, error, function-call-expr, int:fromHexString, string, union-type

function errorFunction(string a, any b) {
    int|error _ = a.fromHexString(); // @error fromHexString() is not defined for string

    int|error _ = b.fromHexString(); // @error fromHexString() is not defined for any
}

Test-Case: error
Description: Test missing required parameter in `fromHexString` function call.
Labels: error, function-call-expr, int:fromHexString, union-type

function errorFunction() {
    int|error _ = int:fromHexString(); // @error missing string argument
}

Test-Case: error
Description: Test passing too many arguments to `fromHexString`.
Labels: error, function-call-expr, int, int:fromHexString, string, union-type

function errorFunction(string a) {
    int|error _ = int:fromHexString(a, a); // @error too many arguments
}
