Test-Case: output
Description: Test Unsigned8 built-in subtype of int.
Labels: DecimalNumber, int:Unsigned8

function init() {
    int:Unsigned8 a1 = 0;
    int:Unsigned8 a2 = 130;
    int:Unsigned8 a3 = 255;

    testUnsigned8Int(a1); // @output 0
    testUnsigned8Int(a2); // @output 130
    testUnsigned8Int(a3); // @output 255
}

function testUnsigned8Int(int:Unsigned8 i) {
    io:println(i);
}

Test-Case: output
Description: Test assignability with type Unsigned8.
Labels: DecimalNumber, int:Signed16, int:Signed32, int:Unsigned8, is-expr

function init() {
    int:Unsigned8 a1 = 130;
    int:Unsigned8 a2 = 255;

    int:Signed16 b1 = a1;
    io:println(b1 is int:Unsigned8); // @output true

    int:Signed32 b2 = a2;
    io:println(b2 is int:Unsigned8); // @output true
}

Test-Case: output
Description: Test assignability with type Unsigned8.
Labels: byte, DecimalNumber, int, int:Unsigned16, int:Unsigned32, int:Unsigned8, is-expr

function init() {
    int:Unsigned8 a1 = 130;
    int:Unsigned8 a2 = 255;

    int:Unsigned16 b1 = a1;
    io:println(b1 is int:Unsigned8); // @output true

    int:Unsigned32 b2 = a2;
    io:println(b2 is int:Unsigned8); // @output true

    byte b3 = a1;
    io:println(b3 is int:Unsigned8); // @output true

    int b4 = a2;
    io:println(b4 is int:Unsigned8); // @output true
}

Test-Case: output
Description: Test assignability with type Unsigned8.
Labels: DecimalNumber, int, int:Unsigned8, is-expr, optional-type

function init() {
    int:Unsigned8 a1 = 130;
    int:Unsigned8 a2 = 255;

    int b1 = a1;
    io:println(b1 is int:Unsigned8); // @output true

    int? b2 = a2;
    io:println(b2 is int:Unsigned8); // @output true
}

Test-Case: output
Description: Test assignability with type Unsigned8.
Labels: any, DecimalNumber, int, int:Unsigned8, is-expr, optional-type, string

function init() {
    int:Unsigned8 a1 = 0;
    int:Unsigned8 a2 = 130;
    int:Unsigned8 a3 = 255;

    testIntOrNil(a1); // @output 0
    testIntOrNil(a2); // @output 130
    testIntOrNil(a3); // @output 255

    testAny(a1); // @output 0
    testAny(a2); // @output 130
    testAny(a3); // @output 255
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i);
    } else {
        io:println("nil");
    }
}

function testAny(any i) {
    io:println(i);
}

Test-Case: output
Description: Test type Unsigned8 value belonging to a type.
Labels: byte, DecimalNumber, int, int:Signed16, int:Signed32, int:Unsigned16, int:Unsigned32, int:Unsigned8, is-expr

function init() {
    int:Unsigned8 a1 = 130;

    io:println(130 is int:Unsigned8); // @output true
    io:println(a1 is byte); // @output true
    io:println(a1 is int:Unsigned32); // @output true
    io:println(a1 is int:Unsigned16); // @output true
    io:println(a1 is int:Signed32); // @output true
    io:println(a1 is int:Signed16); // @output true
    io:println(a1 is int); // @output true
}

Test-Case: output
Description: Test equality of type Unsigned8 values.
Labels: DecimalNumber, equality, int, int:Unsigned16, int:Unsigned32, int:Unsigned8

function init() {
    int:Unsigned8 a1 = 127;
    int:Unsigned8 a2 = 127;
    int:Unsigned8 a3 = 120;

    io:println(a1 == a2); // @output true
    io:println(a1 != a3); // @output true
    io:println(a1 != a2); // @output false

    int:Unsigned32 b1 = 127;
    io:println(a1 == b1); // @output true

    int:Unsigned16 b2 = 127;
    io:println(a1 == b2); // @output true

    int b3 = 127;
    io:println(a1 == b3); // @output true

    byte b4 = 127;
    io:println(a1 == b4); // @output true
}

Test-Case: error
Description: Test type Unsigned8 value assignability with incompatible types.
Labels: DecimalNumber, int:Signed8, int:Unsigned8, string, unary-minus

function errorFunction(int:Unsigned8 a) {
    int:Unsigned8 _ = 256; // @error int is not a subtype of int:Unsigned8

    int:Unsigned8 _ = -10; // @error int is not a subtype of int:Unsigned8

    testSigned8Int(a); // @error int:Unsigned8 is not a subtype of int:Signed8

    int:Unsigned8 _ = "A"; // @error string is not a subtype of int:Unsigned8

    string _ = a; // @error int:Unsigned8 is not a subtype of string
}

function testSigned8Int(int:Signed8 i) {
}

Test-Case: error
Description: Test assigning an incompatible int value to type Unsigned8.
Labels: DecimalNumber, int:Unsigned8, unary-minus

function errorFunction() {
    int:Unsigned8 _ = -9223372036854775553; // @error int is not a subtype of int:Unsigned8
    int:Unsigned8 _ = -9223372036854775808; // @error int is not a subtype of int:Unsigned8
}

Test-Case: error
Description: Test assigning too large value to a Unsigned8 type variable.
Fail-Issue: ballerina-platform/ballerina-lang#32574
Labels: DecimalNumber, int:Unsigned8

function errorFunction() {
    int:Unsigned8 _ = 9223372036854775808; // @error too large value
}

Test-Case: error
Description: Test assigning too small value to a Unsigned8 type variable.
Fail-Issue: ballerina-platform/ballerina-lang#32574
Labels: DecimalNumber, int:Unsigned8, unary-minus

function errorFunction() {
    int:Unsigned8 _ = -9223372036854775809; // @error too small value
}
