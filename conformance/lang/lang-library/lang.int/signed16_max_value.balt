Test-Case: output
Description: Test maximum value of Signed16 built-in subtype of int.
Labels: if-else-stmt, int, int:SIGNED16_MAX_VALUE, is-expr, optional-type, string

function init() {
    int:SIGNED16_MAX_VALUE a = 32767;
    testIntOrNil(a); // @output 32767

    testIntOrNil(int:SIGNED16_MAX_VALUE); // @output 32767

    int b = int:SIGNED16_MAX_VALUE;
    testIntOrNil(b); // @output 32767
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i);
    } else {
        io:println("nil");
    }
}

Test-Case: output
Description: Test SIGNED16_MAX_VALUE belonging to a type.
Labels: int, int:Signed16, int:SIGNED16_MAX_VALUE, int:Signed32, int:Unsigned16, int:Unsigned32, is-expr

function init() {
    io:println(int:SIGNED16_MAX_VALUE is int); // @output true
    io:println(int:SIGNED16_MAX_VALUE is int:Signed16); // @output true
    io:println(int:SIGNED16_MAX_VALUE is int:Signed32); // @output true

    io:println(int:SIGNED16_MAX_VALUE is int:Unsigned16); // @output true
    io:println(int:SIGNED16_MAX_VALUE is int:Unsigned32); // @output true
}

Test-Case: output
Description: Test assignability of SIGNED16_MAX_VALUE with var.
Labels: int, int:SIGNED16_MAX_VALUE, is-expr, var

function init() {
    var a = int:SIGNED16_MAX_VALUE;
    io:println(a); // @output 32767
    io:println(a is int); // @output true
}

Test-Case: output
Description: Test declaring module level variables with SIGNED16_MAX_VALUE.
Labels: int, int:SIGNED16_MAX_VALUE, module-const-decl

const int a = int:SIGNED16_MAX_VALUE;

int b = int:SIGNED16_MAX_VALUE;

function init() {
    io:println(a); // @output 32767
    io:println(b); // @output 32767
}

Test-Case: output
Description: Test defining types with SIGNED16_MAX_VALUE.
Labels: DecimalNumber, int:SIGNED16_MAX_VALUE, int:Unsigned16, module-type-defn, union-type

type Const1 int:SIGNED16_MAX_VALUE;

function init() {
    Const1 a1 = 32767;
    io:println(a1); // @output 32767

    int:SIGNED16_MAX_VALUE|int:Unsigned16 a2 = 130;
    io:println(a2); // @output 130
}

Test-Case: output
Description: Test equality with SIGNED16_MAX_VALUE.
Labels: DecimalNumber, equality, int, int:Signed16, int:SIGNED16_MAX_VALUE, int:Unsigned16, int:Unsigned32, union-type

function init() {
    io:println(int:SIGNED16_MAX_VALUE == 32767); // @output true

    int a = 32767;
    io:println(a == int:SIGNED16_MAX_VALUE); // @output true

    int:Unsigned16 b = 32767;
    io:println(b == int:SIGNED16_MAX_VALUE); // @output true

    int:Signed16|int:Unsigned32 c = 32767;
    io:println(c == int:SIGNED16_MAX_VALUE); // @output true
}

Test-Case: output
Description: Test SIGNED16_MAX_VALUE as expression in return statement.
Labels: int:SIGNED16_MAX_VALUE, return-stmt

function init() {
    io:println(getInt()); // @output 32767
}

function getInt() returns int {
    return int:SIGNED16_MAX_VALUE;
}

Test-Case: output
Description: Test SIGNED16_MAX_VALUE as expression in list constructor.
Labels: array-type, int, int:SIGNED16_MAX_VALUE, list-constructor-expr

function init() {
    int[] arr = [int:SIGNED16_MAX_VALUE, int:SIGNED16_MAX_VALUE];
    io:println(arr); // @output [32767,32767]
}

Test-Case: output
Description: Test SIGNED16_MAX_VALUE as expression in method call expression.
Labels: int:SIGNED16_MAX_VALUE, value:toString

function init() {
    io:println(int:SIGNED16_MAX_VALUE.toString()); // @output 32767
}

Test-Case: output
Description: Test SIGNED16_MAX_VALUE as expression in map constructor.
Labels: int, int:SIGNED16_MAX_VALUE, map-type, mapping-constructor-expr, string

function init() {
    map<int> intMap = {"One": int:SIGNED16_MAX_VALUE, "Two": int:SIGNED16_MAX_VALUE};
    io:println(intMap); // @output {"One":32767,"Two":32767}
}

Test-Case: output
Description: Test SIGNED16_MAX_VALUE as expression in additive expression.
Labels: additive-expr, int:SIGNED8_MIN_VALUE

function init() {
    int a = int:SIGNED16_MAX_VALUE + int:SIGNED16_MAX_VALUE;
    io:println(a); // @output 65534
}

Test-Case: output
Description: Test SIGNED16_MAX_VALUE as expression in if else statement.
Labels: DecimalNumber, if-else-stmt, int:SIGNED16_MAX_VALUE, relational-expr

function init() {
    compare(); // @output true
}

function compare() {
    if int:SIGNED16_MAX_VALUE > 20 {
        io:println(int:SIGNED16_MAX_VALUE > 20);
    } else {
        io:println();
    }
}

Test-Case: error
Description: Test assigning values to subtypes of SIGNED16_MAX_VALUE.
Fail-Issue: ballerina-platform/ballerina-lang#32804
Labels: DecimalNumber, int, int:SIGNED16_MAX_VALUE, module-const-decl, module-type-defn

const int A = int:SIGNED16_MAX_VALUE;

type Const1 int:SIGNED16_MAX_VALUE;

type Const2 A|Const1;

function errorFunction() {
    Const1 _ = 23; // @error int is not a subtype of 32767

    Const2 _ = 23; // @error int is not a subtype of 32767
}

Test-Case: error
Description: Test assigning invalid value for int:SIGNED16_MAX_VALUE type variable.
Labels: DecimalNumber, int:SIGNED16_MAX_VALUE

function errorFunction() {
    int:SIGNED16_MAX_VALUE _ = 10; // @error int is not a subtype of 32767
}

Test-Case: error
Description: Test assigning int:SIGNED16_MAX_VALUE to an incompatible type.
Labels: int:Signed16, int:SIGNED16_MAX_VALUE, string

function errorFunction() {
    int:Signed16 _ = int:SIGNED16_MAX_VALUE; // @error int is not a subtype of int:Signed16
    string _ = int:SIGNED16_MAX_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:SIGNED16_MAX_VALUE constant value.
Labels: DecimalNumber, int:SIGNED16_MAX_VALUE

function errorFunction() {
    int:SIGNED16_MAX_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED16_MAX_VALUE.
Labels: DecimalNumber, unary-minus

function errorFunction() {
    SIGNED16_MAX_VALUE _ = -100; // @error unknown type
}
