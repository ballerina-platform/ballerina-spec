Test-Case: output
Description: Test `sum` function with type Signed32 values.
Labels: DecimalNumber, function-call-expr, HexIntLiteral, int, int:Signed32, int:sum, method-call-expr, unary-minus

function init() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = -1234;
    int:Signed32 a3 = 1234;
    int:Signed32 a4 = 2147483647;
    int:Signed32 a5 = 0xffecda;
    int:Signed32 a6 = -0x123fAbCD;

    int b1 = a1.sum();
    io:println(b1); // @output -2147483648

    io:println(int:sum()); // @output 0

    b1 = a1.sum(a1, a2);
    io:println(b1); // @output -4294968530

    b1 = int:sum(a2, a3, a4, a5);
    io:println(b1); // @output 2164255961

    io:println(a5.sum(a2, a6)); // @output -289391557

    io:println(int:sum(a5, a2, a6)); // @output -289391557
}

Test-Case: output
Description: Test `sum` function with type Signed16 values.
Labels: DecimalNumber, function-call-expr, HexIntLiteral, int, int:Signed16, int:sum, method-call-expr, unary-minus

function init() {
    int:Signed16 a1 = -32768;
    int:Signed16 a2 = -1234;
    int:Signed16 a3 = 1234;
    int:Signed16 a4 = 32767;
    int:Signed16 a5 = 0xacd;
    int:Signed16 a6 = -0x4FEa;

    int b1 = a1.sum();
    io:println(b1); // @output -32768

    b1 = a1.sum(a1, a2);
    io:println(b1); // @output -66770

    b1 = int:sum(a2, a3, a4, a5);
    io:println(b1); // @output 35532

    io:println(a5.sum(a3, a6)); // @output -16459

    io:println(int:sum(a5, a2, a6)); // @output -18927
}

Test-Case: output
Description: Test `sum` function with type Signed8 values.
Labels: DecimalNumber, function-call-expr, HexIntLiteral, int, int:Signed8, int:sum, method-call-expr, unary-minus

function init() {
    int:Signed8 a1 = -128;
    int:Signed8 a2 = -10;
    int:Signed8 a3 = 30;
    int:Signed8 a4 = 127;
    int:Signed8 a5 = 0x7d;
    int:Signed8 a6 = -0x7a;

    int b1 = a1.sum();
    io:println(b1); // @output -128

    b1 = a1.sum(a1, a4);
    io:println(b1); // @output -129

    b1 = int:sum(a2, a3, a4, a5);
    io:println(b1); // @output 272

    io:println(a5.sum(a4, a6)); // @output 130

    io:println(int:sum(a5, a2, a6)); // @output -7
}

Test-Case: output
Description: Test `sum` function with type Unsigned32 values.
Labels: DecimalNumber, function-call-expr, HexIntLiteral, int, int:sum, int:Unsigned32, method-call-expr

function init() {
    int:Unsigned32 a1 = 0;
    int:Unsigned32 a2 = 150;
    int:Unsigned32 a3 = 23526165;
    int:Unsigned32 a4 = 4294967295;
    int:Unsigned32 a5 = 0xabc12DE;

    int b1 = a2.sum();
    io:println(b1); // @output 150

    b1 = a1.sum(a1, a2, a2);
    io:println(b1); // @output 300

    b1 = int:sum(a2, a3, a4, a4);
    io:println(b1); // @output 8613460905

    io:println(a5.sum(a3, a4)); // @output 4498591218

    io:println(int:sum(a3, a4, a5)); // @output 4498591218
}

Test-Case: output
Description: Test `sum` function with type Unsigned16 values.
Labels: DecimalNumber, function-call-expr, HexIntLiteral, int, int:sum, int:Unsigned16, method-call-expr

function init() {
    int:Unsigned16 a1 = 0;
    int:Unsigned16 a2 = 150;
    int:Unsigned16 a3 = 15431;
    int:Unsigned16 a4 = 65535;
    int:Unsigned16 a5 = 0xfAe1;

    int b1 = a2.sum();
    io:println(b1); // @output 150

    b1 = a1.sum(a1, a2, a2);
    io:println(b1); // @output 300

    b1 = int:sum(a2, a3, a4, a4);
    io:println(b1); // @output 146651

    io:println(a5.sum(a3, a4)); // @output 145191

    io:println(int:sum(a3, a4, a5)); // @output 145191
}

Test-Case: output
Description: Test `sum` function with type Unsigned8 values.
Labels: DecimalNumber, function-call-expr, HexIntLiteral, int, int:sum, int:Unsigned8, method-call-expr

function init() {
    int:Unsigned8 a1 = 0;
    int:Unsigned8 a2 = 25;
    int:Unsigned8 a3 = 143;
    int:Unsigned8 a4 = 255;
    int:Unsigned8 a5 = 0xa2;

    int b1 = a2.sum();
    io:println(b1); // @output 25

    b1 = a1.sum(a1, a2, a2);
    io:println(b1); // @output 50

    b1 = int:sum(a2, a3, a4, a4);
    io:println(b1); // @output 678

    io:println(a5.sum(a3)); // @output 305

    io:println(int:sum(a3, a4, a5)); // @output 560
}

Test-Case: output
Description: Test `sum` function with type byte values.
Labels: byte, DecimalNumber, function-call-expr, HexIntLiteral, int, int:sum, method-call-expr

function init() {
    byte a1 = 0;
    byte a2 = 25;
    byte a3 = 143;
    byte a4 = 255;
    byte a5 = 0xa2;

    int b1 = a2.sum();
    io:println(b1); // @output 25

    b1 = a1.sum(a1, a2, a2);
    io:println(b1); // @output 50

    b1 = int:sum(a2, a3, a4, a4);
    io:println(b1); // @output 678

    io:println(a5.sum(a3)); // @output 305

    io:println(int:sum(a3, a4, a5)); // @output 560
}

Test-Case: output
Description: Test `sum` function with type int values.
Labels: additive-expr, DecimalNumber, function-call-expr, HexIntLiteral, int, int:sum, method-call-expr, unary-minus

function init() {
    int a1 = -9223372036854775807 - 1;
    int a2 = -736453762;
    int a3 = 120;
    int a4 = 736453762;
    int a5 = 9223372036854775807;
    int a6 = 0xabcDE12AC5;
    int a7 = -0xabcDE12AC5;

    int b1 = a1.sum();
    io:println(b1); // @output -9223372036854775808

    b1 = a4.sum(a1, a4, a2);
    io:println(b1); // @output -9223372036118322046

    b1 = int:sum(a2, a3, a4, a4);
    io:println(b1); // @output 736453882

    io:println(int:sum(a6, a7, a5)); // @output 9223372036854775807
}

Test-Case: output
Description: Test `sum` function with values of different builtin subtypes of int.
Labels: byte, DecimalNumber, function-call-expr, int, int:Signed16, int:Signed32, int:Signed8, int:sum, int:Unsigned16,
        int:Unsigned32, int:Unsigned8, method-call-expr

function init() {
    int:Signed32 a1 = 300;
    int:Signed16 a2 = 200;
    int:Signed8 a3 = 100;
    int:Unsigned32 a4 = 400;
    int:Unsigned16 a5 = 500;
    int:Unsigned8 a6 = 250;
    byte a7 = 25;
    int a8 = 600;

    int b1 = a1.sum(a2, 1000, a3, a4, a5, 3000, a6, a7, 2000);
    io:println(b1); // @output 7775

    b1 = int:sum(a1, a2, 1000, a3, a4, a5, 3000, a6, a7, 2000);
    io:println(b1); // @output 7775

    io:println(300.sum(a2, 1000, a3, a4, a5, 3000, a6, a7, 2000, a8)); // @output 8375
}

Test-Case: output
Description: Test `sum` function with user-defined subtypes of int.
Labels: DecimalNumber, function-call-expr, HexIntLiteral, int, int:Signed8, int:sum, int:Unsigned32, method-call-expr,
        module-const-decl, module-type-defn, singleton-type, union-type

const A = 10;
const B = 20;

type IntType1 10|20|30;

type IntType2 A|B;

type IntType3 int:Signed8|int:Unsigned32;

type IntType4 IntType1|IntType2|IntType3;

function init() {
    A a1 = 10;
    IntType1 a2 = 30;
    IntType2 a3 = 20;
    int:Signed8|int:Unsigned32 a4 = 235262;
    IntType3 a5 = 126373;
    IntType3 a6 = 0xA12Cde;

    int b1 = int:sum(a1, a2, a3);
    io:println(b1); // @output 60

    b1 = a2.sum(a2, a3);
    io:println(b1); // @output 80

    io:println(B.sum(a1, a3, a4, a5)); // @output 361685

    io:println(int:sum(a4, A, a1, a5)); // @output 361655

    io:println(int:sum(a6, a2, a5, a4)); // @output 10924447

    io:println(a4.sum()); // @output 235262

    io:println(a5.sum()); // @output 126373

    io:println(a6.sum(a5, a1)); // @output 10689165

    io:println(int:sum(a5, a3, a2, a6)); // @output 10689205
}

Test-Case: panic
Description: Test int range overflow with `sum` function.
Fail-Issue: ballerina-platform/ballerina-lang#32603
Labels: DecimalNumber, int, int:sum, method-call-expr, unary-minus

function init() {
    int a1 = -9223372036854775805;

    int _ = a1.sum(-1, -2, -3); // @panic int range overflow
}

Test-Case: panic
Description: Test int range overflow with `sum` function.
Fail-Issue: ballerina-platform/ballerina-lang#32603
Labels: DecimalNumber, function-call-expr, int, int:sum, unary-minus

function init() {
    int a1 = -9223372036854775805;

    int _ = int:sum(a1, -1, -2, -3); // @panic int range overflow
}

Test-Case: panic
Description: Test int range overflow with `sum` function.
Fail-Issue: ballerina-platform/ballerina-lang#32603
Labels: DecimalNumber, int, int:sum, method-call-expr

function init() {
    int a1 = 9223372036854775805;

    int _ = a1.sum(5); // @panic int range overflow
}

Test-Case: panic
Description: Test int range overflow with `sum` function.
Fail-Issue: ballerina-platform/ballerina-lang#32603
Labels: DecimalNumber, function-call-expr, int, int:sum

function init() {
    int a1 = 9223372036854775805;

    int _ = int:sum(a1, 5); // @panic int range overflow
}

Test-Case: output
Description: Test assignability of `sum` function result with compatible types.
Labels: any, DecimalNumber, int, int:sum, method-call-expr, optional-type, string

function init() {
    int a1 = 10;

    int? b1 = a1.sum(20, 30, 40);
    io:println(b1); // @output 100

    any b2 = a1.sum(20, 30, 40);
    io:println(b2); // @output 100
}

Test-Case: output
Description: Test assignability of `sum` function result with var.
Labels: DecimalNumber, int, int:sum, is-expr, method-call-expr, unary-minus, var

function init() {
    int a1 = -50;
    var b1 = a1.sum(10, 20);

    io:println(b1); // @output -20
    io:println(b1 is int); // @output true
}

Test-Case: output
Description: Test `sum` function result belonging to a type.
Labels: byte, DecimalNumber, function-call-expr, int, int:Signed16, int:Signed32, int:Signed8, int:sum, int:Unsigned16,
        int:Unsigned32, int:Unsigned8, is-expr

function init() {
    int a1 = 50;

    io:println(a1.sum(100) is int); // @output true

    io:println(int:sum(a1, 200) is int); // @output true

    io:println(a1.sum(20) is int:Signed8); // @output true
    io:println(a1.sum(20) is int:Signed16); // @output true
    io:println(a1.sum(20) is int:Signed32); // @output true

    io:println(a1.sum(20) is int:Unsigned8); // @output true
    io:println(a1.sum(20) is int:Unsigned16); // @output true
    io:println(a1.sum(20) is int:Unsigned32); // @output true
    io:println(a1.sum(20) is byte); // @output true
}

Test-Case: output
Description: Test equality with `sum` function result.
Labels: byte, DecimalNumber, equality, function-call-expr, HexIntLiteral, int, int:sum, method-call-expr, unary-minus

function init() {
    int a1 = 100;
    byte a2 = 200;
    int:Signed32 a3 = -0xde;

    int b1 = a1.sum(a2, a3);
    int b2 = a2.sum(a1, a3);

    io:println(b1 == b2); // @output true

    b1 = int:sum(a1, a2, a3);
    b2 = int:sum(a2, a1, a3);

    io:println(b1 == b2); // @output true

    io:println(a1.sum(a2, a3) == a2.sum(a1, a3)); // @output true

    io:println(int:sum(a1, a2, a3) == int:sum(a2, a1, a3)); // @output true

    io:println(a1.sum(a3) != a3.sum(a2)); // @output true

    io:println(int:sum(a2, a3) != int:sum(a3, a1)); // @output true
}

Test-Case: output
Description: Test chained `sum` function.
Labels: DecimalNumber, function-call-expr, int, int:sum, method-call-expr, unary-minus

function init() {
    int a1 = -100;

    int b1 = a1.sum(-200).sum(300, 250, 400).sum(12, 342);
    io:println(b1); // @output 1004

    io:println(int:sum(int:sum(a1, -200).sum(400), 300, int:sum(12, 34, 10).sum(30, 40))); // @output 526
}

Test-Case: output
Description: Test `sum` method call as expression in return statement.
Labels: DecimalNumber, int:sum, method-call-expr, return-stmt

function init() {
    io:println(getSum(10, 20)); // @output 30
}

function getSum(int i, int j) returns int {
    return i.sum(j);
}

Test-Case: output
Description: Test `sum` method call as expression in list constructor.
Labels: array-type, DecimalNumber, function-call-expr, HexIntLiteral, int, int:sum, list-constructor-expr,
        method-call-expr

function init() {
    int[] arr = [23.sum(5), int:sum(-12, 2), (0xacd).sum(0x3, 12)];
    io:println(arr); // @output [28,-10,2780]
}

Test-Case: output
Description: Test `sum` method call as expression in method call expression.
Labels: DecimalNumber, function-call-expr, int:sum, method-call-expr, unary-minus, value:toString

function init() {
    io:println(int:sum(-90, 100).toString()); // @output 10
}

Test-Case: output
Description: Test `sum` method call as expression in map constructor.
Labels: DecimalNumber, function-call-expr, HexIntLiteral, int, int:sum, map-type, mapping-constructor-expr,
        method-call-expr, string, unary-minus

function init() {
    map<int> intMap = {"One": 23.sum(5), "Two": int:sum(-30, 0xf)};
    io:println(intMap); // @output {"One":28,"Two":-15}
}

Test-Case: output
Description: Test `sum` method call as expression in additive expression.
Labels: additive-expr, DecimalNumber, function-call-expr, int, int:sum, method-call-expr, unary-minus

function init() {
    int a = int:sum(-30, 120) + 100.sum(12);
    io:println(a); // @output 202
}

Test-Case: output
Description: Test `sum` method call as expression in if else statement.
Labels: DecimalNumber, function-call-expr, if-else-stmt, int, int:sum, method-call-expr, relational-expr

function init() {
    compare(5, 10); // @output true
    compare(20, 10); // @output true
    compare(50, 60); // @output true
}

function compare(int i, int j) {
    if int:sum(i, j) < 30 {
        io:println(int:sum(i) < 30);
    } else if (i.sum(j) < 40) {
        io:println(i.sum(j) < 40);
    } else {
        io:println(i.sum(j) > 40);
    }
}

Test-Case: error
Description: Test assigning the result of `sum` function to an incompatible type.
Labels: float, function-call-expr, int, int:Signed8, int:sum, method-call-expr

function errorFunction(int a1) {
    int:Signed8 _ = a1.sum(10, 20); // @error expects a int:Signed8, but sum() returns an int

    float _ = a1.sum(20, 30, 40); // @error expects a float, but sum() returns an int

    float _ = int:sum(10, 20); // @error expects a float, but sum() returns an int
}

Test-Case: error
Description: Test passing invalid value to `sum` function.
Labels: DecimalNumber, float, function-call-expr, int, int:sum, method-call-expr, string

function errorFunction(int a1) {
    int _ = a1.sum(10, 10.5); // @error expects int values to sum

    int _ = int:sum(10, "ABC"); // @error expects int values to sum
}
