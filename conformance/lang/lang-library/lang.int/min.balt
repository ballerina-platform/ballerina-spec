Test-Case: output
Description: Test `min` function with type Signed32 values.
Labels: DecimalNumber, function-call-expr, HexIntLiteral, int, int:min, int:Signed32, method-call-expr, unary-minus

function init() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = 456;
    int:Signed32 a3 = 0xffecda;
    int:Signed32 a4 = -0x123fAbCD;

    int b1 = a1.min();
    io:println(b1); // @output -2147483648

    b1 = a1.min(a1, a2);
    io:println(b1); // @output -2147483648

    b1 = int:min(a2, a3); // @output 456
    io:println(b1);

    io:println(a4.min(a2, a3)); // @output -306162637

    io:println(int:min(a2, a3, a4)); // @output -306162637
}

Test-Case: output
Description: Test `min` function with type Signed16 values.
Labels: DecimalNumber, function-call-expr, HexIntLiteral, int, int:min, int:Signed16, method-call-expr, unary-minus

function init() {
    int:Signed16 a1 = -24536;
    int:Signed16 a2 = 453;
    int:Signed16 a3 = 0xacd;
    int:Signed16 a4 = -0x4FEa;

    int b1 = a1.min();
    io:println(b1); // @output -24536

    b1 = a1.min(a1, a2);
    io:println(b1); // @output -24536

    b1 = int:min(a2, a3);
    io:println(b1); // @output 453

    io:println(a4.min(a2)); // @output -20458

    io:println(int:min(a3, a2, a4)); // @output -20458
}

Test-Case: output
Description: Test `min` function with type Signed8 values.
Labels: DecimalNumber, function-call-expr, HexIntLiteral, int, int:min, int:Signed8, method-call-expr, unary-minus

function init() {
    int:Signed8 a1 = -120;
    int:Signed8 a2 = 10;
    int:Signed8 a3 = 0x7d;
    int:Signed8 a4 = -0x7a;

    int b1 = a1.min();
    io:println(b1); // @output -120

    b1 = a1.min(a1, a2);
    io:println(b1); // @output -120

    b1 = int:min(a2, a3);
    io:println(b1); // @output 10

    io:println(a4.min(a2)); // @output -122

    io:println(int:min(a3, a4, a1)); // @output -122
}

Test-Case: output
Description: Test `min` function with type Unsigned32 values.
Labels: DecimalNumber, function-call-expr, HexIntLiteral, int, int:min, int:Unsigned32, method-call-expr

function init() {
    int:Unsigned32 a1 = 50;
    int:Unsigned32 a2 = 3425;
    int:Unsigned32 a3 = 0xabc12DE;

    int b1 = a1.min();
    io:println(b1); // @output 50

    b1 = a1.min(a1, a2);
    io:println(b1); // @output 50

    b1 = int:min(a1, a2, a3);
    io:println(b1); // @output 50

    io:println(a3.min(a2)); // @output 3425

    io:println(int:min(a2, a3)); // @output 3425
}

Test-Case: output
Description: Test `min` function with type Unsigned16 values.
Labels: DecimalNumber, function-call-expr, HexIntLiteral, int, int:min, int:Unsigned16, method-call-expr

function init() {
    int:Unsigned16 a1 = 50;
    int:Unsigned16 a2 = 3425;
    int:Unsigned16 a3 = 0xfAe1;

    int b1 = a1.min();
    io:println(b1); // @output 50

    b1 = a1.min(a1, a2);
    io:println(b1); // @output 50

    b1 = int:min(a1, a2, a3);
    io:println(b1); // @output 50

    io:println(a3.min(a2)); // @output 3425

    io:println(int:min(a2, a3)); // @output 3425
}

Test-Case: output
Description: Test `min` function with type Unsigned8 values.
Labels: DecimalNumber, function-call-expr, HexIntLiteral, int, int:min, int:Unsigned8, method-call-expr

function init() {
    int:Unsigned8 a1 = 50;
    int:Unsigned8 a2 = 5;
    int:Unsigned8 a3 = 0xa2;

    int b1 = a1.min();
    io:println(b1); // @output 50

    b1 = a1.min(a1, a2);
    io:println(b1); // @output 5

    b1 = int:min(a1, a2, a3);
    io:println(b1); // @output 5

    io:println(a3.min(a1)); // @output 50

    io:println(int:min(a1, a3)); // @output 50
}

Test-Case: output
Description: Test `min` function with type byte values.
Labels: byte, DecimalNumber, function-call-expr, HexIntLiteral, int, int:min, method-call-expr

function init() {
    byte a1 = 50;
    byte a2 = 5;
    byte a3 = 0xa2;

    int b1 = a1.min();
    io:println(b1); // @output 50

    b1 = a1.min(a1, a2);
    io:println(b1); // @output 5

    b1 = int:min(a1, a2, a3);
    io:println(b1); // @output 5

    io:println(a3.min(a1)); // @output 50

    io:println(int:min(a1, a3)); // @output 50
}

Test-Case: output
Description: Test `min` function with type int values.
Labels: DecimalNumber, function-call-expr, HexIntLiteral, int, int:min, method-call-expr, unary-minus

function init() {
    int a1 = 243526171;
    int a2 = 9223372036854775807;
    int a3 = 0xabcDE12AC5;
    int a4 = -0xabcDE12AC5;

    int b1 = a1.min();
    io:println(b1); // @output 243526171

    b1 = a1.min(a1, a2);
    io:println(b1); // @output 243526171

    b1 = int:min(a1, a2, a3);
    io:println(b1); // @output 243526171

    io:println(a4.min(a2, a1)); // @output -737893493445

    io:println(int:min(a1, a3)); // @output 243526171
}

Test-Case: output
Description: Test `min` function with values of different builtin subtypes of int.
Labels: byte, DecimalNumber, HexIntLiteral, int, int:min, int:Signed16, int:Signed32, int:Signed8, int:Unsigned16,
        int:Unsigned32, int:Unsigned8, method-call-expr

function init() {
    int:Signed32 a1 = 300;
    int:Signed16 a2 = 200;
    int:Signed8 a3 = 100;
    int:Unsigned32 a4 = 400;
    int:Unsigned16 a5 = 500;
    int:Unsigned8 a6 = 250;
    byte a7 = 0xde;
    int a8 = 600;

    int b1 = a1.min(a2, 1000, a3, a4, a5, 3000, a6, a7, 2000); // @output 100
    io:println(b1);

    b1 = int:min(a1, a2, 1000, a3, a4, a5, 3000, a6, a7, 2000); // @output 100
    io:println(b1);

    io:println(300.min(a2, 1000, a3, a4, a5, 3000, a6, a7, 2000, a8)); // @output 100
}

Test-Case: output
Description: Test `min` function with user-defined subtypes of int.
Labels: DecimalNumber, function-call-expr, int, int:min, int:Signed8, int:Unsigned32, method-call-expr,
        module-const-decl, module-type-defn, singleton-type, union-type

const A = 10;
const B = 20;

type IntType1 4|20|30;

type IntType2 A|B;

type IntType3 int:Signed8|int:Unsigned32;

function init() {
    A a1 = 10;
    IntType1 a2 = 4;
    IntType2 a3 = 20;
    int:Signed8|int:Unsigned32 a4 = 12;
    IntType3 a5 = 5;

    int b1 = int:min(a1, a2, a3);
    io:println(b1); // @output 4

    b1 = a2.min(a2, a3);
    io:println(b1); // @output 4

    io:println(B.min(a1, a3, a4, a5)); // @output 5

    io:println(a3.min(A, a1, a5)); // @output 5

    io:println(a4.min()); // @output 12

    io:println(a5.min()); // @output 5

    io:println(a4.min(a5, a1)); // @output 5

    io:println(int:min(a5, a3, a2)); // @output 4
}

Test-Case: output
Description: Test assignability of `min` function result with compatible types.
Labels: any, DecimalNumber, int, int:min, method-call-expr, optional-type, unary-minus

function init() {
    int a1 = -12536;

    int? b1 = a1.min(786, 200);
    io:println(b1); // @output -12536

    testAny(a1.min(23, 50, 5)); // @output -12536
}

function testAny(any i) {
    io:println(i);
}

Test-Case: output
Description: Test assignability of `min` function result with var.
Labels: DecimalNumber, int, int:min, method-call-expr, unary-minus, var

function init() {
    int a1 = -50;

    var b1 = a1.min(10, 20);
    io:println(b1); // @output -50
    io:println(b1 is int); // @output true
}

Test-Case: output
Description: Test `min` function result belonging to a type.
Labels: byte, DecimalNumber, function-call-expr, int, int:min, int:Signed16, int:Signed32, int:Signed8, int:Unsigned16,
        int:Unsigned32, int:Unsigned8, is-expr

function init() {
    int a1 = 50;

    io:println(a1.min(100) is int); // @output true

    io:println(int:min(a1, 200) is int); // @output true

    io:println(int:min(a1, 60) is int:Signed32); // @output true
    io:println(int:min(a1, 60) is int:Signed16); // @output true
    io:println(int:min(a1, 60) is int:Signed8); // @output true

    io:println(int:min(a1, 60) is int:Unsigned32); // @output true
    io:println(int:min(a1, 60) is int:Unsigned16); // @output true
    io:println(int:min(a1, 60) is int:Unsigned8); // @output true
    io:println(int:min(a1, 60) is byte); // @output true
}

Test-Case: output
Description: Test equality with `min` function result.
Labels: byte, DecimalNumber, equality, function-call-expr, int, int:min, int:Signed32, method-call-expr, unary-minus

function init() {
    int a1 = 100;
    byte a2 = 125;
    int:Signed32 a3 = -50;

    int b1 = a1.min(a2, a3);
    int b2 = a2.min(a1, a3);

    io:println(b1 == b2); // @output true

    b1 = int:min(a1, a2, a3);
    b2 = int:min(a2, a1, a3);

    io:println(b1 == b2); // @output true

    io:println(a1.min(a2, a3) == a2.min(a1, a3)); // @output true

    io:println(int:min(a1, a2, a3) == int:min(a2, a1, a3)); // @output true

    io:println(a1.min(a3) != a3.min(a2)); // @output false

    io:println(int:min(a2, a3) != int:min(a3, a1)); // @output false
}

Test-Case: output
Description: Test chained `min` function.
Labels: DecimalNumber, function-call-expr, int, int:min, method-call-expr, unary-minus

function init() {
    int a1 = -100;

    int b1 = a1.min(-200).min(5, 200).min(12, 1234, int:min(23, 10).min(-500, -650));
    io:println(b1); // @output -650

    io:println(int:min(int:min(a1, -200).min(400), 300).min(12, 300).min(12, 500)); // @output -200
}

Test-Case: output
Description: Test `min` method call as expression in return statement.
Labels: DecimalNumber, int, int:min, method-call-expr

function init() {
    io:println(getMin(10, 20)); // @output 10
}

function getMin(int i, int j) returns int {
    return i.min(j);
}

Test-Case: output
Description: Test `min` method call as expression in list constructor.
Labels: array-type, DecimalNumber, function-call-expr, HexIntLiteral, int, int:min, list-constructor-expr,
        method-call-expr, unary-minus

function init() {
    int[] arr = [23.min(5), int:min(-12, 2), (0xacd).min(0x3, 12)];
    io:println(arr); // @output [5,-12,3]
}

Test-Case: output
Description: Test `min` method call as expression in method call expression.
Labels: DecimalNumber, function-call-expr, int, int:min, method-call-expr, unary-minus, value:toString

function init() {
    io:println(int:min(-90, 100).toString()); // @output -90
}

Test-Case: output
Description: Test `min` method call as expression in map constructor.
Labels: DecimalNumber, function-call-expr, HexIntLiteral, int, int:min, map-type, mapping-constructor-expr,
        method-call-expr, string, unary-minus

function init() {
    map<int> intMap = {"One": 23.min(5), "Two": int:min(-30, 0xf)};
    io:println(intMap); // @output {"One":5,"Two":-30}
}

Test-Case: output
Description: Test `min` method call as expression in additive expression.
Labels: additive-expr, DecimalNumber, function-call-expr, int, int:min, method-call-expr, unary-minus

function init() {
    int a = int:min(-30, 120) + 100.min(12);
    io:println(a); // @output -18
}

Test-Case: output
Description: Test `min` method call as expression in if else statement.
Labels: DecimalNumber, function-call-expr, if-else-stmt, int, int:min, method-call-expr, relational-expr

function init() {
    compare(5, 2); // @output true
    compare(100, 30); // @output true
    compare(50, 60); // @output true
}

function compare(int i, int j) {
    if int:min(i, j) < 30 {
        io:println(int:min(i) < 30);
    } else if (i.min(j) < 40) {
        io:println(i.min(j) < 40);
    } else {
        io:println(i.min(j) > 40);
    }
}

Test-Case: error
Description: Test assigning the result of `min` function to an incompatible type.
Labels: DecimalNumber, function-call-expr, int:min, int:Signed8, method-call-expr, string, unary-minus

function errorFunction(int a) {
    int:Signed8 _ = a.min(10); // @error expects a int:Signed8 value, but min() returns an int

    string _ = a.min(); // @error expects a string value, but min() returns an int

    string _ = int:min(-10); // @error expects a string value, but min() returns an int
}

Test-Case: error
Description: Test passing invalid value to `min` function.
Labels: DecimalNumber, float, function-call-expr, int, int:min, method-call-expr, string

function errorFunction(int a) {
    int _ = a.min(10.5); // @error expects other values to be int

    int _ = int:min("ABC"); // @error expects first value to be int
}

Test-Case: error
Description: Test `min` function on invalid type.
Labels: DecimalNumber, int, int:min, method-call-expr, string

function errorFunction(string a) {
    int _ = a.min(10); // @error min() is not defined for string
}

Test-Case: error
Description: Test missing required parameter in `min` function call.
Labels: function-call-expr, int, int:min

function errorFunction() {
    int _ = int:min(); // @error missing first int value
}
