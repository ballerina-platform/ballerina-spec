Test-Case: output
Description: Test Signed16 built-in subtype of int.
Labels: DecimalNumber, int:Signed16, unary-minus

function init() {
    int:Signed16 a1 = -32768;
    int:Signed16 a2 = 15213;
    int:Signed16 a3 = 32767;

    testSigned16Int(a1); // @output -32768
    testSigned16Int(a2); // @output 15213
    testSigned16Int(a3); // @output 32767
}

function testSigned16Int(int:Signed16 i) {
    io:println(i);
}

Test-Case: output
Description: Test assignability with type Signed16.
Labels: DecimalNumber, int, int:Signed16, int:Signed32, is-expr, optional-type, unary-minus

function init() {
    int:Signed16 a1 = -32768;
    int:Signed16 a2 = 15213;
    int:Signed16 a3 = 32767;

    int:Signed32 b1 = a3;
    io:println(b1 is int:Signed16); // @output true

    int b2 = a1;
    io:println(b2 is int:Signed16); // @output true

    int? b3 = a2;
    io:println(b3 is int:Signed16); // @output true
}

Test-Case: output
Description: Test assignability with type Signed16.
Labels: any, DecimalNumber, if-else-stmt, int, int:Signed16, is-expr, optional-type, string, unary-minus

function init() {
    int:Signed16 a1 = -32768;
    int:Signed16 a2 = 15213;
    int:Signed16 a3 = 32767;

    testIntOrNil(a1); // @output -32768
    testIntOrNil(a2); // @output 15213
    testIntOrNil(a3); // @output 32767

    testAny(a1); // @output -32768
    testAny(a2); // @output 15213
    testAny(a3); // @output 32767
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i);
    } else {
        io:println("nil");
    }
}

function testAny(any i) {
    io:println(i);
}

Test-Case: output
Description: Test type Signed16 value belonging to a type.
Labels: DecimalNumber, int, int:Signed16, int:Signed32, is-expr

function init() {
    int:Signed16 a1 = 23546;

    io:println(23546 is int:Signed16); // @output true
    io:println(a1 is int:Signed32); // @output true
    io:println(a1 is int); // @output true
}

Test-Case: output
Description: Test equality of type Signed16 values.
Labels: DecimalNumber, equality, int, int:Signed16, int:Signed32, unary-minus

function init() {
    int:Signed16 a1 = 32767;
    int:Signed16 a2 = 32767;

    io:println(a1 == a2); // @output true

    int:Signed32 b1 = 32767;
    io:println(a1 == b1); // @output true

    int b2 = 32767;
    io:println(a2 == b2); // @output true

    int:Signed16 a3 = -32767;

    io:println(a3 == -32767); // @output true

    io:println(a1 != a3); // @output true
}

Test-Case: error
Description: Test type Signed16 value assignability with incompatible types.
Labels: DecimalNumber, int:Signed16, int:Signed8, string, unary-minus

function errorFunction() {
    int:Signed16 _ = 32768; // @error int is not a subtype of int:Signed16

    int:Signed16 _ = -32769; // @error int is not a subtype of int:Signed16

    int:Signed16 a = 100;
    testSigned8Int(a); // @error int:Signed16 is not a subtype of int:Signed8

    int:Signed16 _ = "A"; // @error string is not a subtype of int:Signed16

    string b1 = a3; // @error int:Signed16 is not a subtype of string
}

function testSigned8Int(int:Signed8 i) {
}

Test-Case: error
Description: Test assigning an incompatible int value to type Signed16.
Labels: DecimalNumber, int:Signed16

function errorFunction() {
    int:Signed16 _ = 21474803712; // @error int is not a subtype of int:Signed16
    int:Signed16 _ = 9223372036854775807; // @error int is not a subtype of int:Signed16
}

Test-Case: error
Description: Test assigning too large value to a Signed16 type variable.
Fail-Issue: ballerina-platform/ballerina-lang#32574
Labels: DecimalNumber, int:Signed16

function errorFunction() {
    int:Signed16 _ = 9223372036854775808; // @error too large value
}

Test-Case: error
Description: Test assigning too small value to a Signed16 type variable.
Fail-Issue: ballerina-platform/ballerina-lang#32574
Labels: DecimalNumber, int:Signed16, unary-minus

function errorFunction() {
    int:Signed16 _ = -9223372036854775809; // @error too small value
}
